
F_Rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006ff4  08006ff4  00007ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007140  08007140  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007140  08007140  00008140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007148  08007148  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007148  08007148  00008148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800714c  0800714c  0000814c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007150  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000060  080071b0  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002148  080071b0  00009148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b714  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386c  00000000  00000000  000247a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00028010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001191  00000000  00000000  000296b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e90  00000000  00000000  0002a841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0f6  00000000  00000000  0002e6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd05a  00000000  00000000  000487c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006494  00000000  00000000  00145864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fdc 	.word	0x08006fdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006fdc 	.word	0x08006fdc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fb46 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f826 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f8a6 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f874 	bl	800066c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f003 fa4e 	bl	8003a24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000588:	4a09      	ldr	r2, [pc, #36]	@ (80005b0 <main+0x40>)
 800058a:	2100      	movs	r1, #0
 800058c:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <main+0x44>)
 800058e:	f003 fa93 	bl	8003ab8 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <main+0x48>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000598:	4a08      	ldr	r2, [pc, #32]	@ (80005bc <main+0x4c>)
 800059a:	2100      	movs	r1, #0
 800059c:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <main+0x50>)
 800059e:	f003 fa8b 	bl	8003ab8 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <main+0x54>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a8:	f003 fa60 	bl	8003a6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x3c>
 80005b0:	0800707c 	.word	0x0800707c
 80005b4:	08000799 	.word	0x08000799
 80005b8:	20000104 	.word	0x20000104
 80005bc:	080070a0 	.word	0x080070a0
 80005c0:	080007e1 	.word	0x080007e1
 80005c4:	20000108 	.word	0x20000108

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	@ 0x58
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	2244      	movs	r2, #68	@ 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f006 f82a 	bl	8006630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ee:	f000 fe1f 	bl	8001230 <HAL_PWREx_ControlVoltageScaling>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f8:	f000 f928 	bl	800084c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000604:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000606:	2310      	movs	r3, #16
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000616:	230a      	movs	r3, #10
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fe56 	bl	80012dc <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000636:	f000 f909 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fa1e 	bl	8001a94 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065e:	f000 f8f5 	bl	800084c <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3758      	adds	r7, #88	@ 0x58
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000672:	4a15      	ldr	r2, [pc, #84]	@ (80006c8 <MX_USART2_UART_Init+0x5c>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006b0:	f002 fbc8 	bl	8002e44 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ba:	f000 f8c7 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a24      	ldr	r2, [pc, #144]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a1e      	ldr	r2, [pc, #120]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074a:	f000 fd4b 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000754:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <MX_GPIO_Init+0xc8>)
 8000766:	f000 fb93 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076a:	2320      	movs	r3, #32
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f000 fb84 	bl	8000e90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	48000800 	.word	0x48000800

08000798 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  serialPrint("Blink01");
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <StartBlink01+0x3c>)
 80007a2:	f000 fa0f 	bl	8000bc4 <serialPrint>

	  for (int x = 0; x <5; x++){
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e00a      	b.n	80007c2 <StartBlink01+0x2a>
		  static char text[128];

		  sprintf(text, "count task1 : %d", x);
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	490a      	ldr	r1, [pc, #40]	@ (80007d8 <StartBlink01+0x40>)
 80007b0:	480a      	ldr	r0, [pc, #40]	@ (80007dc <StartBlink01+0x44>)
 80007b2:	f005 ff1d 	bl	80065f0 <siprintf>
		  serialPrint(text);
 80007b6:	4809      	ldr	r0, [pc, #36]	@ (80007dc <StartBlink01+0x44>)
 80007b8:	f000 fa04 	bl	8000bc4 <serialPrint>
	  for (int x = 0; x <5; x++){
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	ddf1      	ble.n	80007ac <StartBlink01+0x14>
		  //HAL_Delay(1000);
	  }
	  osDelay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007cc:	f003 fa06 	bl	8003bdc <osDelay>
	  serialPrint("Blink01");
 80007d0:	e7e6      	b.n	80007a0 <StartBlink01+0x8>
 80007d2:	bf00      	nop
 80007d4:	08007004 	.word	0x08007004
 80007d8:	0800700c 	.word	0x0800700c
 80007dc:	2000010c 	.word	0x2000010c

080007e0 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  serialPrint("Blink02");
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <StartBlink02+0x3c>)
 80007ea:	f000 f9eb 	bl	8000bc4 <serialPrint>
	  for (int x = 0; x <3; x++){
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	e00a      	b.n	800080a <StartBlink02+0x2a>
		  static char text[128];
		  sprintf(text, "count task2 : %d", x);
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	490a      	ldr	r1, [pc, #40]	@ (8000820 <StartBlink02+0x40>)
 80007f8:	480a      	ldr	r0, [pc, #40]	@ (8000824 <StartBlink02+0x44>)
 80007fa:	f005 fef9 	bl	80065f0 <siprintf>
		  serialPrint(text);
 80007fe:	4809      	ldr	r0, [pc, #36]	@ (8000824 <StartBlink02+0x44>)
 8000800:	f000 f9e0 	bl	8000bc4 <serialPrint>
	  for (int x = 0; x <3; x++){
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b02      	cmp	r3, #2
 800080e:	ddf1      	ble.n	80007f4 <StartBlink02+0x14>
		  //HAL_Delay(1000);
	  }
	  osDelay(2000);
 8000810:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000814:	f003 f9e2 	bl	8003bdc <osDelay>
	  serialPrint("Blink02");
 8000818:	e7e6      	b.n	80007e8 <StartBlink02+0x8>
 800081a:	bf00      	nop
 800081c:	08007020 	.word	0x08007020
 8000820:	08007028 	.word	0x08007028
 8000824:	2000018c 	.word	0x2000018c

08000828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d101      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083a:	f000 fa03 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40001000 	.word	0x40001000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000862:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	@ 0x60
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <HAL_MspInit+0x4c>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	@ 0x58
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f000 fad1 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0ac      	sub	sp, #176	@ 0xb0
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2288      	movs	r2, #136	@ 0x88
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f005 feb1 	bl	8006630 <memset>
  if(huart->Instance==USART2)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <HAL_UART_MspInit+0xb0>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d13b      	bne.n	8000950 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008dc:	2300      	movs	r3, #0
 80008de:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fb2b 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f0:	f7ff ffac 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f4:	4b19      	ldr	r3, [pc, #100]	@ (800095c <HAL_UART_MspInit+0xb4>)
 80008f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f8:	4a18      	ldr	r2, [pc, #96]	@ (800095c <HAL_UART_MspInit+0xb4>)
 80008fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000900:	4b16      	ldr	r3, [pc, #88]	@ (800095c <HAL_UART_MspInit+0xb4>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b13      	ldr	r3, [pc, #76]	@ (800095c <HAL_UART_MspInit+0xb4>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000910:	4a12      	ldr	r2, [pc, #72]	@ (800095c <HAL_UART_MspInit+0xb4>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000918:	4b10      	ldr	r3, [pc, #64]	@ (800095c <HAL_UART_MspInit+0xb4>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000924:	230c      	movs	r3, #12
 8000926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093c:	2307      	movs	r3, #7
 800093e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094c:	f000 faa0 	bl	8000e90 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000950:	bf00      	nop
 8000952:	37b0      	adds	r7, #176	@ 0xb0
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40004400 	.word	0x40004400
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	@ 0x38
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800096e:	4b34      	ldr	r3, [pc, #208]	@ (8000a40 <HAL_InitTick+0xe0>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000972:	4a33      	ldr	r2, [pc, #204]	@ (8000a40 <HAL_InitTick+0xe0>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6593      	str	r3, [r2, #88]	@ 0x58
 800097a:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <HAL_InitTick+0xe0>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000986:	f107 0210 	add.w	r2, r7, #16
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fa43 	bl	8001e1c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000996:	6a3b      	ldr	r3, [r7, #32]
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800099a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800099c:	2b00      	cmp	r3, #0
 800099e:	d103      	bne.n	80009a8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009a0:	f001 fa10 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 80009a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80009a6:	e004      	b.n	80009b2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009a8:	f001 fa0c 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 80009ac:	4603      	mov	r3, r0
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b4:	4a23      	ldr	r2, [pc, #140]	@ (8000a44 <HAL_InitTick+0xe4>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	0c9b      	lsrs	r3, r3, #18
 80009bc:	3b01      	subs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009c0:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <HAL_InitTick+0xe8>)
 80009c2:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <HAL_InitTick+0xec>)
 80009c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <HAL_InitTick+0xe8>)
 80009c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000a48 <HAL_InitTick+0xe8>)
 80009d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <HAL_InitTick+0xe8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <HAL_InitTick+0xe8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <HAL_InitTick+0xe8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009e6:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <HAL_InitTick+0xe8>)
 80009e8:	f001 ff66 	bl	80028b8 <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d11b      	bne.n	8000a32 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009fa:	4813      	ldr	r0, [pc, #76]	@ (8000a48 <HAL_InitTick+0xe8>)
 80009fc:	f001 ffbe 	bl	800297c <HAL_TIM_Base_Start_IT>
 8000a00:	4603      	mov	r3, r0
 8000a02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d111      	bne.n	8000a32 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a0e:	2036      	movs	r0, #54	@ 0x36
 8000a10:	f000 fa30 	bl	8000e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d808      	bhi.n	8000a2c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	2036      	movs	r0, #54	@ 0x36
 8000a20:	f000 fa0c 	bl	8000e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <HAL_InitTick+0xf0>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	e002      	b.n	8000a32 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a32:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3738      	adds	r7, #56	@ 0x38
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000
 8000a44:	431bde83 	.word	0x431bde83
 8000a48:	2000020c 	.word	0x2000020c
 8000a4c:	40001000 	.word	0x40001000
 8000a50:	20000004 	.word	0x20000004

08000a54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a58:	f3bf 8f4f 	dsb	sy
}
 8000a5c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <__NVIC_SystemReset+0x24>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a66:	4904      	ldr	r1, [pc, #16]	@ (8000a78 <__NVIC_SystemReset+0x24>)
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__NVIC_SystemReset+0x28>)
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6e:	f3bf 8f4f 	dsb	sy
}
 8000a72:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <__NVIC_SystemReset+0x20>
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	05fa0004 	.word	0x05fa0004

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <NMI_Handler+0x4>

08000a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	serialPrint("SW RESET - Hard Fault handler");
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <HardFault_Handler+0x18>)
 8000a8e:	f000 f899 	bl	8000bc4 <serialPrint>
	HAL_Delay(1000);
 8000a92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a96:	f000 f8f5 	bl	8000c84 <HAL_Delay>
	NVIC_SystemReset();
 8000a9a:	f7ff ffdb 	bl	8000a54 <__NVIC_SystemReset>
 8000a9e:	bf00      	nop
 8000aa0:	0800703c 	.word	0x0800703c

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <TIM6_DAC_IRQHandler+0x10>)
 8000ad2:	f001 ffc3 	bl	8002a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000020c 	.word	0x2000020c

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	@ (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f005 fdec 	bl	80066ec <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20018000 	.word	0x20018000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	20000258 	.word	0x20000258
 8000b48:	20002148 	.word	0x20002148

08000b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	@ (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b74:	f7ff ffea 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	@ (8000bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb4 <LoopForever+0xe>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	@ (8000bbc <LoopForever+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f005 fdab 	bl	80066f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba2:	f7ff fce5 	bl	8000570 <main>

08000ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba6:	e7fe      	b.n	8000ba6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bb4:	08007150 	.word	0x08007150
  ldr r2, =_sbss
 8000bb8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bbc:	20002148 	.word	0x20002148

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>
	...

08000bc4 <serialPrint>:
#include <general.h>
#include <main.h>
extern UART_HandleTypeDef huart2;


void serialPrint(char *msg){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	 static char buffer[1024];
	snprintf(buffer, sizeof(buffer), "%s\r\n", msg);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <serialPrint+0x34>)
 8000bd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bd4:	4809      	ldr	r0, [pc, #36]	@ (8000bfc <serialPrint+0x38>)
 8000bd6:	f005 fcd7 	bl	8006588 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 1000);
 8000bda:	4808      	ldr	r0, [pc, #32]	@ (8000bfc <serialPrint+0x38>)
 8000bdc:	f7ff faf8 	bl	80001d0 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be8:	4904      	ldr	r1, [pc, #16]	@ (8000bfc <serialPrint+0x38>)
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <serialPrint+0x3c>)
 8000bec:	f002 f978 	bl	8002ee0 <HAL_UART_Transmit>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	0800705c 	.word	0x0800705c
 8000bfc:	2000025c 	.word	0x2000025c
 8000c00:	2000007c 	.word	0x2000007c

08000c04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <HAL_Init+0x3c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <HAL_Init+0x3c>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f903 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c20:	200f      	movs	r0, #15
 8000c22:	f7ff fe9d 	bl	8000960 <HAL_InitTick>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	e001      	b.n	8000c36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c32:	f7ff fe11 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	2000065c 	.word	0x2000065c

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000065c 	.word	0x2000065c

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008

08000ccc <__NVIC_SetPriorityGrouping>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	@ (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff4c 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4e:	f7ff ff61 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff ffb1 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff80 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff54 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9e:	e17f      	b.n	80011a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8171 	beq.w	800119a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d005      	beq.n	8000ed0 <HAL_GPIO_Init+0x40>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d130      	bne.n	8000f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0201 	and.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d118      	bne.n	8000f70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f44:	2201      	movs	r2, #1
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	f003 0201 	and.w	r2, r3, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d017      	beq.n	8000fac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d123      	bne.n	8001000 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	6939      	ldr	r1, [r7, #16]
 8000ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0203 	and.w	r2, r3, #3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80ac 	beq.w	800119a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b5f      	ldr	r3, [pc, #380]	@ (80011c0 <HAL_GPIO_Init+0x330>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001046:	4a5e      	ldr	r2, [pc, #376]	@ (80011c0 <HAL_GPIO_Init+0x330>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6613      	str	r3, [r2, #96]	@ 0x60
 800104e:	4b5c      	ldr	r3, [pc, #368]	@ (80011c0 <HAL_GPIO_Init+0x330>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800105a:	4a5a      	ldr	r2, [pc, #360]	@ (80011c4 <HAL_GPIO_Init+0x334>)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001084:	d025      	beq.n	80010d2 <HAL_GPIO_Init+0x242>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4f      	ldr	r2, [pc, #316]	@ (80011c8 <HAL_GPIO_Init+0x338>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d01f      	beq.n	80010ce <HAL_GPIO_Init+0x23e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4e      	ldr	r2, [pc, #312]	@ (80011cc <HAL_GPIO_Init+0x33c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d019      	beq.n	80010ca <HAL_GPIO_Init+0x23a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4d      	ldr	r2, [pc, #308]	@ (80011d0 <HAL_GPIO_Init+0x340>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x236>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4c      	ldr	r2, [pc, #304]	@ (80011d4 <HAL_GPIO_Init+0x344>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x232>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4b      	ldr	r2, [pc, #300]	@ (80011d8 <HAL_GPIO_Init+0x348>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x22e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4a      	ldr	r2, [pc, #296]	@ (80011dc <HAL_GPIO_Init+0x34c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x22a>
 80010b6:	2306      	movs	r3, #6
 80010b8:	e00c      	b.n	80010d4 <HAL_GPIO_Init+0x244>
 80010ba:	2307      	movs	r3, #7
 80010bc:	e00a      	b.n	80010d4 <HAL_GPIO_Init+0x244>
 80010be:	2305      	movs	r3, #5
 80010c0:	e008      	b.n	80010d4 <HAL_GPIO_Init+0x244>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x244>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x244>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x244>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x244>
 80010d2:	2300      	movs	r3, #0
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	f002 0203 	and.w	r2, r2, #3
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4093      	lsls	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e4:	4937      	ldr	r1, [pc, #220]	@ (80011c4 <HAL_GPIO_Init+0x334>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010f2:	4b3b      	ldr	r3, [pc, #236]	@ (80011e0 <HAL_GPIO_Init+0x350>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001116:	4a32      	ldr	r2, [pc, #200]	@ (80011e0 <HAL_GPIO_Init+0x350>)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800111c:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <HAL_GPIO_Init+0x350>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001140:	4a27      	ldr	r2, [pc, #156]	@ (80011e0 <HAL_GPIO_Init+0x350>)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <HAL_GPIO_Init+0x350>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800116a:	4a1d      	ldr	r2, [pc, #116]	@ (80011e0 <HAL_GPIO_Init+0x350>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_GPIO_Init+0x350>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001194:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <HAL_GPIO_Init+0x350>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f47f ae78 	bne.w	8000ea0 <HAL_GPIO_Init+0x10>
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000
 80011c8:	48000400 	.word	0x48000400
 80011cc:	48000800 	.word	0x48000800
 80011d0:	48000c00 	.word	0x48000c00
 80011d4:	48001000 	.word	0x48001000
 80011d8:	48001400 	.word	0x48001400
 80011dc:	48001800 	.word	0x48001800
 80011e0:	40010400 	.word	0x40010400

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001200:	e002      	b.n	8001208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <HAL_PWREx_GetVoltageRange+0x18>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40007000 	.word	0x40007000

08001230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800123e:	d130      	bne.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800124c:	d038      	beq.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800124e:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001256:	4a1e      	ldr	r2, [pc, #120]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001258:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2232      	movs	r2, #50	@ 0x32
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	0c9b      	lsrs	r3, r3, #18
 8001270:	3301      	adds	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001274:	e002      	b.n	800127c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3b01      	subs	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001288:	d102      	bne.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x60>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1f2      	bne.n	8001276 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800129c:	d110      	bne.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e00f      	b.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ae:	d007      	beq.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012b8:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40007000 	.word	0x40007000
 80012d4:	20000000 	.word	0x20000000
 80012d8:	431bde83 	.word	0x431bde83

080012dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e3ca      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ee:	4b97      	ldr	r3, [pc, #604]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f8:	4b94      	ldr	r3, [pc, #592]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80e4 	beq.w	80014d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <HAL_RCC_OscConfig+0x4a>
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	2b0c      	cmp	r3, #12
 800131a:	f040 808b 	bne.w	8001434 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b01      	cmp	r3, #1
 8001322:	f040 8087 	bne.w	8001434 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001326:	4b89      	ldr	r3, [pc, #548]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_RCC_OscConfig+0x62>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e3a2      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1a      	ldr	r2, [r3, #32]
 8001342:	4b82      	ldr	r3, [pc, #520]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <HAL_RCC_OscConfig+0x7c>
 800134e:	4b7f      	ldr	r3, [pc, #508]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001356:	e005      	b.n	8001364 <HAL_RCC_OscConfig+0x88>
 8001358:	4b7c      	ldr	r3, [pc, #496]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001364:	4293      	cmp	r3, r2
 8001366:	d223      	bcs.n	80013b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fd87 	bl	8001e80 <RCC_SetFlashLatencyFromMSIRange>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e383      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137c:	4b73      	ldr	r3, [pc, #460]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a72      	ldr	r2, [pc, #456]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b70      	ldr	r3, [pc, #448]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	496d      	ldr	r1, [pc, #436]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139a:	4b6c      	ldr	r3, [pc, #432]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	4968      	ldr	r1, [pc, #416]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
 80013ae:	e025      	b.n	80013fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b0:	4b66      	ldr	r3, [pc, #408]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a65      	ldr	r2, [pc, #404]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b63      	ldr	r3, [pc, #396]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4960      	ldr	r1, [pc, #384]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ce:	4b5f      	ldr	r3, [pc, #380]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	495b      	ldr	r1, [pc, #364]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fd47 	bl	8001e80 <RCC_SetFlashLatencyFromMSIRange>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e343      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013fc:	f000 fc4a 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001400:	4602      	mov	r2, r0
 8001402:	4b52      	ldr	r3, [pc, #328]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	4950      	ldr	r1, [pc, #320]	@ (8001550 <HAL_RCC_OscConfig+0x274>)
 800140e:	5ccb      	ldrb	r3, [r1, r3]
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	4a4e      	ldr	r2, [pc, #312]	@ (8001554 <HAL_RCC_OscConfig+0x278>)
 800141a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800141c:	4b4e      	ldr	r3, [pc, #312]	@ (8001558 <HAL_RCC_OscConfig+0x27c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fa9d 	bl	8000960 <HAL_InitTick>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d052      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	e327      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d032      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800143c:	4b43      	ldr	r3, [pc, #268]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a42      	ldr	r2, [pc, #264]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001448:	f7ff fc10 	bl	8000c6c <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001450:	f7ff fc0c 	bl	8000c6c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e310      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001462:	4b3a      	ldr	r3, [pc, #232]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146e:	4b37      	ldr	r3, [pc, #220]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a36      	ldr	r2, [pc, #216]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b34      	ldr	r3, [pc, #208]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4931      	ldr	r1, [pc, #196]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148c:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	492c      	ldr	r1, [pc, #176]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
 80014a0:	e01a      	b.n	80014d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014a2:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a29      	ldr	r2, [pc, #164]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fbdd 	bl	8000c6c <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b6:	f7ff fbd9 	bl	8000c6c <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e2dd      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c8:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x1da>
 80014d4:	e000      	b.n	80014d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d074      	beq.n	80015ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x21a>
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b0c      	cmp	r3, #12
 80014ee:	d10e      	bne.n	800150e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d10b      	bne.n	800150e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d064      	beq.n	80015cc <HAL_RCC_OscConfig+0x2f0>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d160      	bne.n	80015cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e2ba      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x24a>
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e026      	b.n	8001574 <HAL_RCC_OscConfig+0x298>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800152e:	d115      	bne.n	800155c <HAL_RCC_OscConfig+0x280>
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a05      	ldr	r2, [pc, #20]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001536:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b03      	ldr	r3, [pc, #12]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a02      	ldr	r2, [pc, #8]	@ (800154c <HAL_RCC_OscConfig+0x270>)
 8001542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e014      	b.n	8001574 <HAL_RCC_OscConfig+0x298>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	080070c4 	.word	0x080070c4
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004
 800155c:	4ba0      	ldr	r3, [pc, #640]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a9f      	ldr	r2, [pc, #636]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b9d      	ldr	r3, [pc, #628]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a9c      	ldr	r2, [pc, #624]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fb76 	bl	8000c6c <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fb72 	bl	8000c6c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	@ 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e276      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001596:	4b92      	ldr	r3, [pc, #584]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x2a8>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb62 	bl	8000c6c <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fb5e 	bl	8000c6c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	@ 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e262      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015be:	4b88      	ldr	r3, [pc, #544]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x2d0>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d060      	beq.n	800169c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d005      	beq.n	80015ec <HAL_RCC_OscConfig+0x310>
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d119      	bne.n	800161a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d116      	bne.n	800161a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ec:	4b7c      	ldr	r3, [pc, #496]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_OscConfig+0x328>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e23f      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b76      	ldr	r3, [pc, #472]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	4973      	ldr	r1, [pc, #460]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001618:	e040      	b.n	800169c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d023      	beq.n	800166a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001622:	4b6f      	ldr	r3, [pc, #444]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a6e      	ldr	r2, [pc, #440]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fb1d 	bl	8000c6c <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fb19 	bl	8000c6c <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e21d      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001648:	4b65      	ldr	r3, [pc, #404]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b62      	ldr	r3, [pc, #392]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	495f      	ldr	r1, [pc, #380]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
 8001668:	e018      	b.n	800169c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b5d      	ldr	r3, [pc, #372]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a5c      	ldr	r2, [pc, #368]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff faf9 	bl	8000c6c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff faf5 	bl	8000c6c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1f9      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001690:	4b53      	ldr	r3, [pc, #332]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d03c      	beq.n	8001722 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01c      	beq.n	80016ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b0:	4b4b      	ldr	r3, [pc, #300]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b6:	4a4a      	ldr	r2, [pc, #296]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7ff fad4 	bl	8000c6c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fad0 	bl	8000c6c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1d4      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016da:	4b41      	ldr	r3, [pc, #260]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80016dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0ef      	beq.n	80016c8 <HAL_RCC_OscConfig+0x3ec>
 80016e8:	e01b      	b.n	8001722 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ea:	4b3d      	ldr	r3, [pc, #244]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f0:	4a3b      	ldr	r2, [pc, #236]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7ff fab7 	bl	8000c6c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff fab3 	bl	8000c6c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1b7      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ef      	bne.n	8001702 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80a6 	beq.w	800187c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001734:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10d      	bne.n	800175c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001744:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 8001746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174a:	6593      	str	r3, [r2, #88]	@ 0x58
 800174c:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001758:	2301      	movs	r3, #1
 800175a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175c:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_RCC_OscConfig+0x508>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d118      	bne.n	800179a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001768:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <HAL_RCC_OscConfig+0x508>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1d      	ldr	r2, [pc, #116]	@ (80017e4 <HAL_RCC_OscConfig+0x508>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001774:	f7ff fa7a 	bl	8000c6c <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177c:	f7ff fa76 	bl	8000c6c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e17a      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <HAL_RCC_OscConfig+0x508>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4d8>
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80017a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b2:	e029      	b.n	8001808 <HAL_RCC_OscConfig+0x52c>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d115      	bne.n	80017e8 <HAL_RCC_OscConfig+0x50c>
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c2:	4a07      	ldr	r2, [pc, #28]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d2:	4a03      	ldr	r2, [pc, #12]	@ (80017e0 <HAL_RCC_OscConfig+0x504>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017dc:	e014      	b.n	8001808 <HAL_RCC_OscConfig+0x52c>
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40007000 	.word	0x40007000
 80017e8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ee:	4a9b      	ldr	r2, [pc, #620]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017f8:	4b98      	ldr	r3, [pc, #608]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fe:	4a97      	ldr	r2, [pc, #604]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d016      	beq.n	800183e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001810:	f7ff fa2c 	bl	8000c6c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001816:	e00a      	b.n	800182e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff fa28 	bl	8000c6c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e12a      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182e:	4b8b      	ldr	r3, [pc, #556]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0ed      	beq.n	8001818 <HAL_RCC_OscConfig+0x53c>
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fa15 	bl	8000c6c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff fa11 	bl	8000c6c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e113      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800185c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 800185e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ed      	bne.n	8001846 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800186a:	7ffb      	ldrb	r3, [r7, #31]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001870:	4b7a      	ldr	r3, [pc, #488]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001874:	4a79      	ldr	r2, [pc, #484]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800187a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80fe 	beq.w	8001a82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	2b02      	cmp	r3, #2
 800188c:	f040 80d0 	bne.w	8001a30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001890:	4b72      	ldr	r3, [pc, #456]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0203 	and.w	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d130      	bne.n	8001906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	3b01      	subs	r3, #1
 80018b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d127      	bne.n	8001906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d11f      	bne.n	8001906 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018d0:	2a07      	cmp	r2, #7
 80018d2:	bf14      	ite	ne
 80018d4:	2201      	movne	r2, #1
 80018d6:	2200      	moveq	r2, #0
 80018d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018da:	4293      	cmp	r3, r2
 80018dc:	d113      	bne.n	8001906 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	3b01      	subs	r3, #1
 80018ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d06e      	beq.n	80019e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d069      	beq.n	80019e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800190c:	4b53      	ldr	r3, [pc, #332]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001918:	4b50      	ldr	r3, [pc, #320]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0ad      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001928:	4b4c      	ldr	r3, [pc, #304]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 800192e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001932:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001934:	f7ff f99a 	bl	8000c6c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f996 	bl	8000c6c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e09a      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194e:	4b43      	ldr	r3, [pc, #268]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195a:	4b40      	ldr	r3, [pc, #256]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	4b40      	ldr	r3, [pc, #256]	@ (8001a60 <HAL_RCC_OscConfig+0x784>)
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800196a:	3a01      	subs	r2, #1
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	4311      	orrs	r1, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001974:	0212      	lsls	r2, r2, #8
 8001976:	4311      	orrs	r1, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800197c:	0852      	lsrs	r2, r2, #1
 800197e:	3a01      	subs	r2, #1
 8001980:	0552      	lsls	r2, r2, #21
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001988:	0852      	lsrs	r2, r2, #1
 800198a:	3a01      	subs	r2, #1
 800198c:	0652      	lsls	r2, r2, #25
 800198e:	4311      	orrs	r1, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001994:	0912      	lsrs	r2, r2, #4
 8001996:	0452      	lsls	r2, r2, #17
 8001998:	430a      	orrs	r2, r1
 800199a:	4930      	ldr	r1, [pc, #192]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 800199c:	4313      	orrs	r3, r2
 800199e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019a0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019b8:	f7ff f958 	bl	8000c6c <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f954 	bl	8000c6c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e058      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019de:	e050      	b.n	8001a82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e04f      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d148      	bne.n	8001a82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80019f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019fc:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a08:	f7ff f930 	bl	8000c6c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f92c 	bl	8000c6c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e030      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x734>
 8001a2e:	e028      	b.n	8001a82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d023      	beq.n	8001a7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a08      	ldr	r2, [pc, #32]	@ (8001a5c <HAL_RCC_OscConfig+0x780>)
 8001a3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f913 	bl	8000c6c <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a48:	e00c      	b.n	8001a64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f90f 	bl	8000c6c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d905      	bls.n	8001a64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e013      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <HAL_RCC_OscConfig+0x7b0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1ec      	bne.n	8001a4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_RCC_OscConfig+0x7b0>)
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	4905      	ldr	r1, [pc, #20]	@ (8001a8c <HAL_RCC_OscConfig+0x7b0>)
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_RCC_OscConfig+0x7b4>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
 8001a7c:	e001      	b.n	8001a82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	feeefffc 	.word	0xfeeefffc

08001a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0e7      	b.n	8001c78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b75      	ldr	r3, [pc, #468]	@ (8001c80 <HAL_RCC_ClockConfig+0x1ec>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d910      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b72      	ldr	r3, [pc, #456]	@ (8001c80 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 0207 	bic.w	r2, r3, #7
 8001abe:	4970      	ldr	r1, [pc, #448]	@ (8001c80 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c80 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0cf      	b.n	8001c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	4b66      	ldr	r3, [pc, #408]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d908      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b63      	ldr	r3, [pc, #396]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4960      	ldr	r1, [pc, #384]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d04c      	beq.n	8001bac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d121      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0a6      	b.n	8001c78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b32:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d115      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e09a      	b.n	8001c78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e08e      	b.n	8001c78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e086      	b.n	8001c78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4943      	ldr	r1, [pc, #268]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f876 	bl	8000c6c <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff f872 	bl	8000c6c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e06e      	b.n	8001c78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d010      	beq.n	8001bda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d208      	bcs.n	8001bda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	492b      	ldr	r1, [pc, #172]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bda:	4b29      	ldr	r3, [pc, #164]	@ (8001c80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d210      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be8:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 0207 	bic.w	r2, r3, #7
 8001bf0:	4923      	ldr	r1, [pc, #140]	@ (8001c80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf8:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e036      	b.n	8001c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c16:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	4918      	ldr	r1, [pc, #96]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d009      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4910      	ldr	r1, [pc, #64]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c48:	f000 f824 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	490b      	ldr	r1, [pc, #44]	@ (8001c88 <HAL_RCC_ClockConfig+0x1f4>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_RCC_ClockConfig+0x1fc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fe77 	bl	8000960 <HAL_InitTick>
 8001c72:	4603      	mov	r3, r0
 8001c74:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c76:	7afb      	ldrb	r3, [r7, #11]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	080070c4 	.word	0x080070c4
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	@ 0x24
 8001c98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cac:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d121      	bne.n	8001d06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d11e      	bne.n	8001d06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cc8:	4b34      	ldr	r3, [pc, #208]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cd4:	4b31      	ldr	r3, [pc, #196]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	e005      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10d      	bne.n	8001d1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d102      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d0c:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	e004      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d18:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d134      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d22:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d003      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0xac>
 8001d38:	e005      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d3c:	617b      	str	r3, [r7, #20]
      break;
 8001d3e:	e005      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d42:	617b      	str	r3, [r7, #20]
      break;
 8001d44:	e002      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	617b      	str	r3, [r7, #20]
      break;
 8001d4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	3301      	adds	r3, #1
 8001d58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	fb03 f202 	mul.w	r2, r3, r2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	0e5b      	lsrs	r3, r3, #25
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	080070dc 	.word	0x080070dc
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	007a1200 	.word	0x007a1200

08001dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4904      	ldr	r1, [pc, #16]	@ (8001dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	080070d4 	.word	0x080070d4

08001df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001df4:	f7ff ffda 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0adb      	lsrs	r3, r3, #11
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4904      	ldr	r1, [pc, #16]	@ (8001e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	080070d4 	.word	0x080070d4

08001e1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	220f      	movs	r2, #15
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0203 	and.w	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <HAL_RCC_GetClockConfig+0x60>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0207 	and.w	r2, r3, #7
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	601a      	str	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40022000 	.word	0x40022000

08001e80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e98:	f7ff f9bc 	bl	8001214 <HAL_PWREx_GetVoltageRange>
 8001e9c:	6178      	str	r0, [r7, #20]
 8001e9e:	e014      	b.n	8001eca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	4b25      	ldr	r3, [pc, #148]	@ (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea4:	4a24      	ldr	r2, [pc, #144]	@ (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eac:	4b22      	ldr	r3, [pc, #136]	@ (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eb8:	f7ff f9ac 	bl	8001214 <HAL_PWREx_GetVoltageRange>
 8001ebc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ed0:	d10b      	bne.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	@ 0x80
 8001ed6:	d919      	bls.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2ba0      	cmp	r3, #160	@ 0xa0
 8001edc:	d902      	bls.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ede:	2302      	movs	r3, #2
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e013      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	e010      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b80      	cmp	r3, #128	@ 0x80
 8001eee:	d902      	bls.n	8001ef6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	e00a      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b80      	cmp	r3, #128	@ 0x80
 8001efa:	d102      	bne.n	8001f02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001efc:	2302      	movs	r3, #2
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	e004      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b70      	cmp	r3, #112	@ 0x70
 8001f06:	d101      	bne.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f08:	2301      	movs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 0207 	bic.w	r2, r3, #7
 8001f14:	4909      	ldr	r1, [pc, #36]	@ (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40022000 	.word	0x40022000

08001f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f48:	2300      	movs	r3, #0
 8001f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d041      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f64:	d02a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f6a:	d824      	bhi.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f70:	d008      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f76:	d81e      	bhi.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f80:	d010      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f82:	e018      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f84:	4b86      	ldr	r3, [pc, #536]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a85      	ldr	r2, [pc, #532]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f90:	e015      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fabb 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa2:	e00c      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fba6 	bl	80026fc <RCCEx_PLLSAI2_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb4:	e003      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fba:	e000      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10b      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fc4:	4b76      	ldr	r3, [pc, #472]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fd2:	4973      	ldr	r1, [pc, #460]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fda:	e001      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d041      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ff0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ff4:	d02a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ff6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ffa:	d824      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ffc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002000:	d008      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002006:	d81e      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002010:	d010      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002012:	e018      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002014:	4b62      	ldr	r3, [pc, #392]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a61      	ldr	r2, [pc, #388]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002020:	e015      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fa73 	bl	8002514 <RCCEx_PLLSAI1_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002032:	e00c      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3320      	adds	r3, #32
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fb5e 	bl	80026fc <RCCEx_PLLSAI2_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002044:	e003      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	74fb      	strb	r3, [r7, #19]
      break;
 800204a:	e000      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800204c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002054:	4b52      	ldr	r3, [pc, #328]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002062:	494f      	ldr	r1, [pc, #316]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800206a:	e001      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a0 	beq.w	80021be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002082:	4b47      	ldr	r3, [pc, #284]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	4b41      	ldr	r3, [pc, #260]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	4a40      	ldr	r2, [pc, #256]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a4:	4b3e      	ldr	r3, [pc, #248]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b4:	4b3b      	ldr	r3, [pc, #236]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a3a      	ldr	r2, [pc, #232]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fdd4 	bl	8000c6c <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c6:	e009      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7fe fdd0 	bl	8000c6c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d902      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	74fb      	strb	r3, [r7, #19]
        break;
 80020da:	e005      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020dc:	4b31      	ldr	r3, [pc, #196]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ef      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d15c      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ee:	4b2c      	ldr	r3, [pc, #176]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01f      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	d019      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800210c:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002116:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002118:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211e:	4a20      	ldr	r2, [pc, #128]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002128:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212e:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002138:	4a19      	ldr	r2, [pc, #100]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7fe fd8f 	bl	8000c6c <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002150:	e00b      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fd8b 	bl	8000c6c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d902      	bls.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	74fb      	strb	r3, [r7, #19]
            break;
 8002168:	e006      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ec      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800217e:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800218e:	4904      	ldr	r1, [pc, #16]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002196:	e009      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	74bb      	strb	r3, [r7, #18]
 800219c:	e006      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ac:	7c7b      	ldrb	r3, [r7, #17]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b9e      	ldr	r3, [pc, #632]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	4a9d      	ldr	r2, [pc, #628]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ca:	4b98      	ldr	r3, [pc, #608]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d0:	f023 0203 	bic.w	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d8:	4994      	ldr	r1, [pc, #592]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ec:	4b8f      	ldr	r3, [pc, #572]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f023 020c 	bic.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fa:	498c      	ldr	r1, [pc, #560]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800220e:	4b87      	ldr	r3, [pc, #540]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002214:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	4983      	ldr	r1, [pc, #524]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002230:	4b7e      	ldr	r3, [pc, #504]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	497b      	ldr	r1, [pc, #492]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002252:	4b76      	ldr	r3, [pc, #472]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002258:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002260:	4972      	ldr	r1, [pc, #456]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002274:	4b6d      	ldr	r3, [pc, #436]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	496a      	ldr	r1, [pc, #424]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002296:	4b65      	ldr	r3, [pc, #404]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a4:	4961      	ldr	r1, [pc, #388]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022b8:	4b5c      	ldr	r3, [pc, #368]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c6:	4959      	ldr	r1, [pc, #356]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022da:	4b54      	ldr	r3, [pc, #336]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e8:	4950      	ldr	r1, [pc, #320]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022fc:	4b4b      	ldr	r3, [pc, #300]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002302:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	4948      	ldr	r1, [pc, #288]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800231e:	4b43      	ldr	r3, [pc, #268]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002324:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	493f      	ldr	r1, [pc, #252]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d028      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002340:	4b3a      	ldr	r3, [pc, #232]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002346:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234e:	4937      	ldr	r1, [pc, #220]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800235a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800235e:	d106      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002360:	4b32      	ldr	r3, [pc, #200]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a31      	ldr	r2, [pc, #196]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800236a:	60d3      	str	r3, [r2, #12]
 800236c:	e011      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002372:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002376:	d10c      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f8c8 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d028      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800239e:	4b23      	ldr	r3, [pc, #140]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ac:	491f      	ldr	r1, [pc, #124]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023bc:	d106      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023be:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	4a1a      	ldr	r2, [pc, #104]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023c8:	60d3      	str	r3, [r2, #12]
 80023ca:	e011      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f899 	bl	8002514 <RCCEx_PLLSAI1_Config>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02b      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002402:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240a:	4908      	ldr	r1, [pc, #32]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800241a:	d109      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241c:	4b03      	ldr	r3, [pc, #12]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a02      	ldr	r2, [pc, #8]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002426:	60d3      	str	r3, [r2, #12]
 8002428:	e014      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002434:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f867 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02f      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002460:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002466:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800246e:	4928      	ldr	r1, [pc, #160]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800247a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800247e:	d10d      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	2102      	movs	r1, #2
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f844 	bl	8002514 <RCCEx_PLLSAI1_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d014      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	74bb      	strb	r3, [r7, #18]
 800249a:	e011      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3320      	adds	r3, #32
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f925 	bl	80026fc <RCCEx_PLLSAI2_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024cc:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024da:	490d      	ldr	r1, [pc, #52]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024fe:	4904      	ldr	r1, [pc, #16]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002506:	7cbb      	ldrb	r3, [r7, #18]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000

08002514 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002522:	4b75      	ldr	r3, [pc, #468]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d018      	beq.n	8002560 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800252e:	4b72      	ldr	r3, [pc, #456]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d10d      	bne.n	800255a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
       ||
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002546:	4b6c      	ldr	r3, [pc, #432]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
       ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d047      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e044      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d018      	beq.n	800259a <RCCEx_PLLSAI1_Config+0x86>
 8002568:	2b03      	cmp	r3, #3
 800256a:	d825      	bhi.n	80025b8 <RCCEx_PLLSAI1_Config+0xa4>
 800256c:	2b01      	cmp	r3, #1
 800256e:	d002      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0x62>
 8002570:	2b02      	cmp	r3, #2
 8002572:	d009      	beq.n	8002588 <RCCEx_PLLSAI1_Config+0x74>
 8002574:	e020      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002576:	4b60      	ldr	r3, [pc, #384]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11d      	bne.n	80025be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002586:	e01a      	b.n	80025be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002588:	4b5b      	ldr	r3, [pc, #364]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d116      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e013      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800259a:	4b57      	ldr	r3, [pc, #348]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025a6:	4b54      	ldr	r3, [pc, #336]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025b6:	e006      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      break;
 80025bc:	e004      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ce:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	430b      	orrs	r3, r1
 80025e4:	4944      	ldr	r1, [pc, #272]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d17d      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025f0:	4b41      	ldr	r3, [pc, #260]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a40      	ldr	r2, [pc, #256]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fc:	f7fe fb36 	bl	8000c6c <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002602:	e009      	b.n	8002618 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002604:	f7fe fb32 	bl	8000c6c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d902      	bls.n	8002618 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	73fb      	strb	r3, [r7, #15]
        break;
 8002616:	e005      	b.n	8002624 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002618:	4b37      	ldr	r3, [pc, #220]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ef      	bne.n	8002604 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d160      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d111      	bne.n	8002654 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002630:	4b31      	ldr	r3, [pc, #196]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6892      	ldr	r2, [r2, #8]
 8002640:	0211      	lsls	r1, r2, #8
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	0912      	lsrs	r2, r2, #4
 8002648:	0452      	lsls	r2, r2, #17
 800264a:	430a      	orrs	r2, r1
 800264c:	492a      	ldr	r1, [pc, #168]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	610b      	str	r3, [r1, #16]
 8002652:	e027      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d112      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265a:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002662:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6892      	ldr	r2, [r2, #8]
 800266a:	0211      	lsls	r1, r2, #8
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6912      	ldr	r2, [r2, #16]
 8002670:	0852      	lsrs	r2, r2, #1
 8002672:	3a01      	subs	r2, #1
 8002674:	0552      	lsls	r2, r2, #21
 8002676:	430a      	orrs	r2, r1
 8002678:	491f      	ldr	r1, [pc, #124]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	610b      	str	r3, [r1, #16]
 800267e:	e011      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002688:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6892      	ldr	r2, [r2, #8]
 8002690:	0211      	lsls	r1, r2, #8
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6952      	ldr	r2, [r2, #20]
 8002696:	0852      	lsrs	r2, r2, #1
 8002698:	3a01      	subs	r2, #1
 800269a:	0652      	lsls	r2, r2, #25
 800269c:	430a      	orrs	r2, r1
 800269e:	4916      	ldr	r1, [pc, #88]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a13      	ldr	r2, [pc, #76]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe fadc 	bl	8000c6c <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b6:	e009      	b.n	80026cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b8:	f7fe fad8 	bl	8000c6c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d902      	bls.n	80026cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	73fb      	strb	r3, [r7, #15]
          break;
 80026ca:	e005      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	4904      	ldr	r1, [pc, #16]	@ (80026f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000

080026fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800270a:	4b6a      	ldr	r3, [pc, #424]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d018      	beq.n	8002748 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002716:	4b67      	ldr	r3, [pc, #412]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0203 	and.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d10d      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
       ||
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800272e:	4b61      	ldr	r3, [pc, #388]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
       ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d047      	beq.n	80027d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e044      	b.n	80027d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d018      	beq.n	8002782 <RCCEx_PLLSAI2_Config+0x86>
 8002750:	2b03      	cmp	r3, #3
 8002752:	d825      	bhi.n	80027a0 <RCCEx_PLLSAI2_Config+0xa4>
 8002754:	2b01      	cmp	r3, #1
 8002756:	d002      	beq.n	800275e <RCCEx_PLLSAI2_Config+0x62>
 8002758:	2b02      	cmp	r3, #2
 800275a:	d009      	beq.n	8002770 <RCCEx_PLLSAI2_Config+0x74>
 800275c:	e020      	b.n	80027a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800275e:	4b55      	ldr	r3, [pc, #340]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11d      	bne.n	80027a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276e:	e01a      	b.n	80027a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002770:	4b50      	ldr	r3, [pc, #320]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d116      	bne.n	80027aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e013      	b.n	80027aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002782:	4b4c      	ldr	r3, [pc, #304]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800278e:	4b49      	ldr	r3, [pc, #292]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800279e:	e006      	b.n	80027ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      break;
 80027a4:	e004      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10d      	bne.n	80027d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027b6:	4b3f      	ldr	r3, [pc, #252]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	430b      	orrs	r3, r1
 80027cc:	4939      	ldr	r1, [pc, #228]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d167      	bne.n	80028a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a35      	ldr	r2, [pc, #212]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e4:	f7fe fa42 	bl	8000c6c <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ea:	e009      	b.n	8002800 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027ec:	f7fe fa3e 	bl	8000c6c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d902      	bls.n	8002800 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	73fb      	strb	r3, [r7, #15]
        break;
 80027fe:	e005      	b.n	800280c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002800:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ef      	bne.n	80027ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d14a      	bne.n	80028a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002818:	4b26      	ldr	r3, [pc, #152]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	0211      	lsls	r1, r2, #8
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68d2      	ldr	r2, [r2, #12]
 800282e:	0912      	lsrs	r2, r2, #4
 8002830:	0452      	lsls	r2, r2, #17
 8002832:	430a      	orrs	r2, r1
 8002834:	491f      	ldr	r1, [pc, #124]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	614b      	str	r3, [r1, #20]
 800283a:	e011      	b.n	8002860 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002844:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6892      	ldr	r2, [r2, #8]
 800284c:	0211      	lsls	r1, r2, #8
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6912      	ldr	r2, [r2, #16]
 8002852:	0852      	lsrs	r2, r2, #1
 8002854:	3a01      	subs	r2, #1
 8002856:	0652      	lsls	r2, r2, #25
 8002858:	430a      	orrs	r2, r1
 800285a:	4916      	ldr	r1, [pc, #88]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002860:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe f9fe 	bl	8000c6c <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002872:	e009      	b.n	8002888 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002874:	f7fe f9fa 	bl	8000c6c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d902      	bls.n	8002888 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	73fb      	strb	r3, [r7, #15]
          break;
 8002886:	e005      	b.n	8002894 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ef      	beq.n	8002874 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	4904      	ldr	r1, [pc, #16]	@ (80028b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e049      	b.n	800295e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f841 	bl	8002966 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f000 f9e0 	bl	8002cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d001      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e04f      	b.n	8002a34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a23      	ldr	r2, [pc, #140]	@ (8002a40 <HAL_TIM_Base_Start_IT+0xc4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x76>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029be:	d018      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x76>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a44 <HAL_TIM_Base_Start_IT+0xc8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x76>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002a48 <HAL_TIM_Base_Start_IT+0xcc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x76>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a4c <HAL_TIM_Base_Start_IT+0xd0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x76>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a50 <HAL_TIM_Base_Start_IT+0xd4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x76>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	@ (8002a54 <HAL_TIM_Base_Start_IT+0xd8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d115      	bne.n	8002a1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <HAL_TIM_Base_Start_IT+0xdc>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b06      	cmp	r3, #6
 8002a02:	d015      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0xb4>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a0a:	d011      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1c:	e008      	b.n	8002a30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e000      	b.n	8002a32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40013400 	.word	0x40013400
 8002a54:	40014000 	.word	0x40014000
 8002a58:	00010007 	.word	0x00010007

08002a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d020      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0202 	mvn.w	r2, #2
 8002a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8e9 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8db 	bl	8002c6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f8ec 	bl	8002c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d020      	beq.n	8002b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01b      	beq.n	8002b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0204 	mvn.w	r2, #4
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8c3 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8b5 	bl	8002c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f8c6 	bl	8002c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d020      	beq.n	8002b58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01b      	beq.n	8002b58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0208 	mvn.w	r2, #8
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f89d 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f88f 	bl	8002c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f8a0 	bl	8002c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d020      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01b      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0210 	mvn.w	r2, #16
 8002b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f877 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f869 	bl	8002c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f87a 	bl	8002c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00c      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0201 	mvn.w	r2, #1
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fd fe30 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d104      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f913 	bl	8002e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f90b 	bl	8002e30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00c      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f834 	bl	8002ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0220 	mvn.w	r2, #32
 8002c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f8d3 	bl	8002e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a46      	ldr	r2, [pc, #280]	@ (8002de8 <TIM_Base_SetConfig+0x12c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cda:	d00f      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a43      	ldr	r2, [pc, #268]	@ (8002dec <TIM_Base_SetConfig+0x130>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a42      	ldr	r2, [pc, #264]	@ (8002df0 <TIM_Base_SetConfig+0x134>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a41      	ldr	r2, [pc, #260]	@ (8002df4 <TIM_Base_SetConfig+0x138>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a40      	ldr	r2, [pc, #256]	@ (8002df8 <TIM_Base_SetConfig+0x13c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a35      	ldr	r2, [pc, #212]	@ (8002de8 <TIM_Base_SetConfig+0x12c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01f      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d1c:	d01b      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a32      	ldr	r2, [pc, #200]	@ (8002dec <TIM_Base_SetConfig+0x130>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d017      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a31      	ldr	r2, [pc, #196]	@ (8002df0 <TIM_Base_SetConfig+0x134>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a30      	ldr	r2, [pc, #192]	@ (8002df4 <TIM_Base_SetConfig+0x138>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00f      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2f      	ldr	r2, [pc, #188]	@ (8002df8 <TIM_Base_SetConfig+0x13c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2e      	ldr	r2, [pc, #184]	@ (8002dfc <TIM_Base_SetConfig+0x140>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2d      	ldr	r2, [pc, #180]	@ (8002e00 <TIM_Base_SetConfig+0x144>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_Base_SetConfig+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2c      	ldr	r2, [pc, #176]	@ (8002e04 <TIM_Base_SetConfig+0x148>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d108      	bne.n	8002d68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <TIM_Base_SetConfig+0x12c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00f      	beq.n	8002db4 <TIM_Base_SetConfig+0xf8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <TIM_Base_SetConfig+0x13c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00b      	beq.n	8002db4 <TIM_Base_SetConfig+0xf8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <TIM_Base_SetConfig+0x140>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <TIM_Base_SetConfig+0xf8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a16      	ldr	r2, [pc, #88]	@ (8002e00 <TIM_Base_SetConfig+0x144>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_Base_SetConfig+0xf8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a15      	ldr	r2, [pc, #84]	@ (8002e04 <TIM_Base_SetConfig+0x148>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d103      	bne.n	8002dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d105      	bne.n	8002dda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f023 0201 	bic.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	611a      	str	r2, [r3, #16]
  }
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40013400 	.word	0x40013400
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40014400 	.word	0x40014400
 8002e04:	40014800 	.word	0x40014800

08002e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e040      	b.n	8002ed8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fd fd1e 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	@ 0x24
 8002e70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fb6a 	bl	8003564 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f8af 	bl	8002ff4 <UART_SetConfig>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e01b      	b.n	8002ed8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fbe9 	bl	80036a8 <UART_CheckIdleState>
 8002ed6:	4603      	mov	r3, r0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	@ 0x28
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d177      	bne.n	8002fe8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_UART_Transmit+0x24>
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e070      	b.n	8002fea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2221      	movs	r2, #33	@ 0x21
 8002f14:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f16:	f7fd fea9 	bl	8000c6c <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f34:	d108      	bne.n	8002f48 <HAL_UART_Transmit+0x68>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d104      	bne.n	8002f48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e003      	b.n	8002f50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f50:	e02f      	b.n	8002fb2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2180      	movs	r1, #128	@ 0x80
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fc4b 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e03b      	b.n	8002fea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	881a      	ldrh	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f84:	b292      	uxth	r2, r2
 8002f86:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e007      	b.n	8002fa0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1c9      	bne.n	8002f52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2140      	movs	r1, #64	@ 0x40
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fc15 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e005      	b.n	8002fea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e000      	b.n	8002fea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b08a      	sub	sp, #40	@ 0x28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	431a      	orrs	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	4313      	orrs	r3, r2
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4ba4      	ldr	r3, [pc, #656]	@ (80032b4 <UART_SetConfig+0x2c0>)
 8003024:	4013      	ands	r3, r2
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800302c:	430b      	orrs	r3, r1
 800302e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a99      	ldr	r2, [pc, #612]	@ (80032b8 <UART_SetConfig+0x2c4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	4313      	orrs	r3, r2
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a90      	ldr	r2, [pc, #576]	@ (80032bc <UART_SetConfig+0x2c8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d126      	bne.n	80030cc <UART_SetConfig+0xd8>
 800307e:	4b90      	ldr	r3, [pc, #576]	@ (80032c0 <UART_SetConfig+0x2cc>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b03      	cmp	r3, #3
 800308a:	d81b      	bhi.n	80030c4 <UART_SetConfig+0xd0>
 800308c:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <UART_SetConfig+0xa0>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030b5 	.word	0x080030b5
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030bd 	.word	0x080030bd
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030aa:	e116      	b.n	80032da <UART_SetConfig+0x2e6>
 80030ac:	2302      	movs	r3, #2
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b2:	e112      	b.n	80032da <UART_SetConfig+0x2e6>
 80030b4:	2304      	movs	r3, #4
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ba:	e10e      	b.n	80032da <UART_SetConfig+0x2e6>
 80030bc:	2308      	movs	r3, #8
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c2:	e10a      	b.n	80032da <UART_SetConfig+0x2e6>
 80030c4:	2310      	movs	r3, #16
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ca:	e106      	b.n	80032da <UART_SetConfig+0x2e6>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a7c      	ldr	r2, [pc, #496]	@ (80032c4 <UART_SetConfig+0x2d0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d138      	bne.n	8003148 <UART_SetConfig+0x154>
 80030d6:	4b7a      	ldr	r3, [pc, #488]	@ (80032c0 <UART_SetConfig+0x2cc>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	d82d      	bhi.n	8003140 <UART_SetConfig+0x14c>
 80030e4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <UART_SetConfig+0xf8>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003141 	.word	0x08003141
 80030f4:	08003141 	.word	0x08003141
 80030f8:	08003141 	.word	0x08003141
 80030fc:	08003131 	.word	0x08003131
 8003100:	08003141 	.word	0x08003141
 8003104:	08003141 	.word	0x08003141
 8003108:	08003141 	.word	0x08003141
 800310c:	08003129 	.word	0x08003129
 8003110:	08003141 	.word	0x08003141
 8003114:	08003141 	.word	0x08003141
 8003118:	08003141 	.word	0x08003141
 800311c:	08003139 	.word	0x08003139
 8003120:	2300      	movs	r3, #0
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003126:	e0d8      	b.n	80032da <UART_SetConfig+0x2e6>
 8003128:	2302      	movs	r3, #2
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312e:	e0d4      	b.n	80032da <UART_SetConfig+0x2e6>
 8003130:	2304      	movs	r3, #4
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003136:	e0d0      	b.n	80032da <UART_SetConfig+0x2e6>
 8003138:	2308      	movs	r3, #8
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313e:	e0cc      	b.n	80032da <UART_SetConfig+0x2e6>
 8003140:	2310      	movs	r3, #16
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003146:	e0c8      	b.n	80032da <UART_SetConfig+0x2e6>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5e      	ldr	r2, [pc, #376]	@ (80032c8 <UART_SetConfig+0x2d4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d125      	bne.n	800319e <UART_SetConfig+0x1aa>
 8003152:	4b5b      	ldr	r3, [pc, #364]	@ (80032c0 <UART_SetConfig+0x2cc>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800315c:	2b30      	cmp	r3, #48	@ 0x30
 800315e:	d016      	beq.n	800318e <UART_SetConfig+0x19a>
 8003160:	2b30      	cmp	r3, #48	@ 0x30
 8003162:	d818      	bhi.n	8003196 <UART_SetConfig+0x1a2>
 8003164:	2b20      	cmp	r3, #32
 8003166:	d00a      	beq.n	800317e <UART_SetConfig+0x18a>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d814      	bhi.n	8003196 <UART_SetConfig+0x1a2>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <UART_SetConfig+0x182>
 8003170:	2b10      	cmp	r3, #16
 8003172:	d008      	beq.n	8003186 <UART_SetConfig+0x192>
 8003174:	e00f      	b.n	8003196 <UART_SetConfig+0x1a2>
 8003176:	2300      	movs	r3, #0
 8003178:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317c:	e0ad      	b.n	80032da <UART_SetConfig+0x2e6>
 800317e:	2302      	movs	r3, #2
 8003180:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003184:	e0a9      	b.n	80032da <UART_SetConfig+0x2e6>
 8003186:	2304      	movs	r3, #4
 8003188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318c:	e0a5      	b.n	80032da <UART_SetConfig+0x2e6>
 800318e:	2308      	movs	r3, #8
 8003190:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003194:	e0a1      	b.n	80032da <UART_SetConfig+0x2e6>
 8003196:	2310      	movs	r3, #16
 8003198:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319c:	e09d      	b.n	80032da <UART_SetConfig+0x2e6>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4a      	ldr	r2, [pc, #296]	@ (80032cc <UART_SetConfig+0x2d8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d125      	bne.n	80031f4 <UART_SetConfig+0x200>
 80031a8:	4b45      	ldr	r3, [pc, #276]	@ (80032c0 <UART_SetConfig+0x2cc>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b4:	d016      	beq.n	80031e4 <UART_SetConfig+0x1f0>
 80031b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b8:	d818      	bhi.n	80031ec <UART_SetConfig+0x1f8>
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d00a      	beq.n	80031d4 <UART_SetConfig+0x1e0>
 80031be:	2b80      	cmp	r3, #128	@ 0x80
 80031c0:	d814      	bhi.n	80031ec <UART_SetConfig+0x1f8>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <UART_SetConfig+0x1d8>
 80031c6:	2b40      	cmp	r3, #64	@ 0x40
 80031c8:	d008      	beq.n	80031dc <UART_SetConfig+0x1e8>
 80031ca:	e00f      	b.n	80031ec <UART_SetConfig+0x1f8>
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d2:	e082      	b.n	80032da <UART_SetConfig+0x2e6>
 80031d4:	2302      	movs	r3, #2
 80031d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031da:	e07e      	b.n	80032da <UART_SetConfig+0x2e6>
 80031dc:	2304      	movs	r3, #4
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e2:	e07a      	b.n	80032da <UART_SetConfig+0x2e6>
 80031e4:	2308      	movs	r3, #8
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ea:	e076      	b.n	80032da <UART_SetConfig+0x2e6>
 80031ec:	2310      	movs	r3, #16
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f2:	e072      	b.n	80032da <UART_SetConfig+0x2e6>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a35      	ldr	r2, [pc, #212]	@ (80032d0 <UART_SetConfig+0x2dc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12a      	bne.n	8003254 <UART_SetConfig+0x260>
 80031fe:	4b30      	ldr	r3, [pc, #192]	@ (80032c0 <UART_SetConfig+0x2cc>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003208:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800320c:	d01a      	beq.n	8003244 <UART_SetConfig+0x250>
 800320e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003212:	d81b      	bhi.n	800324c <UART_SetConfig+0x258>
 8003214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003218:	d00c      	beq.n	8003234 <UART_SetConfig+0x240>
 800321a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800321e:	d815      	bhi.n	800324c <UART_SetConfig+0x258>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <UART_SetConfig+0x238>
 8003224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003228:	d008      	beq.n	800323c <UART_SetConfig+0x248>
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x258>
 800322c:	2300      	movs	r3, #0
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003232:	e052      	b.n	80032da <UART_SetConfig+0x2e6>
 8003234:	2302      	movs	r3, #2
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323a:	e04e      	b.n	80032da <UART_SetConfig+0x2e6>
 800323c:	2304      	movs	r3, #4
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003242:	e04a      	b.n	80032da <UART_SetConfig+0x2e6>
 8003244:	2308      	movs	r3, #8
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324a:	e046      	b.n	80032da <UART_SetConfig+0x2e6>
 800324c:	2310      	movs	r3, #16
 800324e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003252:	e042      	b.n	80032da <UART_SetConfig+0x2e6>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a17      	ldr	r2, [pc, #92]	@ (80032b8 <UART_SetConfig+0x2c4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d13a      	bne.n	80032d4 <UART_SetConfig+0x2e0>
 800325e:	4b18      	ldr	r3, [pc, #96]	@ (80032c0 <UART_SetConfig+0x2cc>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003268:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800326c:	d01a      	beq.n	80032a4 <UART_SetConfig+0x2b0>
 800326e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003272:	d81b      	bhi.n	80032ac <UART_SetConfig+0x2b8>
 8003274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003278:	d00c      	beq.n	8003294 <UART_SetConfig+0x2a0>
 800327a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327e:	d815      	bhi.n	80032ac <UART_SetConfig+0x2b8>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <UART_SetConfig+0x298>
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d008      	beq.n	800329c <UART_SetConfig+0x2a8>
 800328a:	e00f      	b.n	80032ac <UART_SetConfig+0x2b8>
 800328c:	2300      	movs	r3, #0
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003292:	e022      	b.n	80032da <UART_SetConfig+0x2e6>
 8003294:	2302      	movs	r3, #2
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329a:	e01e      	b.n	80032da <UART_SetConfig+0x2e6>
 800329c:	2304      	movs	r3, #4
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a2:	e01a      	b.n	80032da <UART_SetConfig+0x2e6>
 80032a4:	2308      	movs	r3, #8
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032aa:	e016      	b.n	80032da <UART_SetConfig+0x2e6>
 80032ac:	2310      	movs	r3, #16
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b2:	e012      	b.n	80032da <UART_SetConfig+0x2e6>
 80032b4:	efff69f3 	.word	0xefff69f3
 80032b8:	40008000 	.word	0x40008000
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40004400 	.word	0x40004400
 80032c8:	40004800 	.word	0x40004800
 80032cc:	40004c00 	.word	0x40004c00
 80032d0:	40005000 	.word	0x40005000
 80032d4:	2310      	movs	r3, #16
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a9f      	ldr	r2, [pc, #636]	@ (800355c <UART_SetConfig+0x568>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d17a      	bne.n	80033da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d824      	bhi.n	8003336 <UART_SetConfig+0x342>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <UART_SetConfig+0x300>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003319 	.word	0x08003319
 80032f8:	08003337 	.word	0x08003337
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003337 	.word	0x08003337
 8003304:	08003327 	.word	0x08003327
 8003308:	08003337 	.word	0x08003337
 800330c:	08003337 	.word	0x08003337
 8003310:	08003337 	.word	0x08003337
 8003314:	0800332f 	.word	0x0800332f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003318:	f7fe fd54 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 800331c:	61f8      	str	r0, [r7, #28]
        break;
 800331e:	e010      	b.n	8003342 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003320:	4b8f      	ldr	r3, [pc, #572]	@ (8003560 <UART_SetConfig+0x56c>)
 8003322:	61fb      	str	r3, [r7, #28]
        break;
 8003324:	e00d      	b.n	8003342 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003326:	f7fe fcb5 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 800332a:	61f8      	str	r0, [r7, #28]
        break;
 800332c:	e009      	b.n	8003342 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003332:	61fb      	str	r3, [r7, #28]
        break;
 8003334:	e005      	b.n	8003342 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80fb 	beq.w	8003540 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	429a      	cmp	r2, r3
 8003358:	d305      	bcc.n	8003366 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	429a      	cmp	r2, r3
 8003364:	d903      	bls.n	800336e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800336c:	e0e8      	b.n	8003540 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	2200      	movs	r2, #0
 8003372:	461c      	mov	r4, r3
 8003374:	4615      	mov	r5, r2
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	022b      	lsls	r3, r5, #8
 8003380:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003384:	0222      	lsls	r2, r4, #8
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	6849      	ldr	r1, [r1, #4]
 800338a:	0849      	lsrs	r1, r1, #1
 800338c:	2000      	movs	r0, #0
 800338e:	4688      	mov	r8, r1
 8003390:	4681      	mov	r9, r0
 8003392:	eb12 0a08 	adds.w	sl, r2, r8
 8003396:	eb43 0b09 	adc.w	fp, r3, r9
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a8:	4650      	mov	r0, sl
 80033aa:	4659      	mov	r1, fp
 80033ac:	f7fc ff68 	bl	8000280 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033be:	d308      	bcc.n	80033d2 <UART_SetConfig+0x3de>
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c6:	d204      	bcs.n	80033d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	e0b6      	b.n	8003540 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033d8:	e0b2      	b.n	8003540 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033e2:	d15e      	bne.n	80034a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80033e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d828      	bhi.n	800343e <UART_SetConfig+0x44a>
 80033ec:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <UART_SetConfig+0x400>)
 80033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f2:	bf00      	nop
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003421 	.word	0x08003421
 80033fc:	08003429 	.word	0x08003429
 8003400:	0800343f 	.word	0x0800343f
 8003404:	0800342f 	.word	0x0800342f
 8003408:	0800343f 	.word	0x0800343f
 800340c:	0800343f 	.word	0x0800343f
 8003410:	0800343f 	.word	0x0800343f
 8003414:	08003437 	.word	0x08003437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003418:	f7fe fcd4 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 800341c:	61f8      	str	r0, [r7, #28]
        break;
 800341e:	e014      	b.n	800344a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7fe fce6 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8003424:	61f8      	str	r0, [r7, #28]
        break;
 8003426:	e010      	b.n	800344a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003428:	4b4d      	ldr	r3, [pc, #308]	@ (8003560 <UART_SetConfig+0x56c>)
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e00d      	b.n	800344a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342e:	f7fe fc31 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8003432:	61f8      	str	r0, [r7, #28]
        break;
 8003434:	e009      	b.n	800344a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800343a:	61fb      	str	r3, [r7, #28]
        break;
 800343c:	e005      	b.n	800344a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d077      	beq.n	8003540 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005a      	lsls	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	441a      	add	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0f      	cmp	r3, #15
 800346a:	d916      	bls.n	800349a <UART_SetConfig+0x4a6>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003472:	d212      	bcs.n	800349a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f023 030f 	bic.w	r3, r3, #15
 800347c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	b29b      	uxth	r3, r3
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	b29a      	uxth	r2, r3
 800348a:	8afb      	ldrh	r3, [r7, #22]
 800348c:	4313      	orrs	r3, r2
 800348e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	8afa      	ldrh	r2, [r7, #22]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e052      	b.n	8003540 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034a0:	e04e      	b.n	8003540 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d827      	bhi.n	80034fa <UART_SetConfig+0x506>
 80034aa:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <UART_SetConfig+0x4bc>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080034fb 	.word	0x080034fb
 80034c0:	080034eb 	.word	0x080034eb
 80034c4:	080034fb 	.word	0x080034fb
 80034c8:	080034fb 	.word	0x080034fb
 80034cc:	080034fb 	.word	0x080034fb
 80034d0:	080034f3 	.word	0x080034f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d4:	f7fe fc76 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 80034d8:	61f8      	str	r0, [r7, #28]
        break;
 80034da:	e014      	b.n	8003506 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034dc:	f7fe fc88 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 80034e0:	61f8      	str	r0, [r7, #28]
        break;
 80034e2:	e010      	b.n	8003506 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003560 <UART_SetConfig+0x56c>)
 80034e6:	61fb      	str	r3, [r7, #28]
        break;
 80034e8:	e00d      	b.n	8003506 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ea:	f7fe fbd3 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 80034ee:	61f8      	str	r0, [r7, #28]
        break;
 80034f0:	e009      	b.n	8003506 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034f6:	61fb      	str	r3, [r7, #28]
        break;
 80034f8:	e005      	b.n	8003506 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003504:	bf00      	nop
    }

    if (pclk != 0U)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d019      	beq.n	8003540 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	085a      	lsrs	r2, r3, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	441a      	add	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d909      	bls.n	800353a <UART_SetConfig+0x546>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d205      	bcs.n	800353a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e002      	b.n	8003540 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800354c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	@ 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	40008000 	.word	0x40008000
 8003560:	00f42400 	.word	0x00f42400

08003564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01a      	beq.n	800367a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003662:	d10a      	bne.n	800367a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b098      	sub	sp, #96	@ 0x60
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036b8:	f7fd fad8 	bl	8000c6c <HAL_GetTick>
 80036bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d12e      	bne.n	800372a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d4:	2200      	movs	r2, #0
 80036d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f88c 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d021      	beq.n	800372a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003704:	647b      	str	r3, [r7, #68]	@ 0x44
 8003706:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800370a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e6      	bne.n	80036e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e062      	b.n	80037f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d149      	bne.n	80037cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003738:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003740:	2200      	movs	r2, #0
 8003742:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f856 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d03c      	beq.n	80037cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	623b      	str	r3, [r7, #32]
   return(result);
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003770:	633b      	str	r3, [r7, #48]	@ 0x30
 8003772:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800377e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e6      	bne.n	8003752 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	60fb      	str	r3, [r7, #12]
   return(result);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3308      	adds	r3, #8
 80037a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a4:	61fa      	str	r2, [r7, #28]
 80037a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	69b9      	ldr	r1, [r7, #24]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	617b      	str	r3, [r7, #20]
   return(result);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e011      	b.n	80037f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3758      	adds	r7, #88	@ 0x58
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003808:	e04f      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d04b      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7fd fa2b 	bl	8000c6c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <UART_WaitOnFlagUntilTimeout+0x30>
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e04e      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d037      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b80      	cmp	r3, #128	@ 0x80
 800383e:	d034      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d031      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b08      	cmp	r3, #8
 8003852:	d110      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2208      	movs	r2, #8
 800385a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f838 	bl	80038d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2208      	movs	r2, #8
 8003866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e029      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003884:	d111      	bne.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800388e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f81e 	bl	80038d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e00f      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d0a0      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b095      	sub	sp, #84	@ 0x54
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e6      	bne.n	80038da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	61fb      	str	r3, [r7, #28]
   return(result);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800392c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800392e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e5      	bne.n	800390c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003944:	2b01      	cmp	r3, #1
 8003946:	d118      	bne.n	800397a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	60bb      	str	r3, [r7, #8]
   return(result);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f023 0310 	bic.w	r3, r3, #16
 800395c:	647b      	str	r3, [r7, #68]	@ 0x44
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6979      	ldr	r1, [r7, #20]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	613b      	str	r3, [r7, #16]
   return(result);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e6      	bne.n	8003948 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800398e:	bf00      	nop
 8003990:	3754      	adds	r7, #84	@ 0x54
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <__NVIC_SetPriority>:
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	@ (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	@ (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80039f4:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <SysTick_Handler+0x1c>)
 80039f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039f8:	f001 fd46 	bl	8005488 <xTaskGetSchedulerState>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a02:	f002 fb41 	bl	8006088 <xPortSysTickHandler>
  }
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	e000e010 	.word	0xe000e010

08003a10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a14:	2100      	movs	r1, #0
 8003a16:	f06f 0004 	mvn.w	r0, #4
 8003a1a:	f7ff ffbf 	bl	800399c <__NVIC_SetPriority>
#endif
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a2a:	f3ef 8305 	mrs	r3, IPSR
 8003a2e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a36:	f06f 0305 	mvn.w	r3, #5
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	e00c      	b.n	8003a58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <osKernelInitialize+0x44>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a46:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <osKernelInitialize+0x44>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	e002      	b.n	8003a58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a58:	687b      	ldr	r3, [r7, #4]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000660 	.word	0x20000660

08003a6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a72:	f3ef 8305 	mrs	r3, IPSR
 8003a76:	603b      	str	r3, [r7, #0]
  return(result);
 8003a78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a7e:	f06f 0305 	mvn.w	r3, #5
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	e010      	b.n	8003aa8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a86:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <osKernelStart+0x48>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d109      	bne.n	8003aa2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a8e:	f7ff ffbf 	bl	8003a10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a92:	4b08      	ldr	r3, [pc, #32]	@ (8003ab4 <osKernelStart+0x48>)
 8003a94:	2202      	movs	r2, #2
 8003a96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a98:	f001 f892 	bl	8004bc0 <vTaskStartScheduler>
      stat = osOK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	e002      	b.n	8003aa8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003aa8:	687b      	ldr	r3, [r7, #4]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000660 	.word	0x20000660

08003ab8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08e      	sub	sp, #56	@ 0x38
 8003abc:	af04      	add	r7, sp, #16
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ac8:	f3ef 8305 	mrs	r3, IPSR
 8003acc:	617b      	str	r3, [r7, #20]
  return(result);
 8003ace:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d17e      	bne.n	8003bd2 <osThreadNew+0x11a>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d07b      	beq.n	8003bd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ada:	2380      	movs	r3, #128	@ 0x80
 8003adc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ade:	2318      	movs	r3, #24
 8003ae0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d045      	beq.n	8003b7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <osThreadNew+0x48>
        name = attr->name;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <osThreadNew+0x6e>
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b38      	cmp	r3, #56	@ 0x38
 8003b18:	d805      	bhi.n	8003b26 <osThreadNew+0x6e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <osThreadNew+0x72>
        return (NULL);
 8003b26:	2300      	movs	r3, #0
 8003b28:	e054      	b.n	8003bd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00e      	beq.n	8003b60 <osThreadNew+0xa8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2ba7      	cmp	r3, #167	@ 0xa7
 8003b48:	d90a      	bls.n	8003b60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <osThreadNew+0xa8>
        mem = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e010      	b.n	8003b82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10c      	bne.n	8003b82 <osThreadNew+0xca>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d108      	bne.n	8003b82 <osThreadNew+0xca>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <osThreadNew+0xca>
          mem = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e001      	b.n	8003b82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d110      	bne.n	8003baa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b90:	9202      	str	r2, [sp, #8]
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fe1a 	bl	80047d8 <xTaskCreateStatic>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	e013      	b.n	8003bd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d110      	bne.n	8003bd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	f107 0310 	add.w	r3, r7, #16
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fe68 	bl	8004898 <xTaskCreate>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <osThreadNew+0x11a>
            hTask = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bd2:	693b      	ldr	r3, [r7, #16]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3728      	adds	r7, #40	@ 0x28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003be4:	f3ef 8305 	mrs	r3, IPSR
 8003be8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <osDelay+0x1c>
    stat = osErrorISR;
 8003bf0:	f06f 0305 	mvn.w	r3, #5
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	e007      	b.n	8003c08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 ffa6 	bl	8004b54 <vTaskDelay>
    }
  }

  return (stat);
 8003c08:	68fb      	ldr	r3, [r7, #12]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a07      	ldr	r2, [pc, #28]	@ (8003c40 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a06      	ldr	r2, [pc, #24]	@ (8003c44 <vApplicationGetIdleTaskMemory+0x30>)
 8003c2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2280      	movs	r2, #128	@ 0x80
 8003c30:	601a      	str	r2, [r3, #0]
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000664 	.word	0x20000664
 8003c44:	2000070c 	.word	0x2000070c

08003c48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a07      	ldr	r2, [pc, #28]	@ (8003c74 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4a06      	ldr	r2, [pc, #24]	@ (8003c78 <vApplicationGetTimerTaskMemory+0x30>)
 8003c5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c66:	601a      	str	r2, [r3, #0]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	2000090c 	.word	0x2000090c
 8003c78:	200009b4 	.word	0x200009b4

08003c7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f103 0208 	add.w	r2, r3, #8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f04f 32ff 	mov.w	r2, #4294967295
 8003c94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f103 0208 	add.w	r2, r3, #8
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f103 0208 	add.w	r2, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d103      	bne.n	8003d3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e00c      	b.n	8003d58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3308      	adds	r3, #8
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e002      	b.n	8003d4c <vListInsert+0x2e>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d2f6      	bcs.n	8003d46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	601a      	str	r2, [r3, #0]
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6892      	ldr	r2, [r2, #8]
 8003da6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6852      	ldr	r2, [r2, #4]
 8003db0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d103      	bne.n	8003dc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	1e5a      	subs	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10b      	bne.n	8003e10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
 8003e0e:	e7fd      	b.n	8003e0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e10:	f002 f8aa 	bl	8005f68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1c:	68f9      	ldr	r1, [r7, #12]
 8003e1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	441a      	add	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e40:	3b01      	subs	r3, #1
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	22ff      	movs	r2, #255	@ 0xff
 8003e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	22ff      	movs	r2, #255	@ 0xff
 8003e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d114      	bne.n	8003e90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01a      	beq.n	8003ea4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3310      	adds	r3, #16
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 f942 	bl	80050fc <xTaskRemoveFromEventList>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d012      	beq.n	8003ea4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb4 <xQueueGenericReset+0xd0>)
 8003e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	e009      	b.n	8003ea4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3310      	adds	r3, #16
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fef1 	bl	8003c7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3324      	adds	r3, #36	@ 0x24
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff feec 	bl	8003c7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ea4:	f002 f892 	bl	8005fcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ea8:	2301      	movs	r3, #1
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	@ 0x38
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003ede:	bf00      	nop
 8003ee0:	bf00      	nop
 8003ee2:	e7fd      	b.n	8003ee0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	e7fd      	b.n	8003efe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <xQueueGenericCreateStatic+0x56>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <xQueueGenericCreateStatic+0x5a>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <xQueueGenericCreateStatic+0x5c>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	623b      	str	r3, [r7, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <xQueueGenericCreateStatic+0x84>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <xQueueGenericCreateStatic+0x88>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <xQueueGenericCreateStatic+0x8a>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10b      	bne.n	8003f5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	61fb      	str	r3, [r7, #28]
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	e7fd      	b.n	8003f5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f5e:	2350      	movs	r3, #80	@ 0x50
 8003f60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b50      	cmp	r3, #80	@ 0x50
 8003f66:	d00b      	beq.n	8003f80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	61bb      	str	r3, [r7, #24]
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f805 	bl	8003fb2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3730      	adds	r7, #48	@ 0x30
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e002      	b.n	8003fd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	69b8      	ldr	r0, [r7, #24]
 8003fe4:	f7ff fefe 	bl	8003de4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08e      	sub	sp, #56	@ 0x38
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004006:	2300      	movs	r3, #0
 8004008:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <xQueueGenericSend+0x34>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <xQueueGenericSend+0x42>
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <xQueueGenericSend+0x46>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <xQueueGenericSend+0x48>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <xQueueGenericSend+0x64>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d103      	bne.n	800406a <xQueueGenericSend+0x72>
 8004062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <xQueueGenericSend+0x76>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <xQueueGenericSend+0x78>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <xQueueGenericSend+0x94>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	623b      	str	r3, [r7, #32]
}
 8004086:	bf00      	nop
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800408c:	f001 f9fc 	bl	8005488 <xTaskGetSchedulerState>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <xQueueGenericSend+0xa4>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <xQueueGenericSend+0xa8>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <xQueueGenericSend+0xaa>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <xQueueGenericSend+0xc6>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	61fb      	str	r3, [r7, #28]
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	e7fd      	b.n	80040ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040be:	f001 ff53 	bl	8005f68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d302      	bcc.n	80040d4 <xQueueGenericSend+0xdc>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d129      	bne.n	8004128 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040da:	f000 fa0f 	bl	80044fc <prvCopyDataToQueue>
 80040de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	3324      	adds	r3, #36	@ 0x24
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 f805 	bl	80050fc <xTaskRemoveFromEventList>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040f8:	4b3f      	ldr	r3, [pc, #252]	@ (80041f8 <xQueueGenericSend+0x200>)
 80040fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	e00a      	b.n	8004120 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800410a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004110:	4b39      	ldr	r3, [pc, #228]	@ (80041f8 <xQueueGenericSend+0x200>)
 8004112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004120:	f001 ff54 	bl	8005fcc <vPortExitCritical>
				return pdPASS;
 8004124:	2301      	movs	r3, #1
 8004126:	e063      	b.n	80041f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d103      	bne.n	8004136 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800412e:	f001 ff4d 	bl	8005fcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004132:	2300      	movs	r3, #0
 8004134:	e05c      	b.n	80041f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	4618      	mov	r0, r3
 8004142:	f001 f83f 	bl	80051c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004146:	2301      	movs	r3, #1
 8004148:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800414a:	f001 ff3f 	bl	8005fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800414e:	f000 fda7 	bl	8004ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004152:	f001 ff09 	bl	8005f68 <vPortEnterCritical>
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800415c:	b25b      	sxtb	r3, r3
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d103      	bne.n	800416c <xQueueGenericSend+0x174>
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800416c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004172:	b25b      	sxtb	r3, r3
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d103      	bne.n	8004182 <xQueueGenericSend+0x18a>
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004182:	f001 ff23 	bl	8005fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004186:	1d3a      	adds	r2, r7, #4
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4611      	mov	r1, r2
 800418e:	4618      	mov	r0, r3
 8004190:	f001 f82e 	bl	80051f0 <xTaskCheckForTimeOut>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d124      	bne.n	80041e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800419a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800419c:	f000 faa6 	bl	80046ec <prvIsQueueFull>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d018      	beq.n	80041d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	3310      	adds	r3, #16
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 ff52 	bl	8005058 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041b6:	f000 fa31 	bl	800461c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041ba:	f000 fd7f 	bl	8004cbc <xTaskResumeAll>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f47f af7c 	bne.w	80040be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80041c6:	4b0c      	ldr	r3, [pc, #48]	@ (80041f8 <xQueueGenericSend+0x200>)
 80041c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	e772      	b.n	80040be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041da:	f000 fa1f 	bl	800461c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041de:	f000 fd6d 	bl	8004cbc <xTaskResumeAll>
 80041e2:	e76c      	b.n	80040be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041e6:	f000 fa19 	bl	800461c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041ea:	f000 fd67 	bl	8004cbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3738      	adds	r7, #56	@ 0x38
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b090      	sub	sp, #64	@ 0x40
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	e7fd      	b.n	8004228 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <xQueueGenericSendFromISR+0x3e>
 8004232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <xQueueGenericSendFromISR+0x42>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <xQueueGenericSendFromISR+0x44>
 800423e:	2300      	movs	r3, #0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d103      	bne.n	800426a <xQueueGenericSendFromISR+0x6e>
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <xQueueGenericSendFromISR+0x72>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <xQueueGenericSendFromISR+0x74>
 800426e:	2300      	movs	r3, #0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	623b      	str	r3, [r7, #32]
}
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800428c:	f001 ff4c 	bl	8006128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004290:	f3ef 8211 	mrs	r2, BASEPRI
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	61fa      	str	r2, [r7, #28]
 80042a6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042aa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d302      	bcc.n	80042be <xQueueGenericSendFromISR+0xc2>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d12f      	bne.n	800431e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80042d4:	f000 f912 	bl	80044fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d112      	bne.n	8004308 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	3324      	adds	r3, #36	@ 0x24
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 ff04 	bl	80050fc <xTaskRemoveFromEventList>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00e      	beq.n	8004318 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e007      	b.n	8004318 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004308:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800430c:	3301      	adds	r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	b25a      	sxtb	r2, r3
 8004312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004318:	2301      	movs	r3, #1
 800431a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800431c:	e001      	b.n	8004322 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800431e:	2300      	movs	r3, #0
 8004320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004324:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800432c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800432e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004330:	4618      	mov	r0, r3
 8004332:	3740      	adds	r7, #64	@ 0x40
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08c      	sub	sp, #48	@ 0x30
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004344:	2300      	movs	r3, #0
 8004346:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800434c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <xQueueReceive+0x32>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	623b      	str	r3, [r7, #32]
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	e7fd      	b.n	8004366 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <xQueueReceive+0x40>
 8004370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <xQueueReceive+0x44>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <xQueueReceive+0x46>
 800437c:	2300      	movs	r3, #0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10b      	bne.n	800439a <xQueueReceive+0x62>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	61fb      	str	r3, [r7, #28]
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800439a:	f001 f875 	bl	8005488 <xTaskGetSchedulerState>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <xQueueReceive+0x72>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <xQueueReceive+0x76>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <xQueueReceive+0x78>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10b      	bne.n	80043cc <xQueueReceive+0x94>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	61bb      	str	r3, [r7, #24]
}
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	e7fd      	b.n	80043c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043cc:	f001 fdcc 	bl	8005f68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01f      	beq.n	800441c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043e0:	f000 f8f6 	bl	80045d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	1e5a      	subs	r2, r3, #1
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00f      	beq.n	8004414 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f6:	3310      	adds	r3, #16
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fe7f 	bl	80050fc <xTaskRemoveFromEventList>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004404:	4b3c      	ldr	r3, [pc, #240]	@ (80044f8 <xQueueReceive+0x1c0>)
 8004406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004414:	f001 fdda 	bl	8005fcc <vPortExitCritical>
				return pdPASS;
 8004418:	2301      	movs	r3, #1
 800441a:	e069      	b.n	80044f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004422:	f001 fdd3 	bl	8005fcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004426:	2300      	movs	r3, #0
 8004428:	e062      	b.n	80044f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004430:	f107 0310 	add.w	r3, r7, #16
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fec5 	bl	80051c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800443a:	2301      	movs	r3, #1
 800443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800443e:	f001 fdc5 	bl	8005fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004442:	f000 fc2d 	bl	8004ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004446:	f001 fd8f 	bl	8005f68 <vPortEnterCritical>
 800444a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004450:	b25b      	sxtb	r3, r3
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d103      	bne.n	8004460 <xQueueReceive+0x128>
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004462:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004466:	b25b      	sxtb	r3, r3
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d103      	bne.n	8004476 <xQueueReceive+0x13e>
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004476:	f001 fda9 	bl	8005fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800447a:	1d3a      	adds	r2, r7, #4
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f000 feb4 	bl	80051f0 <xTaskCheckForTimeOut>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d123      	bne.n	80044d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800448e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004490:	f000 f916 	bl	80046c0 <prvIsQueueEmpty>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d017      	beq.n	80044ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800449a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449c:	3324      	adds	r3, #36	@ 0x24
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fdd8 	bl	8005058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044aa:	f000 f8b7 	bl	800461c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044ae:	f000 fc05 	bl	8004cbc <xTaskResumeAll>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d189      	bne.n	80043cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80044b8:	4b0f      	ldr	r3, [pc, #60]	@ (80044f8 <xQueueReceive+0x1c0>)
 80044ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	e780      	b.n	80043cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044cc:	f000 f8a6 	bl	800461c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044d0:	f000 fbf4 	bl	8004cbc <xTaskResumeAll>
 80044d4:	e77a      	b.n	80043cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044d8:	f000 f8a0 	bl	800461c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044dc:	f000 fbee 	bl	8004cbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044e2:	f000 f8ed 	bl	80046c0 <prvIsQueueEmpty>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f43f af6f 	beq.w	80043cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3730      	adds	r7, #48	@ 0x30
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d14d      	bne.n	80045be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 ffcc 	bl	80054c4 <xTaskPriorityDisinherit>
 800452c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	e043      	b.n	80045be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d119      	bne.n	8004570 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6858      	ldr	r0, [r3, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	461a      	mov	r2, r3
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	f002 f8fc 	bl	8006744 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004554:	441a      	add	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	429a      	cmp	r2, r3
 8004564:	d32b      	bcc.n	80045be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	e026      	b.n	80045be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68d8      	ldr	r0, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	461a      	mov	r2, r3
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	f002 f8e2 	bl	8006744 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	425b      	negs	r3, r3
 800458a:	441a      	add	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d207      	bcs.n	80045ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	425b      	negs	r3, r3
 80045a6:	441a      	add	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d105      	bne.n	80045be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80045c6:	697b      	ldr	r3, [r7, #20]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d018      	beq.n	8004614 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	441a      	add	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d303      	bcc.n	8004604 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68d9      	ldr	r1, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	461a      	mov	r2, r3
 800460e:	6838      	ldr	r0, [r7, #0]
 8004610:	f002 f898 	bl	8006744 <memcpy>
	}
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004624:	f001 fca0 	bl	8005f68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800462e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004630:	e011      	b.n	8004656 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	d012      	beq.n	8004660 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3324      	adds	r3, #36	@ 0x24
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fd5c 	bl	80050fc <xTaskRemoveFromEventList>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800464a:	f000 fe35 	bl	80052b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	3b01      	subs	r3, #1
 8004652:	b2db      	uxtb	r3, r3
 8004654:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	dce9      	bgt.n	8004632 <prvUnlockQueue+0x16>
 800465e:	e000      	b.n	8004662 <prvUnlockQueue+0x46>
					break;
 8004660:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	22ff      	movs	r2, #255	@ 0xff
 8004666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800466a:	f001 fcaf 	bl	8005fcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800466e:	f001 fc7b 	bl	8005f68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004678:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800467a:	e011      	b.n	80046a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d012      	beq.n	80046aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3310      	adds	r3, #16
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fd37 	bl	80050fc <xTaskRemoveFromEventList>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004694:	f000 fe10 	bl	80052b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	3b01      	subs	r3, #1
 800469c:	b2db      	uxtb	r3, r3
 800469e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	dce9      	bgt.n	800467c <prvUnlockQueue+0x60>
 80046a8:	e000      	b.n	80046ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	22ff      	movs	r2, #255	@ 0xff
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80046b4:	f001 fc8a 	bl	8005fcc <vPortExitCritical>
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046c8:	f001 fc4e 	bl	8005f68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e001      	b.n	80046de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046de:	f001 fc75 	bl	8005fcc <vPortExitCritical>

	return xReturn;
 80046e2:	68fb      	ldr	r3, [r7, #12]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046f4:	f001 fc38 	bl	8005f68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	429a      	cmp	r2, r3
 8004702:	d102      	bne.n	800470a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004704:	2301      	movs	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e001      	b.n	800470e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800470e:	f001 fc5d 	bl	8005fcc <vPortExitCritical>

	return xReturn;
 8004712:	68fb      	ldr	r3, [r7, #12]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e014      	b.n	8004756 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800472c:	4a0f      	ldr	r2, [pc, #60]	@ (800476c <vQueueAddToRegistry+0x50>)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004738:	490c      	ldr	r1, [pc, #48]	@ (800476c <vQueueAddToRegistry+0x50>)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004742:	4a0a      	ldr	r2, [pc, #40]	@ (800476c <vQueueAddToRegistry+0x50>)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800474e:	e006      	b.n	800475e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b07      	cmp	r3, #7
 800475a:	d9e7      	bls.n	800472c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000db4 	.word	0x20000db4

08004770 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004780:	f001 fbf2 	bl	8005f68 <vPortEnterCritical>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800478a:	b25b      	sxtb	r3, r3
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d103      	bne.n	800479a <vQueueWaitForMessageRestricted+0x2a>
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d103      	bne.n	80047b0 <vQueueWaitForMessageRestricted+0x40>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047b0:	f001 fc0c 	bl	8005fcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	3324      	adds	r3, #36	@ 0x24
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fc6d 	bl	80050a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047ca:	6978      	ldr	r0, [r7, #20]
 80047cc:	f7ff ff26 	bl	800461c <prvUnlockQueue>
	}
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08e      	sub	sp, #56	@ 0x38
 80047dc:	af04      	add	r7, sp, #16
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <xTaskCreateStatic+0x2c>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	623b      	str	r3, [r7, #32]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10b      	bne.n	8004822 <xTaskCreateStatic+0x4a>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	61fb      	str	r3, [r7, #28]
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	e7fd      	b.n	800481e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004822:	23a8      	movs	r3, #168	@ 0xa8
 8004824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2ba8      	cmp	r3, #168	@ 0xa8
 800482a:	d00b      	beq.n	8004844 <xTaskCreateStatic+0x6c>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	61bb      	str	r3, [r7, #24]
}
 800483e:	bf00      	nop
 8004840:	bf00      	nop
 8004842:	e7fd      	b.n	8004840 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004844:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01e      	beq.n	800488a <xTaskCreateStatic+0xb2>
 800484c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01b      	beq.n	800488a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800485a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	2202      	movs	r2, #2
 8004860:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004864:	2300      	movs	r3, #0
 8004866:	9303      	str	r3, [sp, #12]
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	9302      	str	r3, [sp, #8]
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f851 	bl	8004924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004882:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004884:	f000 f8f6 	bl	8004a74 <prvAddNewTaskToReadyList>
 8004888:	e001      	b.n	800488e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800488e:	697b      	ldr	r3, [r7, #20]
	}
 8004890:	4618      	mov	r0, r3
 8004892:	3728      	adds	r7, #40	@ 0x28
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08c      	sub	sp, #48	@ 0x30
 800489c:	af04      	add	r7, sp, #16
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fc7d 	bl	80061ac <pvPortMalloc>
 80048b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00e      	beq.n	80048d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048ba:	20a8      	movs	r0, #168	@ 0xa8
 80048bc:	f001 fc76 	bl	80061ac <pvPortMalloc>
 80048c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80048ce:	e005      	b.n	80048dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048d0:	6978      	ldr	r0, [r7, #20]
 80048d2:	f001 fd39 	bl	8006348 <vPortFree>
 80048d6:	e001      	b.n	80048dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d017      	beq.n	8004912 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	2300      	movs	r3, #0
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	9302      	str	r3, [sp, #8]
 80048f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f80f 	bl	8004924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004906:	69f8      	ldr	r0, [r7, #28]
 8004908:	f000 f8b4 	bl	8004a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800490c:	2301      	movs	r3, #1
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	e002      	b.n	8004918 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295
 8004916:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004918:	69bb      	ldr	r3, [r7, #24]
	}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	461a      	mov	r2, r3
 800493c:	21a5      	movs	r1, #165	@ 0xa5
 800493e:	f001 fe77 	bl	8006630 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800494c:	3b01      	subs	r3, #1
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f023 0307 	bic.w	r3, r3, #7
 800495a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00b      	beq.n	800497e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	617b      	str	r3, [r7, #20]
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	e7fd      	b.n	800497a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01f      	beq.n	80049c4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004984:	2300      	movs	r3, #0
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e012      	b.n	80049b0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	7819      	ldrb	r1, [r3, #0]
 8004992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	4413      	add	r3, r2
 8004998:	3334      	adds	r3, #52	@ 0x34
 800499a:	460a      	mov	r2, r1
 800499c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d006      	beq.n	80049b8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b0f      	cmp	r3, #15
 80049b4:	d9e9      	bls.n	800498a <prvInitialiseNewTask+0x66>
 80049b6:	e000      	b.n	80049ba <prvInitialiseNewTask+0x96>
			{
				break;
 80049b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049c2:	e003      	b.n	80049cc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	2b37      	cmp	r3, #55	@ 0x37
 80049d0:	d901      	bls.n	80049d6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049d2:	2337      	movs	r3, #55	@ 0x37
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049da:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049e0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	2200      	movs	r2, #0
 80049e6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	3304      	adds	r3, #4
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff f965 	bl	8003cbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	3318      	adds	r3, #24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff f960 	bl	8003cbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a10:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	3354      	adds	r3, #84	@ 0x54
 8004a26:	224c      	movs	r2, #76	@ 0x4c
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 fe00 	bl	8006630 <memset>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	4a0d      	ldr	r2, [pc, #52]	@ (8004a68 <prvInitialiseNewTask+0x144>)
 8004a34:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a38:	4a0c      	ldr	r2, [pc, #48]	@ (8004a6c <prvInitialiseNewTask+0x148>)
 8004a3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a70 <prvInitialiseNewTask+0x14c>)
 8004a40:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	68f9      	ldr	r1, [r7, #12]
 8004a46:	69b8      	ldr	r0, [r7, #24]
 8004a48:	f001 f95a 	bl	8005d00 <pxPortInitialiseStack>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a5e:	bf00      	nop
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20002000 	.word	0x20002000
 8004a6c:	20002068 	.word	0x20002068
 8004a70:	200020d0 	.word	0x200020d0

08004a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a7c:	f001 fa74 	bl	8005f68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a80:	4b2d      	ldr	r3, [pc, #180]	@ (8004b38 <prvAddNewTaskToReadyList+0xc4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3301      	adds	r3, #1
 8004a86:	4a2c      	ldr	r2, [pc, #176]	@ (8004b38 <prvAddNewTaskToReadyList+0xc4>)
 8004a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a92:	4a2a      	ldr	r2, [pc, #168]	@ (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a98:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <prvAddNewTaskToReadyList+0xc4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d110      	bne.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004aa0:	f000 fc2e 	bl	8005300 <prvInitialiseTaskLists>
 8004aa4:	e00d      	b.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004aa6:	4b26      	ldr	r3, [pc, #152]	@ (8004b40 <prvAddNewTaskToReadyList+0xcc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aae:	4b23      	ldr	r3, [pc, #140]	@ (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d802      	bhi.n	8004ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004abc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ac2:	4b20      	ldr	r3, [pc, #128]	@ (8004b44 <prvAddNewTaskToReadyList+0xd0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b44 <prvAddNewTaskToReadyList+0xd0>)
 8004aca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004acc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b44 <prvAddNewTaskToReadyList+0xd0>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b48 <prvAddNewTaskToReadyList+0xd4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d903      	bls.n	8004ae8 <prvAddNewTaskToReadyList+0x74>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae4:	4a18      	ldr	r2, [pc, #96]	@ (8004b48 <prvAddNewTaskToReadyList+0xd4>)
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4a15      	ldr	r2, [pc, #84]	@ (8004b4c <prvAddNewTaskToReadyList+0xd8>)
 8004af6:	441a      	add	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f7ff f8e9 	bl	8003cd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b04:	f001 fa62 	bl	8005fcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b08:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <prvAddNewTaskToReadyList+0xcc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b10:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <prvAddNewTaskToReadyList+0xc8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d207      	bcs.n	8004b2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b50 <prvAddNewTaskToReadyList+0xdc>)
 8004b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	200012c8 	.word	0x200012c8
 8004b3c:	20000df4 	.word	0x20000df4
 8004b40:	200012d4 	.word	0x200012d4
 8004b44:	200012e4 	.word	0x200012e4
 8004b48:	200012d0 	.word	0x200012d0
 8004b4c:	20000df8 	.word	0x20000df8
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b66:	4b14      	ldr	r3, [pc, #80]	@ (8004bb8 <vTaskDelay+0x64>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <vTaskDelay+0x32>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60bb      	str	r3, [r7, #8]
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b86:	f000 f88b 	bl	8004ca0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fd09 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b92:	f000 f893 	bl	8004cbc <xTaskResumeAll>
 8004b96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d107      	bne.n	8004bae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b9e:	4b07      	ldr	r3, [pc, #28]	@ (8004bbc <vTaskDelay+0x68>)
 8004ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	200012f0 	.word	0x200012f0
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	@ 0x28
 8004bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bce:	463a      	mov	r2, r7
 8004bd0:	1d39      	adds	r1, r7, #4
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f81c 	bl	8003c14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bdc:	6839      	ldr	r1, [r7, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	9202      	str	r2, [sp, #8]
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	2300      	movs	r3, #0
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	2300      	movs	r3, #0
 8004bec:	460a      	mov	r2, r1
 8004bee:	4924      	ldr	r1, [pc, #144]	@ (8004c80 <vTaskStartScheduler+0xc0>)
 8004bf0:	4824      	ldr	r0, [pc, #144]	@ (8004c84 <vTaskStartScheduler+0xc4>)
 8004bf2:	f7ff fdf1 	bl	80047d8 <xTaskCreateStatic>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4a23      	ldr	r2, [pc, #140]	@ (8004c88 <vTaskStartScheduler+0xc8>)
 8004bfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bfc:	4b22      	ldr	r3, [pc, #136]	@ (8004c88 <vTaskStartScheduler+0xc8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c04:	2301      	movs	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	e001      	b.n	8004c0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d102      	bne.n	8004c1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c14:	f000 fd1a 	bl	800564c <xTimerCreateTimerTask>
 8004c18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d11b      	bne.n	8004c58 <vTaskStartScheduler+0x98>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
}
 8004c32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c34:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <vTaskStartScheduler+0xcc>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3354      	adds	r3, #84	@ 0x54
 8004c3a:	4a15      	ldr	r2, [pc, #84]	@ (8004c90 <vTaskStartScheduler+0xd0>)
 8004c3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c3e:	4b15      	ldr	r3, [pc, #84]	@ (8004c94 <vTaskStartScheduler+0xd4>)
 8004c40:	f04f 32ff 	mov.w	r2, #4294967295
 8004c44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c46:	4b14      	ldr	r3, [pc, #80]	@ (8004c98 <vTaskStartScheduler+0xd8>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c4c:	4b13      	ldr	r3, [pc, #76]	@ (8004c9c <vTaskStartScheduler+0xdc>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c52:	f001 f8e5 	bl	8005e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c56:	e00f      	b.n	8004c78 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d10b      	bne.n	8004c78 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <vTaskStartScheduler+0xb4>
}
 8004c78:	bf00      	nop
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	08007064 	.word	0x08007064
 8004c84:	080052d1 	.word	0x080052d1
 8004c88:	200012ec 	.word	0x200012ec
 8004c8c:	20000df4 	.word	0x20000df4
 8004c90:	20000010 	.word	0x20000010
 8004c94:	200012e8 	.word	0x200012e8
 8004c98:	200012d4 	.word	0x200012d4
 8004c9c:	200012cc 	.word	0x200012cc

08004ca0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ca4:	4b04      	ldr	r3, [pc, #16]	@ (8004cb8 <vTaskSuspendAll+0x18>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	4a03      	ldr	r2, [pc, #12]	@ (8004cb8 <vTaskSuspendAll+0x18>)
 8004cac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cae:	bf00      	nop
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	200012f0 	.word	0x200012f0

08004cbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cca:	4b42      	ldr	r3, [pc, #264]	@ (8004dd4 <xTaskResumeAll+0x118>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <xTaskResumeAll+0x2e>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	603b      	str	r3, [r7, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cea:	f001 f93d 	bl	8005f68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cee:	4b39      	ldr	r3, [pc, #228]	@ (8004dd4 <xTaskResumeAll+0x118>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	4a37      	ldr	r2, [pc, #220]	@ (8004dd4 <xTaskResumeAll+0x118>)
 8004cf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf8:	4b36      	ldr	r3, [pc, #216]	@ (8004dd4 <xTaskResumeAll+0x118>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d162      	bne.n	8004dc6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d00:	4b35      	ldr	r3, [pc, #212]	@ (8004dd8 <xTaskResumeAll+0x11c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d05e      	beq.n	8004dc6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d08:	e02f      	b.n	8004d6a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d0a:	4b34      	ldr	r3, [pc, #208]	@ (8004ddc <xTaskResumeAll+0x120>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3318      	adds	r3, #24
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff f83a 	bl	8003d90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff f835 	bl	8003d90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004de0 <xTaskResumeAll+0x124>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d903      	bls.n	8004d3a <xTaskResumeAll+0x7e>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	4a2a      	ldr	r2, [pc, #168]	@ (8004de0 <xTaskResumeAll+0x124>)
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a27      	ldr	r2, [pc, #156]	@ (8004de4 <xTaskResumeAll+0x128>)
 8004d48:	441a      	add	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f7fe ffc0 	bl	8003cd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5a:	4b23      	ldr	r3, [pc, #140]	@ (8004de8 <xTaskResumeAll+0x12c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004d64:	4b21      	ldr	r3, [pc, #132]	@ (8004dec <xTaskResumeAll+0x130>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ddc <xTaskResumeAll+0x120>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1cb      	bne.n	8004d0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d78:	f000 fb66 	bl	8005448 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004df0 <xTaskResumeAll+0x134>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d010      	beq.n	8004daa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d88:	f000 f846 	bl	8004e18 <xTaskIncrementTick>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004d92:	4b16      	ldr	r3, [pc, #88]	@ (8004dec <xTaskResumeAll+0x130>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f1      	bne.n	8004d88 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004da4:	4b12      	ldr	r3, [pc, #72]	@ (8004df0 <xTaskResumeAll+0x134>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004daa:	4b10      	ldr	r3, [pc, #64]	@ (8004dec <xTaskResumeAll+0x130>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004db2:	2301      	movs	r3, #1
 8004db4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004db6:	4b0f      	ldr	r3, [pc, #60]	@ (8004df4 <xTaskResumeAll+0x138>)
 8004db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dc6:	f001 f901 	bl	8005fcc <vPortExitCritical>

	return xAlreadyYielded;
 8004dca:	68bb      	ldr	r3, [r7, #8]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	200012f0 	.word	0x200012f0
 8004dd8:	200012c8 	.word	0x200012c8
 8004ddc:	20001288 	.word	0x20001288
 8004de0:	200012d0 	.word	0x200012d0
 8004de4:	20000df8 	.word	0x20000df8
 8004de8:	20000df4 	.word	0x20000df4
 8004dec:	200012dc 	.word	0x200012dc
 8004df0:	200012d8 	.word	0x200012d8
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dfe:	4b05      	ldr	r3, [pc, #20]	@ (8004e14 <xTaskGetTickCount+0x1c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e04:	687b      	ldr	r3, [r7, #4]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	200012cc 	.word	0x200012cc

08004e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e22:	4b4f      	ldr	r3, [pc, #316]	@ (8004f60 <xTaskIncrementTick+0x148>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 8090 	bne.w	8004f4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8004f64 <xTaskIncrementTick+0x14c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e34:	4a4b      	ldr	r2, [pc, #300]	@ (8004f64 <xTaskIncrementTick+0x14c>)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d121      	bne.n	8004e84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e40:	4b49      	ldr	r3, [pc, #292]	@ (8004f68 <xTaskIncrementTick+0x150>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00b      	beq.n	8004e62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	603b      	str	r3, [r7, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <xTaskIncrementTick+0x46>
 8004e62:	4b41      	ldr	r3, [pc, #260]	@ (8004f68 <xTaskIncrementTick+0x150>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	4b40      	ldr	r3, [pc, #256]	@ (8004f6c <xTaskIncrementTick+0x154>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f68 <xTaskIncrementTick+0x150>)
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	4a3e      	ldr	r2, [pc, #248]	@ (8004f6c <xTaskIncrementTick+0x154>)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4b3e      	ldr	r3, [pc, #248]	@ (8004f70 <xTaskIncrementTick+0x158>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f70 <xTaskIncrementTick+0x158>)
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	f000 fae2 	bl	8005448 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e84:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <xTaskIncrementTick+0x15c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d349      	bcc.n	8004f22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e8e:	4b36      	ldr	r3, [pc, #216]	@ (8004f68 <xTaskIncrementTick+0x150>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e98:	4b36      	ldr	r3, [pc, #216]	@ (8004f74 <xTaskIncrementTick+0x15c>)
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9e:	601a      	str	r2, [r3, #0]
					break;
 8004ea0:	e03f      	b.n	8004f22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea2:	4b31      	ldr	r3, [pc, #196]	@ (8004f68 <xTaskIncrementTick+0x150>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d203      	bcs.n	8004ec2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004eba:	4a2e      	ldr	r2, [pc, #184]	@ (8004f74 <xTaskIncrementTick+0x15c>)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ec0:	e02f      	b.n	8004f22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe ff62 	bl	8003d90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d004      	beq.n	8004ede <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	3318      	adds	r3, #24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fe ff59 	bl	8003d90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee2:	4b25      	ldr	r3, [pc, #148]	@ (8004f78 <xTaskIncrementTick+0x160>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d903      	bls.n	8004ef2 <xTaskIncrementTick+0xda>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	4a22      	ldr	r2, [pc, #136]	@ (8004f78 <xTaskIncrementTick+0x160>)
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4a1f      	ldr	r2, [pc, #124]	@ (8004f7c <xTaskIncrementTick+0x164>)
 8004f00:	441a      	add	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f7fe fee4 	bl	8003cd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f12:	4b1b      	ldr	r3, [pc, #108]	@ (8004f80 <xTaskIncrementTick+0x168>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d3b8      	bcc.n	8004e8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f20:	e7b5      	b.n	8004e8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f22:	4b17      	ldr	r3, [pc, #92]	@ (8004f80 <xTaskIncrementTick+0x168>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f28:	4914      	ldr	r1, [pc, #80]	@ (8004f7c <xTaskIncrementTick+0x164>)
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d901      	bls.n	8004f3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f3e:	4b11      	ldr	r3, [pc, #68]	@ (8004f84 <xTaskIncrementTick+0x16c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004f46:	2301      	movs	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e004      	b.n	8004f56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f88 <xTaskIncrementTick+0x170>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	4a0d      	ldr	r2, [pc, #52]	@ (8004f88 <xTaskIncrementTick+0x170>)
 8004f54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200012f0 	.word	0x200012f0
 8004f64:	200012cc 	.word	0x200012cc
 8004f68:	20001280 	.word	0x20001280
 8004f6c:	20001284 	.word	0x20001284
 8004f70:	200012e0 	.word	0x200012e0
 8004f74:	200012e8 	.word	0x200012e8
 8004f78:	200012d0 	.word	0x200012d0
 8004f7c:	20000df8 	.word	0x20000df8
 8004f80:	20000df4 	.word	0x20000df4
 8004f84:	200012dc 	.word	0x200012dc
 8004f88:	200012d8 	.word	0x200012d8

08004f8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f92:	4b2b      	ldr	r3, [pc, #172]	@ (8005040 <vTaskSwitchContext+0xb4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005044 <vTaskSwitchContext+0xb8>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fa0:	e047      	b.n	8005032 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004fa2:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <vTaskSwitchContext+0xb8>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fa8:	4b27      	ldr	r3, [pc, #156]	@ (8005048 <vTaskSwitchContext+0xbc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e011      	b.n	8004fd4 <vTaskSwitchContext+0x48>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <vTaskSwitchContext+0x42>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	607b      	str	r3, [r7, #4]
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	e7fd      	b.n	8004fca <vTaskSwitchContext+0x3e>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	491d      	ldr	r1, [pc, #116]	@ (800504c <vTaskSwitchContext+0xc0>)
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0e3      	beq.n	8004fb0 <vTaskSwitchContext+0x24>
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4a16      	ldr	r2, [pc, #88]	@ (800504c <vTaskSwitchContext+0xc0>)
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	3308      	adds	r3, #8
 800500a:	429a      	cmp	r2, r3
 800500c:	d104      	bne.n	8005018 <vTaskSwitchContext+0x8c>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4a0c      	ldr	r2, [pc, #48]	@ (8005050 <vTaskSwitchContext+0xc4>)
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <vTaskSwitchContext+0xbc>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005028:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <vTaskSwitchContext+0xc4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3354      	adds	r3, #84	@ 0x54
 800502e:	4a09      	ldr	r2, [pc, #36]	@ (8005054 <vTaskSwitchContext+0xc8>)
 8005030:	6013      	str	r3, [r2, #0]
}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	200012f0 	.word	0x200012f0
 8005044:	200012dc 	.word	0x200012dc
 8005048:	200012d0 	.word	0x200012d0
 800504c:	20000df8 	.word	0x20000df8
 8005050:	20000df4 	.word	0x20000df4
 8005054:	20000010 	.word	0x20000010

08005058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	60fb      	str	r3, [r7, #12]
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	e7fd      	b.n	800507c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005080:	4b07      	ldr	r3, [pc, #28]	@ (80050a0 <vTaskPlaceOnEventList+0x48>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3318      	adds	r3, #24
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fe fe48 	bl	8003d1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800508e:	2101      	movs	r1, #1
 8005090:	6838      	ldr	r0, [r7, #0]
 8005092:	f000 fa87 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000df4 	.word	0x20000df4

080050a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10b      	bne.n	80050ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	617b      	str	r3, [r7, #20]
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3318      	adds	r3, #24
 80050d4:	4619      	mov	r1, r3
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7fe fdfd 	bl	8003cd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80050e2:	f04f 33ff 	mov.w	r3, #4294967295
 80050e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	68b8      	ldr	r0, [r7, #8]
 80050ec:	f000 fa5a 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
	}
 80050f0:	bf00      	nop
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20000df4 	.word	0x20000df4

080050fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60fb      	str	r3, [r7, #12]
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	e7fd      	b.n	8005126 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3318      	adds	r3, #24
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fe2e 	bl	8003d90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005134:	4b1d      	ldr	r3, [pc, #116]	@ (80051ac <xTaskRemoveFromEventList+0xb0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d11d      	bne.n	8005178 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3304      	adds	r3, #4
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fe25 	bl	8003d90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514a:	4b19      	ldr	r3, [pc, #100]	@ (80051b0 <xTaskRemoveFromEventList+0xb4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d903      	bls.n	800515a <xTaskRemoveFromEventList+0x5e>
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005156:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <xTaskRemoveFromEventList+0xb4>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4a13      	ldr	r2, [pc, #76]	@ (80051b4 <xTaskRemoveFromEventList+0xb8>)
 8005168:	441a      	add	r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	3304      	adds	r3, #4
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f7fe fdb0 	bl	8003cd6 <vListInsertEnd>
 8005176:	e005      	b.n	8005184 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	3318      	adds	r3, #24
 800517c:	4619      	mov	r1, r3
 800517e:	480e      	ldr	r0, [pc, #56]	@ (80051b8 <xTaskRemoveFromEventList+0xbc>)
 8005180:	f7fe fda9 	bl	8003cd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005188:	4b0c      	ldr	r3, [pc, #48]	@ (80051bc <xTaskRemoveFromEventList+0xc0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	429a      	cmp	r2, r3
 8005190:	d905      	bls.n	800519e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005192:	2301      	movs	r3, #1
 8005194:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005196:	4b0a      	ldr	r3, [pc, #40]	@ (80051c0 <xTaskRemoveFromEventList+0xc4>)
 8005198:	2201      	movs	r2, #1
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e001      	b.n	80051a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051a2:	697b      	ldr	r3, [r7, #20]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	200012f0 	.word	0x200012f0
 80051b0:	200012d0 	.word	0x200012d0
 80051b4:	20000df8 	.word	0x20000df8
 80051b8:	20001288 	.word	0x20001288
 80051bc:	20000df4 	.word	0x20000df4
 80051c0:	200012dc 	.word	0x200012dc

080051c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <vTaskInternalSetTimeOutState+0x24>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051d4:	4b05      	ldr	r3, [pc, #20]	@ (80051ec <vTaskInternalSetTimeOutState+0x28>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	605a      	str	r2, [r3, #4]
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	200012e0 	.word	0x200012e0
 80051ec:	200012cc 	.word	0x200012cc

080051f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	e7fd      	b.n	8005214 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60fb      	str	r3, [r7, #12]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005236:	f000 fe97 	bl	8005f68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800523a:	4b1d      	ldr	r3, [pc, #116]	@ (80052b0 <xTaskCheckForTimeOut+0xc0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d102      	bne.n	800525a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e023      	b.n	80052a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b15      	ldr	r3, [pc, #84]	@ (80052b4 <xTaskCheckForTimeOut+0xc4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d007      	beq.n	8005276 <xTaskCheckForTimeOut+0x86>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	429a      	cmp	r2, r3
 800526e:	d302      	bcc.n	8005276 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005270:	2301      	movs	r3, #1
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	e015      	b.n	80052a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	429a      	cmp	r2, r3
 800527e:	d20b      	bcs.n	8005298 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff ff99 	bl	80051c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	e004      	b.n	80052a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800529e:	2301      	movs	r3, #1
 80052a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052a2:	f000 fe93 	bl	8005fcc <vPortExitCritical>

	return xReturn;
 80052a6:	69fb      	ldr	r3, [r7, #28]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	200012cc 	.word	0x200012cc
 80052b4:	200012e0 	.word	0x200012e0

080052b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052bc:	4b03      	ldr	r3, [pc, #12]	@ (80052cc <vTaskMissedYield+0x14>)
 80052be:	2201      	movs	r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	200012dc 	.word	0x200012dc

080052d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052d8:	f000 f852 	bl	8005380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052dc:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <prvIdleTask+0x28>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d9f9      	bls.n	80052d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052e4:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <prvIdleTask+0x2c>)
 80052e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052f4:	e7f0      	b.n	80052d8 <prvIdleTask+0x8>
 80052f6:	bf00      	nop
 80052f8:	20000df8 	.word	0x20000df8
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005306:	2300      	movs	r3, #0
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	e00c      	b.n	8005326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4a12      	ldr	r2, [pc, #72]	@ (8005360 <prvInitialiseTaskLists+0x60>)
 8005318:	4413      	add	r3, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe fcae 	bl	8003c7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3301      	adds	r3, #1
 8005324:	607b      	str	r3, [r7, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b37      	cmp	r3, #55	@ 0x37
 800532a:	d9ef      	bls.n	800530c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800532c:	480d      	ldr	r0, [pc, #52]	@ (8005364 <prvInitialiseTaskLists+0x64>)
 800532e:	f7fe fca5 	bl	8003c7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005332:	480d      	ldr	r0, [pc, #52]	@ (8005368 <prvInitialiseTaskLists+0x68>)
 8005334:	f7fe fca2 	bl	8003c7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005338:	480c      	ldr	r0, [pc, #48]	@ (800536c <prvInitialiseTaskLists+0x6c>)
 800533a:	f7fe fc9f 	bl	8003c7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800533e:	480c      	ldr	r0, [pc, #48]	@ (8005370 <prvInitialiseTaskLists+0x70>)
 8005340:	f7fe fc9c 	bl	8003c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005344:	480b      	ldr	r0, [pc, #44]	@ (8005374 <prvInitialiseTaskLists+0x74>)
 8005346:	f7fe fc99 	bl	8003c7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800534a:	4b0b      	ldr	r3, [pc, #44]	@ (8005378 <prvInitialiseTaskLists+0x78>)
 800534c:	4a05      	ldr	r2, [pc, #20]	@ (8005364 <prvInitialiseTaskLists+0x64>)
 800534e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005350:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <prvInitialiseTaskLists+0x7c>)
 8005352:	4a05      	ldr	r2, [pc, #20]	@ (8005368 <prvInitialiseTaskLists+0x68>)
 8005354:	601a      	str	r2, [r3, #0]
}
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000df8 	.word	0x20000df8
 8005364:	20001258 	.word	0x20001258
 8005368:	2000126c 	.word	0x2000126c
 800536c:	20001288 	.word	0x20001288
 8005370:	2000129c 	.word	0x2000129c
 8005374:	200012b4 	.word	0x200012b4
 8005378:	20001280 	.word	0x20001280
 800537c:	20001284 	.word	0x20001284

08005380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005386:	e019      	b.n	80053bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005388:	f000 fdee 	bl	8005f68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800538c:	4b10      	ldr	r3, [pc, #64]	@ (80053d0 <prvCheckTasksWaitingTermination+0x50>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	4618      	mov	r0, r3
 800539a:	f7fe fcf9 	bl	8003d90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800539e:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <prvCheckTasksWaitingTermination+0x54>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	4a0b      	ldr	r2, [pc, #44]	@ (80053d4 <prvCheckTasksWaitingTermination+0x54>)
 80053a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053a8:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <prvCheckTasksWaitingTermination+0x58>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	4a0a      	ldr	r2, [pc, #40]	@ (80053d8 <prvCheckTasksWaitingTermination+0x58>)
 80053b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053b2:	f000 fe0b 	bl	8005fcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f810 	bl	80053dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053bc:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <prvCheckTasksWaitingTermination+0x58>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e1      	bne.n	8005388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	2000129c 	.word	0x2000129c
 80053d4:	200012c8 	.word	0x200012c8
 80053d8:	200012b0 	.word	0x200012b0

080053dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3354      	adds	r3, #84	@ 0x54
 80053e8:	4618      	mov	r0, r3
 80053ea:	f001 f929 	bl	8006640 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 ffa3 	bl	8006348 <vPortFree>
				vPortFree( pxTCB );
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 ffa0 	bl	8006348 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005408:	e019      	b.n	800543e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005410:	2b01      	cmp	r3, #1
 8005412:	d103      	bne.n	800541c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 ff97 	bl	8006348 <vPortFree>
	}
 800541a:	e010      	b.n	800543e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005422:	2b02      	cmp	r3, #2
 8005424:	d00b      	beq.n	800543e <prvDeleteTCB+0x62>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	60fb      	str	r3, [r7, #12]
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	e7fd      	b.n	800543a <prvDeleteTCB+0x5e>
	}
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544e:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <prvResetNextTaskUnblockTime+0x38>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005458:	4b0a      	ldr	r3, [pc, #40]	@ (8005484 <prvResetNextTaskUnblockTime+0x3c>)
 800545a:	f04f 32ff 	mov.w	r2, #4294967295
 800545e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005460:	e008      	b.n	8005474 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005462:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <prvResetNextTaskUnblockTime+0x38>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a04      	ldr	r2, [pc, #16]	@ (8005484 <prvResetNextTaskUnblockTime+0x3c>)
 8005472:	6013      	str	r3, [r2, #0]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	20001280 	.word	0x20001280
 8005484:	200012e8 	.word	0x200012e8

08005488 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800548e:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <xTaskGetSchedulerState+0x34>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005496:	2301      	movs	r3, #1
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	e008      	b.n	80054ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549c:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <xTaskGetSchedulerState+0x38>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054a4:	2302      	movs	r3, #2
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	e001      	b.n	80054ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054aa:	2300      	movs	r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054ae:	687b      	ldr	r3, [r7, #4]
	}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	200012d4 	.word	0x200012d4
 80054c0:	200012f0 	.word	0x200012f0

080054c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d058      	beq.n	800558c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054da:	4b2f      	ldr	r3, [pc, #188]	@ (8005598 <xTaskPriorityDisinherit+0xd4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d00b      	beq.n	80054fc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	60fb      	str	r3, [r7, #12]
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	60bb      	str	r3, [r7, #8]
}
 8005516:	bf00      	nop
 8005518:	bf00      	nop
 800551a:	e7fd      	b.n	8005518 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005520:	1e5a      	subs	r2, r3, #1
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	429a      	cmp	r2, r3
 8005530:	d02c      	beq.n	800558c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005536:	2b00      	cmp	r3, #0
 8005538:	d128      	bne.n	800558c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	3304      	adds	r3, #4
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fc26 	bl	8003d90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555c:	4b0f      	ldr	r3, [pc, #60]	@ (800559c <xTaskPriorityDisinherit+0xd8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d903      	bls.n	800556c <xTaskPriorityDisinherit+0xa8>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	4a0c      	ldr	r2, [pc, #48]	@ (800559c <xTaskPriorityDisinherit+0xd8>)
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4a09      	ldr	r2, [pc, #36]	@ (80055a0 <xTaskPriorityDisinherit+0xdc>)
 800557a:	441a      	add	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f7fe fba7 	bl	8003cd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800558c:	697b      	ldr	r3, [r7, #20]
	}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000df4 	.word	0x20000df4
 800559c:	200012d0 	.word	0x200012d0
 80055a0:	20000df8 	.word	0x20000df8

080055a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055ae:	4b21      	ldr	r3, [pc, #132]	@ (8005634 <prvAddCurrentTaskToDelayedList+0x90>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055b4:	4b20      	ldr	r3, [pc, #128]	@ (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fbe8 	bl	8003d90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d10a      	bne.n	80055de <prvAddCurrentTaskToDelayedList+0x3a>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4819      	ldr	r0, [pc, #100]	@ (800563c <prvAddCurrentTaskToDelayedList+0x98>)
 80055d8:	f7fe fb7d 	bl	8003cd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055dc:	e026      	b.n	800562c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055e6:	4b14      	ldr	r3, [pc, #80]	@ (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d209      	bcs.n	800560a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f7fe fb8b 	bl	8003d1e <vListInsert>
}
 8005608:	e010      	b.n	800562c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800560a:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <prvAddCurrentTaskToDelayedList+0xa0>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3304      	adds	r3, #4
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f7fe fb81 	bl	8003d1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800561c:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <prvAddCurrentTaskToDelayedList+0xa4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	429a      	cmp	r2, r3
 8005624:	d202      	bcs.n	800562c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005626:	4a08      	ldr	r2, [pc, #32]	@ (8005648 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6013      	str	r3, [r2, #0]
}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200012cc 	.word	0x200012cc
 8005638:	20000df4 	.word	0x20000df4
 800563c:	200012b4 	.word	0x200012b4
 8005640:	20001284 	.word	0x20001284
 8005644:	20001280 	.word	0x20001280
 8005648:	200012e8 	.word	0x200012e8

0800564c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	@ 0x28
 8005650:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005656:	f000 fb13 	bl	8005c80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800565a:	4b1d      	ldr	r3, [pc, #116]	@ (80056d0 <xTimerCreateTimerTask+0x84>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d021      	beq.n	80056a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800566a:	1d3a      	adds	r2, r7, #4
 800566c:	f107 0108 	add.w	r1, r7, #8
 8005670:	f107 030c 	add.w	r3, r7, #12
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe fae7 	bl	8003c48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	9202      	str	r2, [sp, #8]
 8005682:	9301      	str	r3, [sp, #4]
 8005684:	2302      	movs	r3, #2
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	2300      	movs	r3, #0
 800568a:	460a      	mov	r2, r1
 800568c:	4911      	ldr	r1, [pc, #68]	@ (80056d4 <xTimerCreateTimerTask+0x88>)
 800568e:	4812      	ldr	r0, [pc, #72]	@ (80056d8 <xTimerCreateTimerTask+0x8c>)
 8005690:	f7ff f8a2 	bl	80047d8 <xTaskCreateStatic>
 8005694:	4603      	mov	r3, r0
 8005696:	4a11      	ldr	r2, [pc, #68]	@ (80056dc <xTimerCreateTimerTask+0x90>)
 8005698:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800569a:	4b10      	ldr	r3, [pc, #64]	@ (80056dc <xTimerCreateTimerTask+0x90>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80056a2:	2301      	movs	r3, #1
 80056a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10b      	bne.n	80056c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	613b      	str	r3, [r7, #16]
}
 80056be:	bf00      	nop
 80056c0:	bf00      	nop
 80056c2:	e7fd      	b.n	80056c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056c4:	697b      	ldr	r3, [r7, #20]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20001324 	.word	0x20001324
 80056d4:	0800706c 	.word	0x0800706c
 80056d8:	08005819 	.word	0x08005819
 80056dc:	20001328 	.word	0x20001328

080056e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	@ 0x28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <xTimerGenericCommand+0x30>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	623b      	str	r3, [r7, #32]
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005710:	4b19      	ldr	r3, [pc, #100]	@ (8005778 <xTimerGenericCommand+0x98>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02a      	beq.n	800576e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b05      	cmp	r3, #5
 8005728:	dc18      	bgt.n	800575c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800572a:	f7ff fead 	bl	8005488 <xTaskGetSchedulerState>
 800572e:	4603      	mov	r3, r0
 8005730:	2b02      	cmp	r3, #2
 8005732:	d109      	bne.n	8005748 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005734:	4b10      	ldr	r3, [pc, #64]	@ (8005778 <xTimerGenericCommand+0x98>)
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	f107 0110 	add.w	r1, r7, #16
 800573c:	2300      	movs	r3, #0
 800573e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005740:	f7fe fc5a 	bl	8003ff8 <xQueueGenericSend>
 8005744:	6278      	str	r0, [r7, #36]	@ 0x24
 8005746:	e012      	b.n	800576e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005748:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <xTimerGenericCommand+0x98>)
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	f107 0110 	add.w	r1, r7, #16
 8005750:	2300      	movs	r3, #0
 8005752:	2200      	movs	r2, #0
 8005754:	f7fe fc50 	bl	8003ff8 <xQueueGenericSend>
 8005758:	6278      	str	r0, [r7, #36]	@ 0x24
 800575a:	e008      	b.n	800576e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800575c:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <xTimerGenericCommand+0x98>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	f107 0110 	add.w	r1, r7, #16
 8005764:	2300      	movs	r3, #0
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	f7fe fd48 	bl	80041fc <xQueueGenericSendFromISR>
 800576c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005770:	4618      	mov	r0, r3
 8005772:	3728      	adds	r7, #40	@ 0x28
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20001324 	.word	0x20001324

0800577c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af02      	add	r7, sp, #8
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005786:	4b23      	ldr	r3, [pc, #140]	@ (8005814 <prvProcessExpiredTimer+0x98>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3304      	adds	r3, #4
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe fafb 	bl	8003d90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d023      	beq.n	80057f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	699a      	ldr	r2, [r3, #24]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	18d1      	adds	r1, r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	6978      	ldr	r0, [r7, #20]
 80057b6:	f000 f8d5 	bl	8005964 <prvInsertTimerInActiveList>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d020      	beq.n	8005802 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057c0:	2300      	movs	r3, #0
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	2100      	movs	r1, #0
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f7ff ff88 	bl	80056e0 <xTimerGenericCommand>
 80057d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d114      	bne.n	8005802 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	60fb      	str	r3, [r7, #12]
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	6978      	ldr	r0, [r7, #20]
 8005808:	4798      	blx	r3
}
 800580a:	bf00      	nop
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	2000131c 	.word	0x2000131c

08005818 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005820:	f107 0308 	add.w	r3, r7, #8
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f859 	bl	80058dc <prvGetNextExpireTime>
 800582a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4619      	mov	r1, r3
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f805 	bl	8005840 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005836:	f000 f8d7 	bl	80059e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800583a:	bf00      	nop
 800583c:	e7f0      	b.n	8005820 <prvTimerTask+0x8>
	...

08005840 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800584a:	f7ff fa29 	bl	8004ca0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800584e:	f107 0308 	add.w	r3, r7, #8
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f866 	bl	8005924 <prvSampleTimeNow>
 8005858:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d130      	bne.n	80058c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <prvProcessTimerOrBlockTask+0x3c>
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	429a      	cmp	r2, r3
 800586c:	d806      	bhi.n	800587c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800586e:	f7ff fa25 	bl	8004cbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff ff81 	bl	800577c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800587a:	e024      	b.n	80058c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005882:	4b13      	ldr	r3, [pc, #76]	@ (80058d0 <prvProcessTimerOrBlockTask+0x90>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <prvProcessTimerOrBlockTask+0x50>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <prvProcessTimerOrBlockTask+0x52>
 8005890:	2300      	movs	r3, #0
 8005892:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005894:	4b0f      	ldr	r3, [pc, #60]	@ (80058d4 <prvProcessTimerOrBlockTask+0x94>)
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	4619      	mov	r1, r3
 80058a2:	f7fe ff65 	bl	8004770 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80058a6:	f7ff fa09 	bl	8004cbc <xTaskResumeAll>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058b0:	4b09      	ldr	r3, [pc, #36]	@ (80058d8 <prvProcessTimerOrBlockTask+0x98>)
 80058b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	f3bf 8f6f 	isb	sy
}
 80058c0:	e001      	b.n	80058c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058c2:	f7ff f9fb 	bl	8004cbc <xTaskResumeAll>
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20001320 	.word	0x20001320
 80058d4:	20001324 	.word	0x20001324
 80058d8:	e000ed04 	.word	0xe000ed04

080058dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005920 <prvGetNextExpireTime+0x44>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <prvGetNextExpireTime+0x16>
 80058ee:	2201      	movs	r2, #1
 80058f0:	e000      	b.n	80058f4 <prvGetNextExpireTime+0x18>
 80058f2:	2200      	movs	r2, #0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d105      	bne.n	800590c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005900:	4b07      	ldr	r3, [pc, #28]	@ (8005920 <prvGetNextExpireTime+0x44>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e001      	b.n	8005910 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005910:	68fb      	ldr	r3, [r7, #12]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	2000131c 	.word	0x2000131c

08005924 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800592c:	f7ff fa64 	bl	8004df8 <xTaskGetTickCount>
 8005930:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005932:	4b0b      	ldr	r3, [pc, #44]	@ (8005960 <prvSampleTimeNow+0x3c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	429a      	cmp	r2, r3
 800593a:	d205      	bcs.n	8005948 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800593c:	f000 f93a 	bl	8005bb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	e002      	b.n	800594e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800594e:	4a04      	ldr	r2, [pc, #16]	@ (8005960 <prvSampleTimeNow+0x3c>)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005954:	68fb      	ldr	r3, [r7, #12]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	2000132c 	.word	0x2000132c

08005964 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	429a      	cmp	r2, r3
 8005988:	d812      	bhi.n	80059b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	1ad2      	subs	r2, r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	429a      	cmp	r2, r3
 8005996:	d302      	bcc.n	800599e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005998:	2301      	movs	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e01b      	b.n	80059d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800599e:	4b10      	ldr	r3, [pc, #64]	@ (80059e0 <prvInsertTimerInActiveList+0x7c>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe f9b8 	bl	8003d1e <vListInsert>
 80059ae:	e012      	b.n	80059d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d206      	bcs.n	80059c6 <prvInsertTimerInActiveList+0x62>
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d302      	bcc.n	80059c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e007      	b.n	80059d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059c6:	4b07      	ldr	r3, [pc, #28]	@ (80059e4 <prvInsertTimerInActiveList+0x80>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f7fe f9a4 	bl	8003d1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059d6:	697b      	ldr	r3, [r7, #20]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20001320 	.word	0x20001320
 80059e4:	2000131c 	.word	0x2000131c

080059e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08e      	sub	sp, #56	@ 0x38
 80059ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ee:	e0ce      	b.n	8005b8e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	da19      	bge.n	8005a2a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	3304      	adds	r3, #4
 80059fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10b      	bne.n	8005a1a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	61fb      	str	r3, [r7, #28]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a20:	6850      	ldr	r0, [r2, #4]
 8005a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a24:	6892      	ldr	r2, [r2, #8]
 8005a26:	4611      	mov	r1, r2
 8005a28:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f2c0 80ae 	blt.w	8005b8e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	3304      	adds	r3, #4
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe f9a4 	bl	8003d90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a48:	463b      	mov	r3, r7
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff ff6a 	bl	8005924 <prvSampleTimeNow>
 8005a50:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b09      	cmp	r3, #9
 8005a56:	f200 8097 	bhi.w	8005b88 <prvProcessReceivedCommands+0x1a0>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <prvProcessReceivedCommands+0x78>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a89 	.word	0x08005a89
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a89 	.word	0x08005a89
 8005a6c:	08005aff 	.word	0x08005aff
 8005a70:	08005b13 	.word	0x08005b13
 8005a74:	08005b5f 	.word	0x08005b5f
 8005a78:	08005a89 	.word	0x08005a89
 8005a7c:	08005a89 	.word	0x08005a89
 8005a80:	08005aff 	.word	0x08005aff
 8005a84:	08005b13 	.word	0x08005b13
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	18d1      	adds	r1, r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aa8:	f7ff ff5c 	bl	8005964 <prvInsertTimerInActiveList>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d06c      	beq.n	8005b8c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d061      	beq.n	8005b8c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	441a      	add	r2, r3
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ada:	f7ff fe01 	bl	80056e0 <xTimerGenericCommand>
 8005ade:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d152      	bne.n	8005b8c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	61bb      	str	r3, [r7, #24]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b10:	e03d      	b.n	8005b8e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10b      	bne.n	8005b4a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	617b      	str	r3, [r7, #20]
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	e7fd      	b.n	8005b46 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	18d1      	adds	r1, r2, r3
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b58:	f7ff ff04 	bl	8005964 <prvInsertTimerInActiveList>
					break;
 8005b5c:	e017      	b.n	8005b8e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d103      	bne.n	8005b74 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005b6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b6e:	f000 fbeb 	bl	8006348 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b72:	e00c      	b.n	8005b8e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b7a:	f023 0301 	bic.w	r3, r3, #1
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b86:	e002      	b.n	8005b8e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005b88:	bf00      	nop
 8005b8a:	e000      	b.n	8005b8e <prvProcessReceivedCommands+0x1a6>
					break;
 8005b8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b8e:	4b08      	ldr	r3, [pc, #32]	@ (8005bb0 <prvProcessReceivedCommands+0x1c8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	1d39      	adds	r1, r7, #4
 8005b94:	2200      	movs	r2, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fbce 	bl	8004338 <xQueueReceive>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f47f af26 	bne.w	80059f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	3730      	adds	r7, #48	@ 0x30
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20001324 	.word	0x20001324

08005bb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bba:	e049      	b.n	8005c50 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8005c78 <prvSwitchTimerLists+0xc4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8005c78 <prvSwitchTimerLists+0xc4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe f8db 	bl	8003d90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d02f      	beq.n	8005c50 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d90e      	bls.n	8005c20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c78 <prvSwitchTimerLists+0xc4>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f7fe f880 	bl	8003d1e <vListInsert>
 8005c1e:	e017      	b.n	8005c50 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	2100      	movs	r1, #0
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff fd58 	bl	80056e0 <xTimerGenericCommand>
 8005c30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10b      	bne.n	8005c50 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	603b      	str	r3, [r7, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	e7fd      	b.n	8005c4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c50:	4b09      	ldr	r3, [pc, #36]	@ (8005c78 <prvSwitchTimerLists+0xc4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1b0      	bne.n	8005bbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c5a:	4b07      	ldr	r3, [pc, #28]	@ (8005c78 <prvSwitchTimerLists+0xc4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c60:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <prvSwitchTimerLists+0xc8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a04      	ldr	r2, [pc, #16]	@ (8005c78 <prvSwitchTimerLists+0xc4>)
 8005c66:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c68:	4a04      	ldr	r2, [pc, #16]	@ (8005c7c <prvSwitchTimerLists+0xc8>)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6013      	str	r3, [r2, #0]
}
 8005c6e:	bf00      	nop
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2000131c 	.word	0x2000131c
 8005c7c:	20001320 	.word	0x20001320

08005c80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c86:	f000 f96f 	bl	8005f68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c8a:	4b15      	ldr	r3, [pc, #84]	@ (8005ce0 <prvCheckForValidListAndQueue+0x60>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d120      	bne.n	8005cd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c92:	4814      	ldr	r0, [pc, #80]	@ (8005ce4 <prvCheckForValidListAndQueue+0x64>)
 8005c94:	f7fd fff2 	bl	8003c7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c98:	4813      	ldr	r0, [pc, #76]	@ (8005ce8 <prvCheckForValidListAndQueue+0x68>)
 8005c9a:	f7fd ffef 	bl	8003c7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c9e:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <prvCheckForValidListAndQueue+0x6c>)
 8005ca0:	4a10      	ldr	r2, [pc, #64]	@ (8005ce4 <prvCheckForValidListAndQueue+0x64>)
 8005ca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ca4:	4b12      	ldr	r3, [pc, #72]	@ (8005cf0 <prvCheckForValidListAndQueue+0x70>)
 8005ca6:	4a10      	ldr	r2, [pc, #64]	@ (8005ce8 <prvCheckForValidListAndQueue+0x68>)
 8005ca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005caa:	2300      	movs	r3, #0
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	4b11      	ldr	r3, [pc, #68]	@ (8005cf4 <prvCheckForValidListAndQueue+0x74>)
 8005cb0:	4a11      	ldr	r2, [pc, #68]	@ (8005cf8 <prvCheckForValidListAndQueue+0x78>)
 8005cb2:	2110      	movs	r1, #16
 8005cb4:	200a      	movs	r0, #10
 8005cb6:	f7fe f8ff 	bl	8003eb8 <xQueueGenericCreateStatic>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4a08      	ldr	r2, [pc, #32]	@ (8005ce0 <prvCheckForValidListAndQueue+0x60>)
 8005cbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005cc0:	4b07      	ldr	r3, [pc, #28]	@ (8005ce0 <prvCheckForValidListAndQueue+0x60>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cc8:	4b05      	ldr	r3, [pc, #20]	@ (8005ce0 <prvCheckForValidListAndQueue+0x60>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	490b      	ldr	r1, [pc, #44]	@ (8005cfc <prvCheckForValidListAndQueue+0x7c>)
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fd24 	bl	800471c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cd4:	f000 f97a 	bl	8005fcc <vPortExitCritical>
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20001324 	.word	0x20001324
 8005ce4:	200012f4 	.word	0x200012f4
 8005ce8:	20001308 	.word	0x20001308
 8005cec:	2000131c 	.word	0x2000131c
 8005cf0:	20001320 	.word	0x20001320
 8005cf4:	200013d0 	.word	0x200013d0
 8005cf8:	20001330 	.word	0x20001330
 8005cfc:	08007074 	.word	0x08007074

08005d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3b04      	subs	r3, #4
 8005d10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3b04      	subs	r3, #4
 8005d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3b04      	subs	r3, #4
 8005d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d30:	4a0c      	ldr	r2, [pc, #48]	@ (8005d64 <pxPortInitialiseStack+0x64>)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3b14      	subs	r3, #20
 8005d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3b04      	subs	r3, #4
 8005d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f06f 0202 	mvn.w	r2, #2
 8005d4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3b20      	subs	r3, #32
 8005d54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	08005d69 	.word	0x08005d69

08005d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d72:	4b13      	ldr	r3, [pc, #76]	@ (8005dc0 <prvTaskExitError+0x58>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7a:	d00b      	beq.n	8005d94 <prvTaskExitError+0x2c>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60fb      	str	r3, [r7, #12]
}
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <prvTaskExitError+0x28>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60bb      	str	r3, [r7, #8]
}
 8005da6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005da8:	bf00      	nop
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0fc      	beq.n	8005daa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	2000000c 	.word	0x2000000c
	...

08005dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005dd0:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <pxCurrentTCBConst2>)
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	6808      	ldr	r0, [r1, #0]
 8005dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dda:	f380 8809 	msr	PSP, r0
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f380 8811 	msr	BASEPRI, r0
 8005dea:	4770      	bx	lr
 8005dec:	f3af 8000 	nop.w

08005df0 <pxCurrentTCBConst2>:
 8005df0:	20000df4 	.word	0x20000df4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop

08005df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005df8:	4808      	ldr	r0, [pc, #32]	@ (8005e1c <prvPortStartFirstTask+0x24>)
 8005dfa:	6800      	ldr	r0, [r0, #0]
 8005dfc:	6800      	ldr	r0, [r0, #0]
 8005dfe:	f380 8808 	msr	MSP, r0
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f380 8814 	msr	CONTROL, r0
 8005e0a:	b662      	cpsie	i
 8005e0c:	b661      	cpsie	f
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	df00      	svc	0
 8005e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e1a:	bf00      	nop
 8005e1c:	e000ed08 	.word	0xe000ed08

08005e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e26:	4b47      	ldr	r3, [pc, #284]	@ (8005f44 <xPortStartScheduler+0x124>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a47      	ldr	r2, [pc, #284]	@ (8005f48 <xPortStartScheduler+0x128>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d10b      	bne.n	8005e48 <xPortStartScheduler+0x28>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	613b      	str	r3, [r7, #16]
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e48:	4b3e      	ldr	r3, [pc, #248]	@ (8005f44 <xPortStartScheduler+0x124>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f4c <xPortStartScheduler+0x12c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d10b      	bne.n	8005e6a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60fb      	str	r3, [r7, #12]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e6a:	4b39      	ldr	r3, [pc, #228]	@ (8005f50 <xPortStartScheduler+0x130>)
 8005e6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	22ff      	movs	r2, #255	@ 0xff
 8005e7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	4b31      	ldr	r3, [pc, #196]	@ (8005f54 <xPortStartScheduler+0x134>)
 8005e90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e92:	4b31      	ldr	r3, [pc, #196]	@ (8005f58 <xPortStartScheduler+0x138>)
 8005e94:	2207      	movs	r2, #7
 8005e96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e98:	e009      	b.n	8005eae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f58 <xPortStartScheduler+0x138>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f58 <xPortStartScheduler+0x138>)
 8005ea2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb6:	2b80      	cmp	r3, #128	@ 0x80
 8005eb8:	d0ef      	beq.n	8005e9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005eba:	4b27      	ldr	r3, [pc, #156]	@ (8005f58 <xPortStartScheduler+0x138>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1c3 0307 	rsb	r3, r3, #7
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d00b      	beq.n	8005ede <xPortStartScheduler+0xbe>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	60bb      	str	r3, [r7, #8]
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ede:	4b1e      	ldr	r3, [pc, #120]	@ (8005f58 <xPortStartScheduler+0x138>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f58 <xPortStartScheduler+0x138>)
 8005ee6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f58 <xPortStartScheduler+0x138>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ef0:	4a19      	ldr	r2, [pc, #100]	@ (8005f58 <xPortStartScheduler+0x138>)
 8005ef2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005efc:	4b17      	ldr	r3, [pc, #92]	@ (8005f5c <xPortStartScheduler+0x13c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a16      	ldr	r2, [pc, #88]	@ (8005f5c <xPortStartScheduler+0x13c>)
 8005f02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f08:	4b14      	ldr	r3, [pc, #80]	@ (8005f5c <xPortStartScheduler+0x13c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a13      	ldr	r2, [pc, #76]	@ (8005f5c <xPortStartScheduler+0x13c>)
 8005f0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f14:	f000 f8da 	bl	80060cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f18:	4b11      	ldr	r3, [pc, #68]	@ (8005f60 <xPortStartScheduler+0x140>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f1e:	f000 f8f9 	bl	8006114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f22:	4b10      	ldr	r3, [pc, #64]	@ (8005f64 <xPortStartScheduler+0x144>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a0f      	ldr	r2, [pc, #60]	@ (8005f64 <xPortStartScheduler+0x144>)
 8005f28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f2e:	f7ff ff63 	bl	8005df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f32:	f7ff f82b 	bl	8004f8c <vTaskSwitchContext>
	prvTaskExitError();
 8005f36:	f7ff ff17 	bl	8005d68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	e000ed00 	.word	0xe000ed00
 8005f48:	410fc271 	.word	0x410fc271
 8005f4c:	410fc270 	.word	0x410fc270
 8005f50:	e000e400 	.word	0xe000e400
 8005f54:	20001420 	.word	0x20001420
 8005f58:	20001424 	.word	0x20001424
 8005f5c:	e000ed20 	.word	0xe000ed20
 8005f60:	2000000c 	.word	0x2000000c
 8005f64:	e000ef34 	.word	0xe000ef34

08005f68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	607b      	str	r3, [r7, #4]
}
 8005f80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f82:	4b10      	ldr	r3, [pc, #64]	@ (8005fc4 <vPortEnterCritical+0x5c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3301      	adds	r3, #1
 8005f88:	4a0e      	ldr	r2, [pc, #56]	@ (8005fc4 <vPortEnterCritical+0x5c>)
 8005f8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <vPortEnterCritical+0x5c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d110      	bne.n	8005fb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f94:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <vPortEnterCritical+0x60>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	603b      	str	r3, [r7, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <vPortEnterCritical+0x4a>
	}
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	2000000c 	.word	0x2000000c
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fd2:	4b12      	ldr	r3, [pc, #72]	@ (800601c <vPortExitCritical+0x50>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <vPortExitCritical+0x26>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	607b      	str	r3, [r7, #4]
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	e7fd      	b.n	8005fee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <vPortExitCritical+0x50>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	4a08      	ldr	r2, [pc, #32]	@ (800601c <vPortExitCritical+0x50>)
 8005ffa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ffc:	4b07      	ldr	r3, [pc, #28]	@ (800601c <vPortExitCritical+0x50>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <vPortExitCritical+0x44>
 8006004:	2300      	movs	r3, #0
 8006006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f383 8811 	msr	BASEPRI, r3
}
 800600e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	2000000c 	.word	0x2000000c

08006020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006020:	f3ef 8009 	mrs	r0, PSP
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	4b15      	ldr	r3, [pc, #84]	@ (8006080 <pxCurrentTCBConst>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f01e 0f10 	tst.w	lr, #16
 8006030:	bf08      	it	eq
 8006032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	6010      	str	r0, [r2, #0]
 800603c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006044:	f380 8811 	msr	BASEPRI, r0
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f7fe ff9c 	bl	8004f8c <vTaskSwitchContext>
 8006054:	f04f 0000 	mov.w	r0, #0
 8006058:	f380 8811 	msr	BASEPRI, r0
 800605c:	bc09      	pop	{r0, r3}
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	6808      	ldr	r0, [r1, #0]
 8006062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006066:	f01e 0f10 	tst.w	lr, #16
 800606a:	bf08      	it	eq
 800606c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006070:	f380 8809 	msr	PSP, r0
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst>:
 8006080:	20000df4 	.word	0x20000df4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	607b      	str	r3, [r7, #4]
}
 80060a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060a2:	f7fe feb9 	bl	8004e18 <xTaskIncrementTick>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060ac:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <xPortSysTickHandler+0x40>)
 80060ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	2300      	movs	r3, #0
 80060b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f383 8811 	msr	BASEPRI, r3
}
 80060be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <vPortSetupTimerInterrupt+0x34>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006104 <vPortSetupTimerInterrupt+0x38>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <vPortSetupTimerInterrupt+0x3c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a0a      	ldr	r2, [pc, #40]	@ (800610c <vPortSetupTimerInterrupt+0x40>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	099b      	lsrs	r3, r3, #6
 80060e8:	4a09      	ldr	r2, [pc, #36]	@ (8006110 <vPortSetupTimerInterrupt+0x44>)
 80060ea:	3b01      	subs	r3, #1
 80060ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ee:	4b04      	ldr	r3, [pc, #16]	@ (8006100 <vPortSetupTimerInterrupt+0x34>)
 80060f0:	2207      	movs	r2, #7
 80060f2:	601a      	str	r2, [r3, #0]
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	e000e010 	.word	0xe000e010
 8006104:	e000e018 	.word	0xe000e018
 8006108:	20000000 	.word	0x20000000
 800610c:	10624dd3 	.word	0x10624dd3
 8006110:	e000e014 	.word	0xe000e014

08006114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006114:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006124 <vPortEnableVFP+0x10>
 8006118:	6801      	ldr	r1, [r0, #0]
 800611a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800611e:	6001      	str	r1, [r0, #0]
 8006120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006122:	bf00      	nop
 8006124:	e000ed88 	.word	0xe000ed88

08006128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800612e:	f3ef 8305 	mrs	r3, IPSR
 8006132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d915      	bls.n	8006166 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800613a:	4a18      	ldr	r2, [pc, #96]	@ (800619c <vPortValidateInterruptPriority+0x74>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006144:	4b16      	ldr	r3, [pc, #88]	@ (80061a0 <vPortValidateInterruptPriority+0x78>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	7afa      	ldrb	r2, [r7, #11]
 800614a:	429a      	cmp	r2, r3
 800614c:	d20b      	bcs.n	8006166 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	607b      	str	r3, [r7, #4]
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006166:	4b0f      	ldr	r3, [pc, #60]	@ (80061a4 <vPortValidateInterruptPriority+0x7c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800616e:	4b0e      	ldr	r3, [pc, #56]	@ (80061a8 <vPortValidateInterruptPriority+0x80>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d90b      	bls.n	800618e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	603b      	str	r3, [r7, #0]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <vPortValidateInterruptPriority+0x62>
	}
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	e000e3f0 	.word	0xe000e3f0
 80061a0:	20001420 	.word	0x20001420
 80061a4:	e000ed0c 	.word	0xe000ed0c
 80061a8:	20001424 	.word	0x20001424

080061ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	@ 0x28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061b8:	f7fe fd72 	bl	8004ca0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006330 <pvPortMalloc+0x184>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061c4:	f000 f924 	bl	8006410 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006334 <pvPortMalloc+0x188>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f040 8095 	bne.w	8006300 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01e      	beq.n	800621a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061dc:	2208      	movs	r2, #8
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4413      	add	r3, r2
 80061e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d015      	beq.n	800621a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f023 0307 	bic.w	r3, r3, #7
 80061f4:	3308      	adds	r3, #8
 80061f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00b      	beq.n	800621a <pvPortMalloc+0x6e>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	617b      	str	r3, [r7, #20]
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d06f      	beq.n	8006300 <pvPortMalloc+0x154>
 8006220:	4b45      	ldr	r3, [pc, #276]	@ (8006338 <pvPortMalloc+0x18c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	429a      	cmp	r2, r3
 8006228:	d86a      	bhi.n	8006300 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800622a:	4b44      	ldr	r3, [pc, #272]	@ (800633c <pvPortMalloc+0x190>)
 800622c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800622e:	4b43      	ldr	r3, [pc, #268]	@ (800633c <pvPortMalloc+0x190>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006234:	e004      	b.n	8006240 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d903      	bls.n	8006252 <pvPortMalloc+0xa6>
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f1      	bne.n	8006236 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006252:	4b37      	ldr	r3, [pc, #220]	@ (8006330 <pvPortMalloc+0x184>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006258:	429a      	cmp	r2, r3
 800625a:	d051      	beq.n	8006300 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2208      	movs	r2, #8
 8006262:	4413      	add	r3, r2
 8006264:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	1ad2      	subs	r2, r2, r3
 8006276:	2308      	movs	r3, #8
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	429a      	cmp	r2, r3
 800627c:	d920      	bls.n	80062c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800627e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4413      	add	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <pvPortMalloc+0xfc>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	613b      	str	r3, [r7, #16]
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	1ad2      	subs	r2, r2, r3
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062ba:	69b8      	ldr	r0, [r7, #24]
 80062bc:	f000 f90a 	bl	80064d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006338 <pvPortMalloc+0x18c>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006338 <pvPortMalloc+0x18c>)
 80062cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006338 <pvPortMalloc+0x18c>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006340 <pvPortMalloc+0x194>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d203      	bcs.n	80062e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062da:	4b17      	ldr	r3, [pc, #92]	@ (8006338 <pvPortMalloc+0x18c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a18      	ldr	r2, [pc, #96]	@ (8006340 <pvPortMalloc+0x194>)
 80062e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	4b13      	ldr	r3, [pc, #76]	@ (8006334 <pvPortMalloc+0x188>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062f6:	4b13      	ldr	r3, [pc, #76]	@ (8006344 <pvPortMalloc+0x198>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	4a11      	ldr	r2, [pc, #68]	@ (8006344 <pvPortMalloc+0x198>)
 80062fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006300:	f7fe fcdc 	bl	8004cbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <pvPortMalloc+0x17a>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	60fb      	str	r3, [r7, #12]
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	e7fd      	b.n	8006322 <pvPortMalloc+0x176>
	return pvReturn;
 8006326:	69fb      	ldr	r3, [r7, #28]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3728      	adds	r7, #40	@ 0x28
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20001fe8 	.word	0x20001fe8
 8006334:	20001ffc 	.word	0x20001ffc
 8006338:	20001fec 	.word	0x20001fec
 800633c:	20001fe0 	.word	0x20001fe0
 8006340:	20001ff0 	.word	0x20001ff0
 8006344:	20001ff4 	.word	0x20001ff4

08006348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d04f      	beq.n	80063fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800635a:	2308      	movs	r3, #8
 800635c:	425b      	negs	r3, r3
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4413      	add	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	4b25      	ldr	r3, [pc, #148]	@ (8006404 <vPortFree+0xbc>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4013      	ands	r3, r2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10b      	bne.n	800638e <vPortFree+0x46>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	60fb      	str	r3, [r7, #12]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <vPortFree+0x66>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	60bb      	str	r3, [r7, #8]
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	e7fd      	b.n	80063aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	4b14      	ldr	r3, [pc, #80]	@ (8006404 <vPortFree+0xbc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01e      	beq.n	80063fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11a      	bne.n	80063fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006404 <vPortFree+0xbc>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	401a      	ands	r2, r3
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063d4:	f7fe fc64 	bl	8004ca0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006408 <vPortFree+0xc0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4413      	add	r3, r2
 80063e2:	4a09      	ldr	r2, [pc, #36]	@ (8006408 <vPortFree+0xc0>)
 80063e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063e6:	6938      	ldr	r0, [r7, #16]
 80063e8:	f000 f874 	bl	80064d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063ec:	4b07      	ldr	r3, [pc, #28]	@ (800640c <vPortFree+0xc4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	4a06      	ldr	r2, [pc, #24]	@ (800640c <vPortFree+0xc4>)
 80063f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063f6:	f7fe fc61 	bl	8004cbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063fa:	bf00      	nop
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20001ffc 	.word	0x20001ffc
 8006408:	20001fec 	.word	0x20001fec
 800640c:	20001ff8 	.word	0x20001ff8

08006410 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006416:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800641a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800641c:	4b27      	ldr	r3, [pc, #156]	@ (80064bc <prvHeapInit+0xac>)
 800641e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3307      	adds	r3, #7
 800642e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0307 	bic.w	r3, r3, #7
 8006436:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	4a1f      	ldr	r2, [pc, #124]	@ (80064bc <prvHeapInit+0xac>)
 8006440:	4413      	add	r3, r2
 8006442:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006448:	4a1d      	ldr	r2, [pc, #116]	@ (80064c0 <prvHeapInit+0xb0>)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800644e:	4b1c      	ldr	r3, [pc, #112]	@ (80064c0 <prvHeapInit+0xb0>)
 8006450:	2200      	movs	r2, #0
 8006452:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	4413      	add	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800645c:	2208      	movs	r2, #8
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0307 	bic.w	r3, r3, #7
 800646a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4a15      	ldr	r2, [pc, #84]	@ (80064c4 <prvHeapInit+0xb4>)
 8006470:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006472:	4b14      	ldr	r3, [pc, #80]	@ (80064c4 <prvHeapInit+0xb4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800647a:	4b12      	ldr	r3, [pc, #72]	@ (80064c4 <prvHeapInit+0xb4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	1ad2      	subs	r2, r2, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006490:	4b0c      	ldr	r3, [pc, #48]	@ (80064c4 <prvHeapInit+0xb4>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a0a      	ldr	r2, [pc, #40]	@ (80064c8 <prvHeapInit+0xb8>)
 800649e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4a09      	ldr	r2, [pc, #36]	@ (80064cc <prvHeapInit+0xbc>)
 80064a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064a8:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <prvHeapInit+0xc0>)
 80064aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064ae:	601a      	str	r2, [r3, #0]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	20001428 	.word	0x20001428
 80064c0:	20001fe0 	.word	0x20001fe0
 80064c4:	20001fe8 	.word	0x20001fe8
 80064c8:	20001ff0 	.word	0x20001ff0
 80064cc:	20001fec 	.word	0x20001fec
 80064d0:	20001ffc 	.word	0x20001ffc

080064d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064dc:	4b28      	ldr	r3, [pc, #160]	@ (8006580 <prvInsertBlockIntoFreeList+0xac>)
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	e002      	b.n	80064e8 <prvInsertBlockIntoFreeList+0x14>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d8f7      	bhi.n	80064e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	429a      	cmp	r2, r3
 8006502:	d108      	bne.n	8006516 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	441a      	add	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	441a      	add	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d118      	bne.n	800655c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b15      	ldr	r3, [pc, #84]	@ (8006584 <prvInsertBlockIntoFreeList+0xb0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d00d      	beq.n	8006552 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	441a      	add	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	e008      	b.n	8006564 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006552:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <prvInsertBlockIntoFreeList+0xb0>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	e003      	b.n	8006564 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	429a      	cmp	r2, r3
 800656a:	d002      	beq.n	8006572 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20001fe0 	.word	0x20001fe0
 8006584:	20001fe8 	.word	0x20001fe8

08006588 <sniprintf>:
 8006588:	b40c      	push	{r2, r3}
 800658a:	b530      	push	{r4, r5, lr}
 800658c:	4b17      	ldr	r3, [pc, #92]	@ (80065ec <sniprintf+0x64>)
 800658e:	1e0c      	subs	r4, r1, #0
 8006590:	681d      	ldr	r5, [r3, #0]
 8006592:	b09d      	sub	sp, #116	@ 0x74
 8006594:	da08      	bge.n	80065a8 <sniprintf+0x20>
 8006596:	238b      	movs	r3, #139	@ 0x8b
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	f04f 30ff 	mov.w	r0, #4294967295
 800659e:	b01d      	add	sp, #116	@ 0x74
 80065a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065a4:	b002      	add	sp, #8
 80065a6:	4770      	bx	lr
 80065a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80065ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80065b0:	bf14      	ite	ne
 80065b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80065b6:	4623      	moveq	r3, r4
 80065b8:	9304      	str	r3, [sp, #16]
 80065ba:	9307      	str	r3, [sp, #28]
 80065bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065c0:	9002      	str	r0, [sp, #8]
 80065c2:	9006      	str	r0, [sp, #24]
 80065c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80065ca:	ab21      	add	r3, sp, #132	@ 0x84
 80065cc:	a902      	add	r1, sp, #8
 80065ce:	4628      	mov	r0, r5
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	f000 fa19 	bl	8006a08 <_svfiprintf_r>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	bfbc      	itt	lt
 80065da:	238b      	movlt	r3, #139	@ 0x8b
 80065dc:	602b      	strlt	r3, [r5, #0]
 80065de:	2c00      	cmp	r4, #0
 80065e0:	d0dd      	beq.n	800659e <sniprintf+0x16>
 80065e2:	9b02      	ldr	r3, [sp, #8]
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e7d9      	b.n	800659e <sniprintf+0x16>
 80065ea:	bf00      	nop
 80065ec:	20000010 	.word	0x20000010

080065f0 <siprintf>:
 80065f0:	b40e      	push	{r1, r2, r3}
 80065f2:	b500      	push	{lr}
 80065f4:	b09c      	sub	sp, #112	@ 0x70
 80065f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80065f8:	9002      	str	r0, [sp, #8]
 80065fa:	9006      	str	r0, [sp, #24]
 80065fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006600:	4809      	ldr	r0, [pc, #36]	@ (8006628 <siprintf+0x38>)
 8006602:	9107      	str	r1, [sp, #28]
 8006604:	9104      	str	r1, [sp, #16]
 8006606:	4909      	ldr	r1, [pc, #36]	@ (800662c <siprintf+0x3c>)
 8006608:	f853 2b04 	ldr.w	r2, [r3], #4
 800660c:	9105      	str	r1, [sp, #20]
 800660e:	6800      	ldr	r0, [r0, #0]
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	a902      	add	r1, sp, #8
 8006614:	f000 f9f8 	bl	8006a08 <_svfiprintf_r>
 8006618:	9b02      	ldr	r3, [sp, #8]
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	b01c      	add	sp, #112	@ 0x70
 8006620:	f85d eb04 	ldr.w	lr, [sp], #4
 8006624:	b003      	add	sp, #12
 8006626:	4770      	bx	lr
 8006628:	20000010 	.word	0x20000010
 800662c:	ffff0208 	.word	0xffff0208

08006630 <memset>:
 8006630:	4402      	add	r2, r0
 8006632:	4603      	mov	r3, r0
 8006634:	4293      	cmp	r3, r2
 8006636:	d100      	bne.n	800663a <memset+0xa>
 8006638:	4770      	bx	lr
 800663a:	f803 1b01 	strb.w	r1, [r3], #1
 800663e:	e7f9      	b.n	8006634 <memset+0x4>

08006640 <_reclaim_reent>:
 8006640:	4b29      	ldr	r3, [pc, #164]	@ (80066e8 <_reclaim_reent+0xa8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4283      	cmp	r3, r0
 8006646:	b570      	push	{r4, r5, r6, lr}
 8006648:	4604      	mov	r4, r0
 800664a:	d04b      	beq.n	80066e4 <_reclaim_reent+0xa4>
 800664c:	69c3      	ldr	r3, [r0, #28]
 800664e:	b1ab      	cbz	r3, 800667c <_reclaim_reent+0x3c>
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	b16b      	cbz	r3, 8006670 <_reclaim_reent+0x30>
 8006654:	2500      	movs	r5, #0
 8006656:	69e3      	ldr	r3, [r4, #28]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	5959      	ldr	r1, [r3, r5]
 800665c:	2900      	cmp	r1, #0
 800665e:	d13b      	bne.n	80066d8 <_reclaim_reent+0x98>
 8006660:	3504      	adds	r5, #4
 8006662:	2d80      	cmp	r5, #128	@ 0x80
 8006664:	d1f7      	bne.n	8006656 <_reclaim_reent+0x16>
 8006666:	69e3      	ldr	r3, [r4, #28]
 8006668:	4620      	mov	r0, r4
 800666a:	68d9      	ldr	r1, [r3, #12]
 800666c:	f000 f878 	bl	8006760 <_free_r>
 8006670:	69e3      	ldr	r3, [r4, #28]
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	b111      	cbz	r1, 800667c <_reclaim_reent+0x3c>
 8006676:	4620      	mov	r0, r4
 8006678:	f000 f872 	bl	8006760 <_free_r>
 800667c:	6961      	ldr	r1, [r4, #20]
 800667e:	b111      	cbz	r1, 8006686 <_reclaim_reent+0x46>
 8006680:	4620      	mov	r0, r4
 8006682:	f000 f86d 	bl	8006760 <_free_r>
 8006686:	69e1      	ldr	r1, [r4, #28]
 8006688:	b111      	cbz	r1, 8006690 <_reclaim_reent+0x50>
 800668a:	4620      	mov	r0, r4
 800668c:	f000 f868 	bl	8006760 <_free_r>
 8006690:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006692:	b111      	cbz	r1, 800669a <_reclaim_reent+0x5a>
 8006694:	4620      	mov	r0, r4
 8006696:	f000 f863 	bl	8006760 <_free_r>
 800669a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800669c:	b111      	cbz	r1, 80066a4 <_reclaim_reent+0x64>
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 f85e 	bl	8006760 <_free_r>
 80066a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80066a6:	b111      	cbz	r1, 80066ae <_reclaim_reent+0x6e>
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 f859 	bl	8006760 <_free_r>
 80066ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80066b0:	b111      	cbz	r1, 80066b8 <_reclaim_reent+0x78>
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 f854 	bl	8006760 <_free_r>
 80066b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80066ba:	b111      	cbz	r1, 80066c2 <_reclaim_reent+0x82>
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 f84f 	bl	8006760 <_free_r>
 80066c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80066c4:	b111      	cbz	r1, 80066cc <_reclaim_reent+0x8c>
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 f84a 	bl	8006760 <_free_r>
 80066cc:	6a23      	ldr	r3, [r4, #32]
 80066ce:	b14b      	cbz	r3, 80066e4 <_reclaim_reent+0xa4>
 80066d0:	4620      	mov	r0, r4
 80066d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066d6:	4718      	bx	r3
 80066d8:	680e      	ldr	r6, [r1, #0]
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 f840 	bl	8006760 <_free_r>
 80066e0:	4631      	mov	r1, r6
 80066e2:	e7bb      	b.n	800665c <_reclaim_reent+0x1c>
 80066e4:	bd70      	pop	{r4, r5, r6, pc}
 80066e6:	bf00      	nop
 80066e8:	20000010 	.word	0x20000010

080066ec <__errno>:
 80066ec:	4b01      	ldr	r3, [pc, #4]	@ (80066f4 <__errno+0x8>)
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000010 	.word	0x20000010

080066f8 <__libc_init_array>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006730 <__libc_init_array+0x38>)
 80066fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006734 <__libc_init_array+0x3c>)
 80066fe:	1b64      	subs	r4, r4, r5
 8006700:	10a4      	asrs	r4, r4, #2
 8006702:	2600      	movs	r6, #0
 8006704:	42a6      	cmp	r6, r4
 8006706:	d109      	bne.n	800671c <__libc_init_array+0x24>
 8006708:	4d0b      	ldr	r5, [pc, #44]	@ (8006738 <__libc_init_array+0x40>)
 800670a:	4c0c      	ldr	r4, [pc, #48]	@ (800673c <__libc_init_array+0x44>)
 800670c:	f000 fc66 	bl	8006fdc <_init>
 8006710:	1b64      	subs	r4, r4, r5
 8006712:	10a4      	asrs	r4, r4, #2
 8006714:	2600      	movs	r6, #0
 8006716:	42a6      	cmp	r6, r4
 8006718:	d105      	bne.n	8006726 <__libc_init_array+0x2e>
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006720:	4798      	blx	r3
 8006722:	3601      	adds	r6, #1
 8006724:	e7ee      	b.n	8006704 <__libc_init_array+0xc>
 8006726:	f855 3b04 	ldr.w	r3, [r5], #4
 800672a:	4798      	blx	r3
 800672c:	3601      	adds	r6, #1
 800672e:	e7f2      	b.n	8006716 <__libc_init_array+0x1e>
 8006730:	08007148 	.word	0x08007148
 8006734:	08007148 	.word	0x08007148
 8006738:	08007148 	.word	0x08007148
 800673c:	0800714c 	.word	0x0800714c

08006740 <__retarget_lock_acquire_recursive>:
 8006740:	4770      	bx	lr

08006742 <__retarget_lock_release_recursive>:
 8006742:	4770      	bx	lr

08006744 <memcpy>:
 8006744:	440a      	add	r2, r1
 8006746:	4291      	cmp	r1, r2
 8006748:	f100 33ff 	add.w	r3, r0, #4294967295
 800674c:	d100      	bne.n	8006750 <memcpy+0xc>
 800674e:	4770      	bx	lr
 8006750:	b510      	push	{r4, lr}
 8006752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800675a:	4291      	cmp	r1, r2
 800675c:	d1f9      	bne.n	8006752 <memcpy+0xe>
 800675e:	bd10      	pop	{r4, pc}

08006760 <_free_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4605      	mov	r5, r0
 8006764:	2900      	cmp	r1, #0
 8006766:	d041      	beq.n	80067ec <_free_r+0x8c>
 8006768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676c:	1f0c      	subs	r4, r1, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	bfb8      	it	lt
 8006772:	18e4      	addlt	r4, r4, r3
 8006774:	f000 f8e0 	bl	8006938 <__malloc_lock>
 8006778:	4a1d      	ldr	r2, [pc, #116]	@ (80067f0 <_free_r+0x90>)
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	b933      	cbnz	r3, 800678c <_free_r+0x2c>
 800677e:	6063      	str	r3, [r4, #4]
 8006780:	6014      	str	r4, [r2, #0]
 8006782:	4628      	mov	r0, r5
 8006784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006788:	f000 b8dc 	b.w	8006944 <__malloc_unlock>
 800678c:	42a3      	cmp	r3, r4
 800678e:	d908      	bls.n	80067a2 <_free_r+0x42>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	1821      	adds	r1, r4, r0
 8006794:	428b      	cmp	r3, r1
 8006796:	bf01      	itttt	eq
 8006798:	6819      	ldreq	r1, [r3, #0]
 800679a:	685b      	ldreq	r3, [r3, #4]
 800679c:	1809      	addeq	r1, r1, r0
 800679e:	6021      	streq	r1, [r4, #0]
 80067a0:	e7ed      	b.n	800677e <_free_r+0x1e>
 80067a2:	461a      	mov	r2, r3
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	b10b      	cbz	r3, 80067ac <_free_r+0x4c>
 80067a8:	42a3      	cmp	r3, r4
 80067aa:	d9fa      	bls.n	80067a2 <_free_r+0x42>
 80067ac:	6811      	ldr	r1, [r2, #0]
 80067ae:	1850      	adds	r0, r2, r1
 80067b0:	42a0      	cmp	r0, r4
 80067b2:	d10b      	bne.n	80067cc <_free_r+0x6c>
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	4401      	add	r1, r0
 80067b8:	1850      	adds	r0, r2, r1
 80067ba:	4283      	cmp	r3, r0
 80067bc:	6011      	str	r1, [r2, #0]
 80067be:	d1e0      	bne.n	8006782 <_free_r+0x22>
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	6053      	str	r3, [r2, #4]
 80067c6:	4408      	add	r0, r1
 80067c8:	6010      	str	r0, [r2, #0]
 80067ca:	e7da      	b.n	8006782 <_free_r+0x22>
 80067cc:	d902      	bls.n	80067d4 <_free_r+0x74>
 80067ce:	230c      	movs	r3, #12
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	e7d6      	b.n	8006782 <_free_r+0x22>
 80067d4:	6820      	ldr	r0, [r4, #0]
 80067d6:	1821      	adds	r1, r4, r0
 80067d8:	428b      	cmp	r3, r1
 80067da:	bf04      	itt	eq
 80067dc:	6819      	ldreq	r1, [r3, #0]
 80067de:	685b      	ldreq	r3, [r3, #4]
 80067e0:	6063      	str	r3, [r4, #4]
 80067e2:	bf04      	itt	eq
 80067e4:	1809      	addeq	r1, r1, r0
 80067e6:	6021      	streq	r1, [r4, #0]
 80067e8:	6054      	str	r4, [r2, #4]
 80067ea:	e7ca      	b.n	8006782 <_free_r+0x22>
 80067ec:	bd38      	pop	{r3, r4, r5, pc}
 80067ee:	bf00      	nop
 80067f0:	20002144 	.word	0x20002144

080067f4 <sbrk_aligned>:
 80067f4:	b570      	push	{r4, r5, r6, lr}
 80067f6:	4e0f      	ldr	r6, [pc, #60]	@ (8006834 <sbrk_aligned+0x40>)
 80067f8:	460c      	mov	r4, r1
 80067fa:	6831      	ldr	r1, [r6, #0]
 80067fc:	4605      	mov	r5, r0
 80067fe:	b911      	cbnz	r1, 8006806 <sbrk_aligned+0x12>
 8006800:	f000 fba6 	bl	8006f50 <_sbrk_r>
 8006804:	6030      	str	r0, [r6, #0]
 8006806:	4621      	mov	r1, r4
 8006808:	4628      	mov	r0, r5
 800680a:	f000 fba1 	bl	8006f50 <_sbrk_r>
 800680e:	1c43      	adds	r3, r0, #1
 8006810:	d103      	bne.n	800681a <sbrk_aligned+0x26>
 8006812:	f04f 34ff 	mov.w	r4, #4294967295
 8006816:	4620      	mov	r0, r4
 8006818:	bd70      	pop	{r4, r5, r6, pc}
 800681a:	1cc4      	adds	r4, r0, #3
 800681c:	f024 0403 	bic.w	r4, r4, #3
 8006820:	42a0      	cmp	r0, r4
 8006822:	d0f8      	beq.n	8006816 <sbrk_aligned+0x22>
 8006824:	1a21      	subs	r1, r4, r0
 8006826:	4628      	mov	r0, r5
 8006828:	f000 fb92 	bl	8006f50 <_sbrk_r>
 800682c:	3001      	adds	r0, #1
 800682e:	d1f2      	bne.n	8006816 <sbrk_aligned+0x22>
 8006830:	e7ef      	b.n	8006812 <sbrk_aligned+0x1e>
 8006832:	bf00      	nop
 8006834:	20002140 	.word	0x20002140

08006838 <_malloc_r>:
 8006838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800683c:	1ccd      	adds	r5, r1, #3
 800683e:	f025 0503 	bic.w	r5, r5, #3
 8006842:	3508      	adds	r5, #8
 8006844:	2d0c      	cmp	r5, #12
 8006846:	bf38      	it	cc
 8006848:	250c      	movcc	r5, #12
 800684a:	2d00      	cmp	r5, #0
 800684c:	4606      	mov	r6, r0
 800684e:	db01      	blt.n	8006854 <_malloc_r+0x1c>
 8006850:	42a9      	cmp	r1, r5
 8006852:	d904      	bls.n	800685e <_malloc_r+0x26>
 8006854:	230c      	movs	r3, #12
 8006856:	6033      	str	r3, [r6, #0]
 8006858:	2000      	movs	r0, #0
 800685a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006934 <_malloc_r+0xfc>
 8006862:	f000 f869 	bl	8006938 <__malloc_lock>
 8006866:	f8d8 3000 	ldr.w	r3, [r8]
 800686a:	461c      	mov	r4, r3
 800686c:	bb44      	cbnz	r4, 80068c0 <_malloc_r+0x88>
 800686e:	4629      	mov	r1, r5
 8006870:	4630      	mov	r0, r6
 8006872:	f7ff ffbf 	bl	80067f4 <sbrk_aligned>
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	4604      	mov	r4, r0
 800687a:	d158      	bne.n	800692e <_malloc_r+0xf6>
 800687c:	f8d8 4000 	ldr.w	r4, [r8]
 8006880:	4627      	mov	r7, r4
 8006882:	2f00      	cmp	r7, #0
 8006884:	d143      	bne.n	800690e <_malloc_r+0xd6>
 8006886:	2c00      	cmp	r4, #0
 8006888:	d04b      	beq.n	8006922 <_malloc_r+0xea>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	4639      	mov	r1, r7
 800688e:	4630      	mov	r0, r6
 8006890:	eb04 0903 	add.w	r9, r4, r3
 8006894:	f000 fb5c 	bl	8006f50 <_sbrk_r>
 8006898:	4581      	cmp	r9, r0
 800689a:	d142      	bne.n	8006922 <_malloc_r+0xea>
 800689c:	6821      	ldr	r1, [r4, #0]
 800689e:	1a6d      	subs	r5, r5, r1
 80068a0:	4629      	mov	r1, r5
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7ff ffa6 	bl	80067f4 <sbrk_aligned>
 80068a8:	3001      	adds	r0, #1
 80068aa:	d03a      	beq.n	8006922 <_malloc_r+0xea>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	442b      	add	r3, r5
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	f8d8 3000 	ldr.w	r3, [r8]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	bb62      	cbnz	r2, 8006914 <_malloc_r+0xdc>
 80068ba:	f8c8 7000 	str.w	r7, [r8]
 80068be:	e00f      	b.n	80068e0 <_malloc_r+0xa8>
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	1b52      	subs	r2, r2, r5
 80068c4:	d420      	bmi.n	8006908 <_malloc_r+0xd0>
 80068c6:	2a0b      	cmp	r2, #11
 80068c8:	d917      	bls.n	80068fa <_malloc_r+0xc2>
 80068ca:	1961      	adds	r1, r4, r5
 80068cc:	42a3      	cmp	r3, r4
 80068ce:	6025      	str	r5, [r4, #0]
 80068d0:	bf18      	it	ne
 80068d2:	6059      	strne	r1, [r3, #4]
 80068d4:	6863      	ldr	r3, [r4, #4]
 80068d6:	bf08      	it	eq
 80068d8:	f8c8 1000 	streq.w	r1, [r8]
 80068dc:	5162      	str	r2, [r4, r5]
 80068de:	604b      	str	r3, [r1, #4]
 80068e0:	4630      	mov	r0, r6
 80068e2:	f000 f82f 	bl	8006944 <__malloc_unlock>
 80068e6:	f104 000b 	add.w	r0, r4, #11
 80068ea:	1d23      	adds	r3, r4, #4
 80068ec:	f020 0007 	bic.w	r0, r0, #7
 80068f0:	1ac2      	subs	r2, r0, r3
 80068f2:	bf1c      	itt	ne
 80068f4:	1a1b      	subne	r3, r3, r0
 80068f6:	50a3      	strne	r3, [r4, r2]
 80068f8:	e7af      	b.n	800685a <_malloc_r+0x22>
 80068fa:	6862      	ldr	r2, [r4, #4]
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	bf0c      	ite	eq
 8006900:	f8c8 2000 	streq.w	r2, [r8]
 8006904:	605a      	strne	r2, [r3, #4]
 8006906:	e7eb      	b.n	80068e0 <_malloc_r+0xa8>
 8006908:	4623      	mov	r3, r4
 800690a:	6864      	ldr	r4, [r4, #4]
 800690c:	e7ae      	b.n	800686c <_malloc_r+0x34>
 800690e:	463c      	mov	r4, r7
 8006910:	687f      	ldr	r7, [r7, #4]
 8006912:	e7b6      	b.n	8006882 <_malloc_r+0x4a>
 8006914:	461a      	mov	r2, r3
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	42a3      	cmp	r3, r4
 800691a:	d1fb      	bne.n	8006914 <_malloc_r+0xdc>
 800691c:	2300      	movs	r3, #0
 800691e:	6053      	str	r3, [r2, #4]
 8006920:	e7de      	b.n	80068e0 <_malloc_r+0xa8>
 8006922:	230c      	movs	r3, #12
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	4630      	mov	r0, r6
 8006928:	f000 f80c 	bl	8006944 <__malloc_unlock>
 800692c:	e794      	b.n	8006858 <_malloc_r+0x20>
 800692e:	6005      	str	r5, [r0, #0]
 8006930:	e7d6      	b.n	80068e0 <_malloc_r+0xa8>
 8006932:	bf00      	nop
 8006934:	20002144 	.word	0x20002144

08006938 <__malloc_lock>:
 8006938:	4801      	ldr	r0, [pc, #4]	@ (8006940 <__malloc_lock+0x8>)
 800693a:	f7ff bf01 	b.w	8006740 <__retarget_lock_acquire_recursive>
 800693e:	bf00      	nop
 8006940:	2000213c 	.word	0x2000213c

08006944 <__malloc_unlock>:
 8006944:	4801      	ldr	r0, [pc, #4]	@ (800694c <__malloc_unlock+0x8>)
 8006946:	f7ff befc 	b.w	8006742 <__retarget_lock_release_recursive>
 800694a:	bf00      	nop
 800694c:	2000213c 	.word	0x2000213c

08006950 <__ssputs_r>:
 8006950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	688e      	ldr	r6, [r1, #8]
 8006956:	461f      	mov	r7, r3
 8006958:	42be      	cmp	r6, r7
 800695a:	680b      	ldr	r3, [r1, #0]
 800695c:	4682      	mov	sl, r0
 800695e:	460c      	mov	r4, r1
 8006960:	4690      	mov	r8, r2
 8006962:	d82d      	bhi.n	80069c0 <__ssputs_r+0x70>
 8006964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006968:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800696c:	d026      	beq.n	80069bc <__ssputs_r+0x6c>
 800696e:	6965      	ldr	r5, [r4, #20]
 8006970:	6909      	ldr	r1, [r1, #16]
 8006972:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006976:	eba3 0901 	sub.w	r9, r3, r1
 800697a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800697e:	1c7b      	adds	r3, r7, #1
 8006980:	444b      	add	r3, r9
 8006982:	106d      	asrs	r5, r5, #1
 8006984:	429d      	cmp	r5, r3
 8006986:	bf38      	it	cc
 8006988:	461d      	movcc	r5, r3
 800698a:	0553      	lsls	r3, r2, #21
 800698c:	d527      	bpl.n	80069de <__ssputs_r+0x8e>
 800698e:	4629      	mov	r1, r5
 8006990:	f7ff ff52 	bl	8006838 <_malloc_r>
 8006994:	4606      	mov	r6, r0
 8006996:	b360      	cbz	r0, 80069f2 <__ssputs_r+0xa2>
 8006998:	6921      	ldr	r1, [r4, #16]
 800699a:	464a      	mov	r2, r9
 800699c:	f7ff fed2 	bl	8006744 <memcpy>
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80069a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069aa:	81a3      	strh	r3, [r4, #12]
 80069ac:	6126      	str	r6, [r4, #16]
 80069ae:	6165      	str	r5, [r4, #20]
 80069b0:	444e      	add	r6, r9
 80069b2:	eba5 0509 	sub.w	r5, r5, r9
 80069b6:	6026      	str	r6, [r4, #0]
 80069b8:	60a5      	str	r5, [r4, #8]
 80069ba:	463e      	mov	r6, r7
 80069bc:	42be      	cmp	r6, r7
 80069be:	d900      	bls.n	80069c2 <__ssputs_r+0x72>
 80069c0:	463e      	mov	r6, r7
 80069c2:	6820      	ldr	r0, [r4, #0]
 80069c4:	4632      	mov	r2, r6
 80069c6:	4641      	mov	r1, r8
 80069c8:	f000 faa8 	bl	8006f1c <memmove>
 80069cc:	68a3      	ldr	r3, [r4, #8]
 80069ce:	1b9b      	subs	r3, r3, r6
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	4433      	add	r3, r6
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	2000      	movs	r0, #0
 80069da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069de:	462a      	mov	r2, r5
 80069e0:	f000 fac6 	bl	8006f70 <_realloc_r>
 80069e4:	4606      	mov	r6, r0
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d1e0      	bne.n	80069ac <__ssputs_r+0x5c>
 80069ea:	6921      	ldr	r1, [r4, #16]
 80069ec:	4650      	mov	r0, sl
 80069ee:	f7ff feb7 	bl	8006760 <_free_r>
 80069f2:	230c      	movs	r3, #12
 80069f4:	f8ca 3000 	str.w	r3, [sl]
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	e7e9      	b.n	80069da <__ssputs_r+0x8a>
	...

08006a08 <_svfiprintf_r>:
 8006a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	4698      	mov	r8, r3
 8006a0e:	898b      	ldrh	r3, [r1, #12]
 8006a10:	061b      	lsls	r3, r3, #24
 8006a12:	b09d      	sub	sp, #116	@ 0x74
 8006a14:	4607      	mov	r7, r0
 8006a16:	460d      	mov	r5, r1
 8006a18:	4614      	mov	r4, r2
 8006a1a:	d510      	bpl.n	8006a3e <_svfiprintf_r+0x36>
 8006a1c:	690b      	ldr	r3, [r1, #16]
 8006a1e:	b973      	cbnz	r3, 8006a3e <_svfiprintf_r+0x36>
 8006a20:	2140      	movs	r1, #64	@ 0x40
 8006a22:	f7ff ff09 	bl	8006838 <_malloc_r>
 8006a26:	6028      	str	r0, [r5, #0]
 8006a28:	6128      	str	r0, [r5, #16]
 8006a2a:	b930      	cbnz	r0, 8006a3a <_svfiprintf_r+0x32>
 8006a2c:	230c      	movs	r3, #12
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	b01d      	add	sp, #116	@ 0x74
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	2340      	movs	r3, #64	@ 0x40
 8006a3c:	616b      	str	r3, [r5, #20]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a42:	2320      	movs	r3, #32
 8006a44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a4c:	2330      	movs	r3, #48	@ 0x30
 8006a4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006bec <_svfiprintf_r+0x1e4>
 8006a52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a56:	f04f 0901 	mov.w	r9, #1
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	469a      	mov	sl, r3
 8006a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a62:	b10a      	cbz	r2, 8006a68 <_svfiprintf_r+0x60>
 8006a64:	2a25      	cmp	r2, #37	@ 0x25
 8006a66:	d1f9      	bne.n	8006a5c <_svfiprintf_r+0x54>
 8006a68:	ebba 0b04 	subs.w	fp, sl, r4
 8006a6c:	d00b      	beq.n	8006a86 <_svfiprintf_r+0x7e>
 8006a6e:	465b      	mov	r3, fp
 8006a70:	4622      	mov	r2, r4
 8006a72:	4629      	mov	r1, r5
 8006a74:	4638      	mov	r0, r7
 8006a76:	f7ff ff6b 	bl	8006950 <__ssputs_r>
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	f000 80a7 	beq.w	8006bce <_svfiprintf_r+0x1c6>
 8006a80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a82:	445a      	add	r2, fp
 8006a84:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a86:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 809f 	beq.w	8006bce <_svfiprintf_r+0x1c6>
 8006a90:	2300      	movs	r3, #0
 8006a92:	f04f 32ff 	mov.w	r2, #4294967295
 8006a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a9a:	f10a 0a01 	add.w	sl, sl, #1
 8006a9e:	9304      	str	r3, [sp, #16]
 8006aa0:	9307      	str	r3, [sp, #28]
 8006aa2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006aa6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006aa8:	4654      	mov	r4, sl
 8006aaa:	2205      	movs	r2, #5
 8006aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab0:	484e      	ldr	r0, [pc, #312]	@ (8006bec <_svfiprintf_r+0x1e4>)
 8006ab2:	f7f9 fb95 	bl	80001e0 <memchr>
 8006ab6:	9a04      	ldr	r2, [sp, #16]
 8006ab8:	b9d8      	cbnz	r0, 8006af2 <_svfiprintf_r+0xea>
 8006aba:	06d0      	lsls	r0, r2, #27
 8006abc:	bf44      	itt	mi
 8006abe:	2320      	movmi	r3, #32
 8006ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ac4:	0711      	lsls	r1, r2, #28
 8006ac6:	bf44      	itt	mi
 8006ac8:	232b      	movmi	r3, #43	@ 0x2b
 8006aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ace:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ad4:	d015      	beq.n	8006b02 <_svfiprintf_r+0xfa>
 8006ad6:	9a07      	ldr	r2, [sp, #28]
 8006ad8:	4654      	mov	r4, sl
 8006ada:	2000      	movs	r0, #0
 8006adc:	f04f 0c0a 	mov.w	ip, #10
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ae6:	3b30      	subs	r3, #48	@ 0x30
 8006ae8:	2b09      	cmp	r3, #9
 8006aea:	d94b      	bls.n	8006b84 <_svfiprintf_r+0x17c>
 8006aec:	b1b0      	cbz	r0, 8006b1c <_svfiprintf_r+0x114>
 8006aee:	9207      	str	r2, [sp, #28]
 8006af0:	e014      	b.n	8006b1c <_svfiprintf_r+0x114>
 8006af2:	eba0 0308 	sub.w	r3, r0, r8
 8006af6:	fa09 f303 	lsl.w	r3, r9, r3
 8006afa:	4313      	orrs	r3, r2
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	46a2      	mov	sl, r4
 8006b00:	e7d2      	b.n	8006aa8 <_svfiprintf_r+0xa0>
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	1d19      	adds	r1, r3, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	9103      	str	r1, [sp, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfbb      	ittet	lt
 8006b0e:	425b      	neglt	r3, r3
 8006b10:	f042 0202 	orrlt.w	r2, r2, #2
 8006b14:	9307      	strge	r3, [sp, #28]
 8006b16:	9307      	strlt	r3, [sp, #28]
 8006b18:	bfb8      	it	lt
 8006b1a:	9204      	strlt	r2, [sp, #16]
 8006b1c:	7823      	ldrb	r3, [r4, #0]
 8006b1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b20:	d10a      	bne.n	8006b38 <_svfiprintf_r+0x130>
 8006b22:	7863      	ldrb	r3, [r4, #1]
 8006b24:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b26:	d132      	bne.n	8006b8e <_svfiprintf_r+0x186>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	1d1a      	adds	r2, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	9203      	str	r2, [sp, #12]
 8006b30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b34:	3402      	adds	r4, #2
 8006b36:	9305      	str	r3, [sp, #20]
 8006b38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006bfc <_svfiprintf_r+0x1f4>
 8006b3c:	7821      	ldrb	r1, [r4, #0]
 8006b3e:	2203      	movs	r2, #3
 8006b40:	4650      	mov	r0, sl
 8006b42:	f7f9 fb4d 	bl	80001e0 <memchr>
 8006b46:	b138      	cbz	r0, 8006b58 <_svfiprintf_r+0x150>
 8006b48:	9b04      	ldr	r3, [sp, #16]
 8006b4a:	eba0 000a 	sub.w	r0, r0, sl
 8006b4e:	2240      	movs	r2, #64	@ 0x40
 8006b50:	4082      	lsls	r2, r0
 8006b52:	4313      	orrs	r3, r2
 8006b54:	3401      	adds	r4, #1
 8006b56:	9304      	str	r3, [sp, #16]
 8006b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5c:	4824      	ldr	r0, [pc, #144]	@ (8006bf0 <_svfiprintf_r+0x1e8>)
 8006b5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b62:	2206      	movs	r2, #6
 8006b64:	f7f9 fb3c 	bl	80001e0 <memchr>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d036      	beq.n	8006bda <_svfiprintf_r+0x1d2>
 8006b6c:	4b21      	ldr	r3, [pc, #132]	@ (8006bf4 <_svfiprintf_r+0x1ec>)
 8006b6e:	bb1b      	cbnz	r3, 8006bb8 <_svfiprintf_r+0x1b0>
 8006b70:	9b03      	ldr	r3, [sp, #12]
 8006b72:	3307      	adds	r3, #7
 8006b74:	f023 0307 	bic.w	r3, r3, #7
 8006b78:	3308      	adds	r3, #8
 8006b7a:	9303      	str	r3, [sp, #12]
 8006b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7e:	4433      	add	r3, r6
 8006b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b82:	e76a      	b.n	8006a5a <_svfiprintf_r+0x52>
 8006b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b88:	460c      	mov	r4, r1
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	e7a8      	b.n	8006ae0 <_svfiprintf_r+0xd8>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	3401      	adds	r4, #1
 8006b92:	9305      	str	r3, [sp, #20]
 8006b94:	4619      	mov	r1, r3
 8006b96:	f04f 0c0a 	mov.w	ip, #10
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ba0:	3a30      	subs	r2, #48	@ 0x30
 8006ba2:	2a09      	cmp	r2, #9
 8006ba4:	d903      	bls.n	8006bae <_svfiprintf_r+0x1a6>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0c6      	beq.n	8006b38 <_svfiprintf_r+0x130>
 8006baa:	9105      	str	r1, [sp, #20]
 8006bac:	e7c4      	b.n	8006b38 <_svfiprintf_r+0x130>
 8006bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e7f0      	b.n	8006b9a <_svfiprintf_r+0x192>
 8006bb8:	ab03      	add	r3, sp, #12
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	462a      	mov	r2, r5
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006bf8 <_svfiprintf_r+0x1f0>)
 8006bc0:	a904      	add	r1, sp, #16
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	f3af 8000 	nop.w
 8006bc8:	1c42      	adds	r2, r0, #1
 8006bca:	4606      	mov	r6, r0
 8006bcc:	d1d6      	bne.n	8006b7c <_svfiprintf_r+0x174>
 8006bce:	89ab      	ldrh	r3, [r5, #12]
 8006bd0:	065b      	lsls	r3, r3, #25
 8006bd2:	f53f af2d 	bmi.w	8006a30 <_svfiprintf_r+0x28>
 8006bd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bd8:	e72c      	b.n	8006a34 <_svfiprintf_r+0x2c>
 8006bda:	ab03      	add	r3, sp, #12
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	462a      	mov	r2, r5
 8006be0:	4b05      	ldr	r3, [pc, #20]	@ (8006bf8 <_svfiprintf_r+0x1f0>)
 8006be2:	a904      	add	r1, sp, #16
 8006be4:	4638      	mov	r0, r7
 8006be6:	f000 f879 	bl	8006cdc <_printf_i>
 8006bea:	e7ed      	b.n	8006bc8 <_svfiprintf_r+0x1c0>
 8006bec:	0800710c 	.word	0x0800710c
 8006bf0:	08007116 	.word	0x08007116
 8006bf4:	00000000 	.word	0x00000000
 8006bf8:	08006951 	.word	0x08006951
 8006bfc:	08007112 	.word	0x08007112

08006c00 <_printf_common>:
 8006c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c04:	4616      	mov	r6, r2
 8006c06:	4698      	mov	r8, r3
 8006c08:	688a      	ldr	r2, [r1, #8]
 8006c0a:	690b      	ldr	r3, [r1, #16]
 8006c0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c10:	4293      	cmp	r3, r2
 8006c12:	bfb8      	it	lt
 8006c14:	4613      	movlt	r3, r2
 8006c16:	6033      	str	r3, [r6, #0]
 8006c18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	b10a      	cbz	r2, 8006c26 <_printf_common+0x26>
 8006c22:	3301      	adds	r3, #1
 8006c24:	6033      	str	r3, [r6, #0]
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	0699      	lsls	r1, r3, #26
 8006c2a:	bf42      	ittt	mi
 8006c2c:	6833      	ldrmi	r3, [r6, #0]
 8006c2e:	3302      	addmi	r3, #2
 8006c30:	6033      	strmi	r3, [r6, #0]
 8006c32:	6825      	ldr	r5, [r4, #0]
 8006c34:	f015 0506 	ands.w	r5, r5, #6
 8006c38:	d106      	bne.n	8006c48 <_printf_common+0x48>
 8006c3a:	f104 0a19 	add.w	sl, r4, #25
 8006c3e:	68e3      	ldr	r3, [r4, #12]
 8006c40:	6832      	ldr	r2, [r6, #0]
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	42ab      	cmp	r3, r5
 8006c46:	dc26      	bgt.n	8006c96 <_printf_common+0x96>
 8006c48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	3b00      	subs	r3, #0
 8006c50:	bf18      	it	ne
 8006c52:	2301      	movne	r3, #1
 8006c54:	0692      	lsls	r2, r2, #26
 8006c56:	d42b      	bmi.n	8006cb0 <_printf_common+0xb0>
 8006c58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	4638      	mov	r0, r7
 8006c60:	47c8      	blx	r9
 8006c62:	3001      	adds	r0, #1
 8006c64:	d01e      	beq.n	8006ca4 <_printf_common+0xa4>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	6922      	ldr	r2, [r4, #16]
 8006c6a:	f003 0306 	and.w	r3, r3, #6
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	bf02      	ittt	eq
 8006c72:	68e5      	ldreq	r5, [r4, #12]
 8006c74:	6833      	ldreq	r3, [r6, #0]
 8006c76:	1aed      	subeq	r5, r5, r3
 8006c78:	68a3      	ldr	r3, [r4, #8]
 8006c7a:	bf0c      	ite	eq
 8006c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c80:	2500      	movne	r5, #0
 8006c82:	4293      	cmp	r3, r2
 8006c84:	bfc4      	itt	gt
 8006c86:	1a9b      	subgt	r3, r3, r2
 8006c88:	18ed      	addgt	r5, r5, r3
 8006c8a:	2600      	movs	r6, #0
 8006c8c:	341a      	adds	r4, #26
 8006c8e:	42b5      	cmp	r5, r6
 8006c90:	d11a      	bne.n	8006cc8 <_printf_common+0xc8>
 8006c92:	2000      	movs	r0, #0
 8006c94:	e008      	b.n	8006ca8 <_printf_common+0xa8>
 8006c96:	2301      	movs	r3, #1
 8006c98:	4652      	mov	r2, sl
 8006c9a:	4641      	mov	r1, r8
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	47c8      	blx	r9
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d103      	bne.n	8006cac <_printf_common+0xac>
 8006ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	3501      	adds	r5, #1
 8006cae:	e7c6      	b.n	8006c3e <_printf_common+0x3e>
 8006cb0:	18e1      	adds	r1, r4, r3
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	2030      	movs	r0, #48	@ 0x30
 8006cb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cba:	4422      	add	r2, r4
 8006cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	e7c7      	b.n	8006c58 <_printf_common+0x58>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4622      	mov	r2, r4
 8006ccc:	4641      	mov	r1, r8
 8006cce:	4638      	mov	r0, r7
 8006cd0:	47c8      	blx	r9
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d0e6      	beq.n	8006ca4 <_printf_common+0xa4>
 8006cd6:	3601      	adds	r6, #1
 8006cd8:	e7d9      	b.n	8006c8e <_printf_common+0x8e>
	...

08006cdc <_printf_i>:
 8006cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce0:	7e0f      	ldrb	r7, [r1, #24]
 8006ce2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ce4:	2f78      	cmp	r7, #120	@ 0x78
 8006ce6:	4691      	mov	r9, r2
 8006ce8:	4680      	mov	r8, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	469a      	mov	sl, r3
 8006cee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cf2:	d807      	bhi.n	8006d04 <_printf_i+0x28>
 8006cf4:	2f62      	cmp	r7, #98	@ 0x62
 8006cf6:	d80a      	bhi.n	8006d0e <_printf_i+0x32>
 8006cf8:	2f00      	cmp	r7, #0
 8006cfa:	f000 80d2 	beq.w	8006ea2 <_printf_i+0x1c6>
 8006cfe:	2f58      	cmp	r7, #88	@ 0x58
 8006d00:	f000 80b9 	beq.w	8006e76 <_printf_i+0x19a>
 8006d04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d0c:	e03a      	b.n	8006d84 <_printf_i+0xa8>
 8006d0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d12:	2b15      	cmp	r3, #21
 8006d14:	d8f6      	bhi.n	8006d04 <_printf_i+0x28>
 8006d16:	a101      	add	r1, pc, #4	@ (adr r1, 8006d1c <_printf_i+0x40>)
 8006d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d1c:	08006d75 	.word	0x08006d75
 8006d20:	08006d89 	.word	0x08006d89
 8006d24:	08006d05 	.word	0x08006d05
 8006d28:	08006d05 	.word	0x08006d05
 8006d2c:	08006d05 	.word	0x08006d05
 8006d30:	08006d05 	.word	0x08006d05
 8006d34:	08006d89 	.word	0x08006d89
 8006d38:	08006d05 	.word	0x08006d05
 8006d3c:	08006d05 	.word	0x08006d05
 8006d40:	08006d05 	.word	0x08006d05
 8006d44:	08006d05 	.word	0x08006d05
 8006d48:	08006e89 	.word	0x08006e89
 8006d4c:	08006db3 	.word	0x08006db3
 8006d50:	08006e43 	.word	0x08006e43
 8006d54:	08006d05 	.word	0x08006d05
 8006d58:	08006d05 	.word	0x08006d05
 8006d5c:	08006eab 	.word	0x08006eab
 8006d60:	08006d05 	.word	0x08006d05
 8006d64:	08006db3 	.word	0x08006db3
 8006d68:	08006d05 	.word	0x08006d05
 8006d6c:	08006d05 	.word	0x08006d05
 8006d70:	08006e4b 	.word	0x08006e4b
 8006d74:	6833      	ldr	r3, [r6, #0]
 8006d76:	1d1a      	adds	r2, r3, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6032      	str	r2, [r6, #0]
 8006d7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d84:	2301      	movs	r3, #1
 8006d86:	e09d      	b.n	8006ec4 <_printf_i+0x1e8>
 8006d88:	6833      	ldr	r3, [r6, #0]
 8006d8a:	6820      	ldr	r0, [r4, #0]
 8006d8c:	1d19      	adds	r1, r3, #4
 8006d8e:	6031      	str	r1, [r6, #0]
 8006d90:	0606      	lsls	r6, r0, #24
 8006d92:	d501      	bpl.n	8006d98 <_printf_i+0xbc>
 8006d94:	681d      	ldr	r5, [r3, #0]
 8006d96:	e003      	b.n	8006da0 <_printf_i+0xc4>
 8006d98:	0645      	lsls	r5, r0, #25
 8006d9a:	d5fb      	bpl.n	8006d94 <_printf_i+0xb8>
 8006d9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	da03      	bge.n	8006dac <_printf_i+0xd0>
 8006da4:	232d      	movs	r3, #45	@ 0x2d
 8006da6:	426d      	negs	r5, r5
 8006da8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dac:	4859      	ldr	r0, [pc, #356]	@ (8006f14 <_printf_i+0x238>)
 8006dae:	230a      	movs	r3, #10
 8006db0:	e011      	b.n	8006dd6 <_printf_i+0xfa>
 8006db2:	6821      	ldr	r1, [r4, #0]
 8006db4:	6833      	ldr	r3, [r6, #0]
 8006db6:	0608      	lsls	r0, r1, #24
 8006db8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006dbc:	d402      	bmi.n	8006dc4 <_printf_i+0xe8>
 8006dbe:	0649      	lsls	r1, r1, #25
 8006dc0:	bf48      	it	mi
 8006dc2:	b2ad      	uxthmi	r5, r5
 8006dc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006dc6:	4853      	ldr	r0, [pc, #332]	@ (8006f14 <_printf_i+0x238>)
 8006dc8:	6033      	str	r3, [r6, #0]
 8006dca:	bf14      	ite	ne
 8006dcc:	230a      	movne	r3, #10
 8006dce:	2308      	moveq	r3, #8
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006dd6:	6866      	ldr	r6, [r4, #4]
 8006dd8:	60a6      	str	r6, [r4, #8]
 8006dda:	2e00      	cmp	r6, #0
 8006ddc:	bfa2      	ittt	ge
 8006dde:	6821      	ldrge	r1, [r4, #0]
 8006de0:	f021 0104 	bicge.w	r1, r1, #4
 8006de4:	6021      	strge	r1, [r4, #0]
 8006de6:	b90d      	cbnz	r5, 8006dec <_printf_i+0x110>
 8006de8:	2e00      	cmp	r6, #0
 8006dea:	d04b      	beq.n	8006e84 <_printf_i+0x1a8>
 8006dec:	4616      	mov	r6, r2
 8006dee:	fbb5 f1f3 	udiv	r1, r5, r3
 8006df2:	fb03 5711 	mls	r7, r3, r1, r5
 8006df6:	5dc7      	ldrb	r7, [r0, r7]
 8006df8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dfc:	462f      	mov	r7, r5
 8006dfe:	42bb      	cmp	r3, r7
 8006e00:	460d      	mov	r5, r1
 8006e02:	d9f4      	bls.n	8006dee <_printf_i+0x112>
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d10b      	bne.n	8006e20 <_printf_i+0x144>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	07df      	lsls	r7, r3, #31
 8006e0c:	d508      	bpl.n	8006e20 <_printf_i+0x144>
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	6861      	ldr	r1, [r4, #4]
 8006e12:	4299      	cmp	r1, r3
 8006e14:	bfde      	ittt	le
 8006e16:	2330      	movle	r3, #48	@ 0x30
 8006e18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e20:	1b92      	subs	r2, r2, r6
 8006e22:	6122      	str	r2, [r4, #16]
 8006e24:	f8cd a000 	str.w	sl, [sp]
 8006e28:	464b      	mov	r3, r9
 8006e2a:	aa03      	add	r2, sp, #12
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	4640      	mov	r0, r8
 8006e30:	f7ff fee6 	bl	8006c00 <_printf_common>
 8006e34:	3001      	adds	r0, #1
 8006e36:	d14a      	bne.n	8006ece <_printf_i+0x1f2>
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3c:	b004      	add	sp, #16
 8006e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	f043 0320 	orr.w	r3, r3, #32
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	4833      	ldr	r0, [pc, #204]	@ (8006f18 <_printf_i+0x23c>)
 8006e4c:	2778      	movs	r7, #120	@ 0x78
 8006e4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	6831      	ldr	r1, [r6, #0]
 8006e56:	061f      	lsls	r7, r3, #24
 8006e58:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e5c:	d402      	bmi.n	8006e64 <_printf_i+0x188>
 8006e5e:	065f      	lsls	r7, r3, #25
 8006e60:	bf48      	it	mi
 8006e62:	b2ad      	uxthmi	r5, r5
 8006e64:	6031      	str	r1, [r6, #0]
 8006e66:	07d9      	lsls	r1, r3, #31
 8006e68:	bf44      	itt	mi
 8006e6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e6e:	6023      	strmi	r3, [r4, #0]
 8006e70:	b11d      	cbz	r5, 8006e7a <_printf_i+0x19e>
 8006e72:	2310      	movs	r3, #16
 8006e74:	e7ac      	b.n	8006dd0 <_printf_i+0xf4>
 8006e76:	4827      	ldr	r0, [pc, #156]	@ (8006f14 <_printf_i+0x238>)
 8006e78:	e7e9      	b.n	8006e4e <_printf_i+0x172>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	f023 0320 	bic.w	r3, r3, #32
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	e7f6      	b.n	8006e72 <_printf_i+0x196>
 8006e84:	4616      	mov	r6, r2
 8006e86:	e7bd      	b.n	8006e04 <_printf_i+0x128>
 8006e88:	6833      	ldr	r3, [r6, #0]
 8006e8a:	6825      	ldr	r5, [r4, #0]
 8006e8c:	6961      	ldr	r1, [r4, #20]
 8006e8e:	1d18      	adds	r0, r3, #4
 8006e90:	6030      	str	r0, [r6, #0]
 8006e92:	062e      	lsls	r6, r5, #24
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	d501      	bpl.n	8006e9c <_printf_i+0x1c0>
 8006e98:	6019      	str	r1, [r3, #0]
 8006e9a:	e002      	b.n	8006ea2 <_printf_i+0x1c6>
 8006e9c:	0668      	lsls	r0, r5, #25
 8006e9e:	d5fb      	bpl.n	8006e98 <_printf_i+0x1bc>
 8006ea0:	8019      	strh	r1, [r3, #0]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6123      	str	r3, [r4, #16]
 8006ea6:	4616      	mov	r6, r2
 8006ea8:	e7bc      	b.n	8006e24 <_printf_i+0x148>
 8006eaa:	6833      	ldr	r3, [r6, #0]
 8006eac:	1d1a      	adds	r2, r3, #4
 8006eae:	6032      	str	r2, [r6, #0]
 8006eb0:	681e      	ldr	r6, [r3, #0]
 8006eb2:	6862      	ldr	r2, [r4, #4]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7f9 f992 	bl	80001e0 <memchr>
 8006ebc:	b108      	cbz	r0, 8006ec2 <_printf_i+0x1e6>
 8006ebe:	1b80      	subs	r0, r0, r6
 8006ec0:	6060      	str	r0, [r4, #4]
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ecc:	e7aa      	b.n	8006e24 <_printf_i+0x148>
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	47d0      	blx	sl
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d0ad      	beq.n	8006e38 <_printf_i+0x15c>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	079b      	lsls	r3, r3, #30
 8006ee0:	d413      	bmi.n	8006f0a <_printf_i+0x22e>
 8006ee2:	68e0      	ldr	r0, [r4, #12]
 8006ee4:	9b03      	ldr	r3, [sp, #12]
 8006ee6:	4298      	cmp	r0, r3
 8006ee8:	bfb8      	it	lt
 8006eea:	4618      	movlt	r0, r3
 8006eec:	e7a6      	b.n	8006e3c <_printf_i+0x160>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4632      	mov	r2, r6
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	47d0      	blx	sl
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d09d      	beq.n	8006e38 <_printf_i+0x15c>
 8006efc:	3501      	adds	r5, #1
 8006efe:	68e3      	ldr	r3, [r4, #12]
 8006f00:	9903      	ldr	r1, [sp, #12]
 8006f02:	1a5b      	subs	r3, r3, r1
 8006f04:	42ab      	cmp	r3, r5
 8006f06:	dcf2      	bgt.n	8006eee <_printf_i+0x212>
 8006f08:	e7eb      	b.n	8006ee2 <_printf_i+0x206>
 8006f0a:	2500      	movs	r5, #0
 8006f0c:	f104 0619 	add.w	r6, r4, #25
 8006f10:	e7f5      	b.n	8006efe <_printf_i+0x222>
 8006f12:	bf00      	nop
 8006f14:	0800711d 	.word	0x0800711d
 8006f18:	0800712e 	.word	0x0800712e

08006f1c <memmove>:
 8006f1c:	4288      	cmp	r0, r1
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	eb01 0402 	add.w	r4, r1, r2
 8006f24:	d902      	bls.n	8006f2c <memmove+0x10>
 8006f26:	4284      	cmp	r4, r0
 8006f28:	4623      	mov	r3, r4
 8006f2a:	d807      	bhi.n	8006f3c <memmove+0x20>
 8006f2c:	1e43      	subs	r3, r0, #1
 8006f2e:	42a1      	cmp	r1, r4
 8006f30:	d008      	beq.n	8006f44 <memmove+0x28>
 8006f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f3a:	e7f8      	b.n	8006f2e <memmove+0x12>
 8006f3c:	4402      	add	r2, r0
 8006f3e:	4601      	mov	r1, r0
 8006f40:	428a      	cmp	r2, r1
 8006f42:	d100      	bne.n	8006f46 <memmove+0x2a>
 8006f44:	bd10      	pop	{r4, pc}
 8006f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f4e:	e7f7      	b.n	8006f40 <memmove+0x24>

08006f50 <_sbrk_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d06      	ldr	r5, [pc, #24]	@ (8006f6c <_sbrk_r+0x1c>)
 8006f54:	2300      	movs	r3, #0
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f7f9 fdc0 	bl	8000ae0 <_sbrk>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_sbrk_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_sbrk_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	20002138 	.word	0x20002138

08006f70 <_realloc_r>:
 8006f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f74:	4680      	mov	r8, r0
 8006f76:	4615      	mov	r5, r2
 8006f78:	460c      	mov	r4, r1
 8006f7a:	b921      	cbnz	r1, 8006f86 <_realloc_r+0x16>
 8006f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f80:	4611      	mov	r1, r2
 8006f82:	f7ff bc59 	b.w	8006838 <_malloc_r>
 8006f86:	b92a      	cbnz	r2, 8006f94 <_realloc_r+0x24>
 8006f88:	f7ff fbea 	bl	8006760 <_free_r>
 8006f8c:	2400      	movs	r4, #0
 8006f8e:	4620      	mov	r0, r4
 8006f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f94:	f000 f81a 	bl	8006fcc <_malloc_usable_size_r>
 8006f98:	4285      	cmp	r5, r0
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	d802      	bhi.n	8006fa4 <_realloc_r+0x34>
 8006f9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006fa2:	d8f4      	bhi.n	8006f8e <_realloc_r+0x1e>
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	f7ff fc46 	bl	8006838 <_malloc_r>
 8006fac:	4607      	mov	r7, r0
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d0ec      	beq.n	8006f8c <_realloc_r+0x1c>
 8006fb2:	42b5      	cmp	r5, r6
 8006fb4:	462a      	mov	r2, r5
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	bf28      	it	cs
 8006fba:	4632      	movcs	r2, r6
 8006fbc:	f7ff fbc2 	bl	8006744 <memcpy>
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	f7ff fbcc 	bl	8006760 <_free_r>
 8006fc8:	463c      	mov	r4, r7
 8006fca:	e7e0      	b.n	8006f8e <_realloc_r+0x1e>

08006fcc <_malloc_usable_size_r>:
 8006fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd0:	1f18      	subs	r0, r3, #4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bfbc      	itt	lt
 8006fd6:	580b      	ldrlt	r3, [r1, r0]
 8006fd8:	18c0      	addlt	r0, r0, r3
 8006fda:	4770      	bx	lr

08006fdc <_init>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr

08006fe8 <_fini>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	bf00      	nop
 8006fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fee:	bc08      	pop	{r3}
 8006ff0:	469e      	mov	lr, r3
 8006ff2:	4770      	bx	lr
