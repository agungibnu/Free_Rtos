
F_Rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006f84  08006f84  00007f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a8  080070a8  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080070a8  080070a8  000080a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070b0  080070b0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b0  080070b0  000080b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070b4  080070b4  000080b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080070b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  20000060  08007118  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d48  08007118  00009d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6c9  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003860  00000000  00000000  00024759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00027fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001191  00000000  00000000  00029660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e90  00000000  00000000  0002a7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0cb  00000000  00000000  0002e681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd052  00000000  00000000  0004874c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014579e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006428  00000000  00000000  001457e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014bc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f6c 	.word	0x08006f6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006f6c 	.word	0x08006f6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fb32 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f826 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f8a6 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f874 	bl	800066c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f003 fa3a 	bl	80039fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000588:	4a09      	ldr	r2, [pc, #36]	@ (80005b0 <main+0x40>)
 800058a:	2100      	movs	r1, #0
 800058c:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <main+0x44>)
 800058e:	f003 fa7f 	bl	8003a90 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <main+0x48>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000598:	4a08      	ldr	r2, [pc, #32]	@ (80005bc <main+0x4c>)
 800059a:	2100      	movs	r1, #0
 800059c:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <main+0x50>)
 800059e:	f003 fa77 	bl	8003a90 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <main+0x54>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a8:	f003 fa4c 	bl	8003a44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x3c>
 80005b0:	08006fe4 	.word	0x08006fe4
 80005b4:	08000799 	.word	0x08000799
 80005b8:	20000104 	.word	0x20000104
 80005bc:	08007008 	.word	0x08007008
 80005c0:	080007b9 	.word	0x080007b9
 80005c4:	20000108 	.word	0x20000108

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	@ 0x58
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	2244      	movs	r2, #68	@ 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f005 fff2 	bl	80065c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ee:	f000 fe0b 	bl	8001208 <HAL_PWREx_ControlVoltageScaling>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f8:	f000 f900 	bl	80007fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000604:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000606:	2310      	movs	r3, #16
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000616:	230a      	movs	r3, #10
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fe42 	bl	80012b4 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000636:	f000 f8e1 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fa0a 	bl	8001a6c <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065e:	f000 f8cd 	bl	80007fc <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3758      	adds	r7, #88	@ 0x58
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000672:	4a15      	ldr	r2, [pc, #84]	@ (80006c8 <MX_USART2_UART_Init+0x5c>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_USART2_UART_Init+0x58>)
 80006b0:	f002 fbb4 	bl	8002e1c <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ba:	f000 f89f 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a24      	ldr	r2, [pc, #144]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a1e      	ldr	r2, [pc, #120]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074a:	f000 fd37 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000754:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480b      	ldr	r0, [pc, #44]	@ (8000794 <MX_GPIO_Init+0xc8>)
 8000766:	f000 fb7f 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076a:	2320      	movs	r3, #32
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f000 fb70 	bl	8000e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	48000800 	.word	0x48000800

08000798 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  serialPrint("Blink01");
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <StartBlink01+0x1c>)
 80007a2:	f000 f9e7 	bl	8000b74 <serialPrint>
//	  for (int x = 0; x <5; x++){
//		  sprintf(text, "count task1 : %d", x);
//		  serialPrint(text);
//		  osDelay(1000);
//	  }
	  osDelay(1000);
 80007a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007aa:	f003 fa03 	bl	8003bb4 <osDelay>
	  serialPrint("Blink01");
 80007ae:	bf00      	nop
 80007b0:	e7f6      	b.n	80007a0 <StartBlink01+0x8>
 80007b2:	bf00      	nop
 80007b4:	08006f94 	.word	0x08006f94

080007b8 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  serialPrint("Blink02");
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <StartBlink02+0x1c>)
 80007c2:	f000 f9d7 	bl	8000b74 <serialPrint>
//	  for (int x = 0; x <3; x++){
//		  sprintf(text, "count task2 : %d", x);
//		  serialPrint(text);
//		  osDelay(2000);
//	  }
	  osDelay(2000);
 80007c6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007ca:	f003 f9f3 	bl	8003bb4 <osDelay>
	  serialPrint("Blink02");
 80007ce:	bf00      	nop
 80007d0:	e7f6      	b.n	80007c0 <StartBlink02+0x8>
 80007d2:	bf00      	nop
 80007d4:	08006f9c 	.word	0x08006f9c

080007d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d101      	bne.n	80007ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ea:	f000 fa17 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40001000 	.word	0x40001000

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <Error_Handler+0x8>

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_MspInit+0x4c>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <HAL_MspInit+0x4c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6613      	str	r3, [r2, #96]	@ 0x60
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <HAL_MspInit+0x4c>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <HAL_MspInit+0x4c>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082a:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6593      	str	r3, [r2, #88]	@ 0x58
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_MspInit+0x4c>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	f06f 0001 	mvn.w	r0, #1
 8000846:	f000 fae5 	bl	8000e14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0ac      	sub	sp, #176	@ 0xb0
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2288      	movs	r2, #136	@ 0x88
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f005 fea1 	bl	80065c0 <memset>
  if(huart->Instance==USART2)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <HAL_UART_MspInit+0xb0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d13b      	bne.n	8000900 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800088c:	2300      	movs	r3, #0
 800088e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fb3f 	bl	8001f18 <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008a0:	f7ff ffac 	bl	80007fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a4:	4b19      	ldr	r3, [pc, #100]	@ (800090c <HAL_UART_MspInit+0xb4>)
 80008a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a8:	4a18      	ldr	r2, [pc, #96]	@ (800090c <HAL_UART_MspInit+0xb4>)
 80008aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <HAL_UART_MspInit+0xb4>)
 80008b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <HAL_UART_MspInit+0xb4>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c0:	4a12      	ldr	r2, [pc, #72]	@ (800090c <HAL_UART_MspInit+0xb4>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c8:	4b10      	ldr	r3, [pc, #64]	@ (800090c <HAL_UART_MspInit+0xb4>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d4:	230c      	movs	r3, #12
 80008d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ec:	2307      	movs	r3, #7
 80008ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fc:	f000 fab4 	bl	8000e68 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000900:	bf00      	nop
 8000902:	37b0      	adds	r7, #176	@ 0xb0
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40004400 	.word	0x40004400
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	@ 0x38
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800091e:	4b34      	ldr	r3, [pc, #208]	@ (80009f0 <HAL_InitTick+0xe0>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	4a33      	ldr	r2, [pc, #204]	@ (80009f0 <HAL_InitTick+0xe0>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6593      	str	r3, [r2, #88]	@ 0x58
 800092a:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <HAL_InitTick+0xe0>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000936:	f107 0210 	add.w	r2, r7, #16
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fa57 	bl	8001df4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000946:	6a3b      	ldr	r3, [r7, #32]
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800094a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800094c:	2b00      	cmp	r3, #0
 800094e:	d103      	bne.n	8000958 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000950:	f001 fa24 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 8000954:	6378      	str	r0, [r7, #52]	@ 0x34
 8000956:	e004      	b.n	8000962 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000958:	f001 fa20 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 800095c:	4603      	mov	r3, r0
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000964:	4a23      	ldr	r2, [pc, #140]	@ (80009f4 <HAL_InitTick+0xe4>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	0c9b      	lsrs	r3, r3, #18
 800096c:	3b01      	subs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000970:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <HAL_InitTick+0xe8>)
 8000972:	4a22      	ldr	r2, [pc, #136]	@ (80009fc <HAL_InitTick+0xec>)
 8000974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000976:	4b20      	ldr	r3, [pc, #128]	@ (80009f8 <HAL_InitTick+0xe8>)
 8000978:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800097c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800097e:	4a1e      	ldr	r2, [pc, #120]	@ (80009f8 <HAL_InitTick+0xe8>)
 8000980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000982:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <HAL_InitTick+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <HAL_InitTick+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_InitTick+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000996:	4818      	ldr	r0, [pc, #96]	@ (80009f8 <HAL_InitTick+0xe8>)
 8000998:	f001 ff7a 	bl	8002890 <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11b      	bne.n	80009e2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009aa:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <HAL_InitTick+0xe8>)
 80009ac:	f001 ffd2 	bl	8002954 <HAL_TIM_Base_Start_IT>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d111      	bne.n	80009e2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009be:	2036      	movs	r0, #54	@ 0x36
 80009c0:	f000 fa44 	bl	8000e4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d808      	bhi.n	80009dc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009ca:	2200      	movs	r2, #0
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	2036      	movs	r0, #54	@ 0x36
 80009d0:	f000 fa20 	bl	8000e14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <HAL_InitTick+0xf0>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e002      	b.n	80009e2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3738      	adds	r7, #56	@ 0x38
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	431bde83 	.word	0x431bde83
 80009f8:	2000010c 	.word	0x2000010c
 80009fc:	40001000 	.word	0x40001000
 8000a00:	20000004 	.word	0x20000004

08000a04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a08:	f3bf 8f4f 	dsb	sy
}
 8000a0c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <__NVIC_SystemReset+0x24>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a16:	4904      	ldr	r1, [pc, #16]	@ (8000a28 <__NVIC_SystemReset+0x24>)
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <__NVIC_SystemReset+0x28>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1e:	f3bf 8f4f 	dsb	sy
}
 8000a22:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <__NVIC_SystemReset+0x20>
 8000a28:	e000ed00 	.word	0xe000ed00
 8000a2c:	05fa0004 	.word	0x05fa0004

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	serialPrint("SW RESET - Hard Fault handler");
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <HardFault_Handler+0x18>)
 8000a3e:	f000 f899 	bl	8000b74 <serialPrint>
	HAL_Delay(1000);
 8000a42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a46:	f000 f909 	bl	8000c5c <HAL_Delay>
	NVIC_SystemReset();
 8000a4a:	f7ff ffdb 	bl	8000a04 <__NVIC_SystemReset>
 8000a4e:	bf00      	nop
 8000a50:	08006fa4 	.word	0x08006fa4

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <TIM6_DAC_IRQHandler+0x10>)
 8000a82:	f001 ffd7 	bl	8002a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000010c 	.word	0x2000010c

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f005 fddc 	bl	800667c <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20018000 	.word	0x20018000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	20000158 	.word	0x20000158
 8000af8:	20001d48 	.word	0x20001d48

08000afc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	@ (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b24:	f7ff ffea 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2a:	490d      	ldr	r1, [pc, #52]	@ (8000b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <LoopForever+0xe>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b40:	4c0a      	ldr	r4, [pc, #40]	@ (8000b6c <LoopForever+0x16>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f005 fd9b 	bl	8006688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b52:	f7ff fd0d 	bl	8000570 <main>

08000b56 <LoopForever>:

LoopForever:
    b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b64:	080070b8 	.word	0x080070b8
  ldr r2, =_sbss
 8000b68:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b6c:	20001d48 	.word	0x20001d48

08000b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_2_IRQHandler>
	...

08000b74 <serialPrint>:
#include <general.h>
#include <main.h>
extern UART_HandleTypeDef huart2;
char text[256];

void serialPrint(char *msg){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000b80:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000b84:	6018      	str	r0, [r3, #0]
	 char buffer[1024];
	snprintf(buffer, sizeof(buffer), "%s\r\n", msg);
 8000b86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000b8a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000b8e:	f107 0008 	add.w	r0, r7, #8
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <serialPrint+0x5c>)
 8000b96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b9a:	f005 fcdd 	bl	8006558 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 1000);
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fb14 	bl	80001d0 <strlen>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	f107 0108 	add.w	r1, r7, #8
 8000bb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb4:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <serialPrint+0x60>)
 8000bb6:	f002 f97f 	bl	8002eb8 <HAL_UART_Transmit>
	memset(text,0,sizeof(text));
 8000bba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <serialPrint+0x64>)
 8000bc2:	f005 fcfd 	bl	80065c0 <memset>
}
 8000bc6:	bf00      	nop
 8000bc8:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08006fc4 	.word	0x08006fc4
 8000bd4:	2000007c 	.word	0x2000007c
 8000bd8:	2000015c 	.word	0x2000015c

08000bdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_Init+0x3c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <HAL_Init+0x3c>)
 8000bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 f903 	bl	8000dfe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf8:	200f      	movs	r0, #15
 8000bfa:	f7ff fe89 	bl	8000910 <HAL_InitTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	e001      	b.n	8000c0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c0a:	f7ff fdfd 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	2000025c 	.word	0x2000025c

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	2000025c 	.word	0x2000025c

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffde 	bl	8000c44 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <__NVIC_SetPriorityGrouping>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	@ (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	@ (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	@ (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	@ 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	@ 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ff4c 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e26:	f7ff ff61 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	6978      	ldr	r0, [r7, #20]
 8000e32:	f7ff ffb1 	bl	8000d98 <NVIC_EncodePriority>
 8000e36:	4602      	mov	r2, r0
 8000e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff80 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff54 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e76:	e17f      	b.n	8001178 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8171 	beq.w	8001172 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d005      	beq.n	8000ea8 <HAL_GPIO_Init+0x40>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d130      	bne.n	8000f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	f003 0201 	and.w	r2, r3, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d118      	bne.n	8000f48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	6939      	ldr	r1, [r7, #16]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80ac 	beq.w	8001172 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b5f      	ldr	r3, [pc, #380]	@ (8001198 <HAL_GPIO_Init+0x330>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101e:	4a5e      	ldr	r2, [pc, #376]	@ (8001198 <HAL_GPIO_Init+0x330>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6613      	str	r3, [r2, #96]	@ 0x60
 8001026:	4b5c      	ldr	r3, [pc, #368]	@ (8001198 <HAL_GPIO_Init+0x330>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001032:	4a5a      	ldr	r2, [pc, #360]	@ (800119c <HAL_GPIO_Init+0x334>)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800105c:	d025      	beq.n	80010aa <HAL_GPIO_Init+0x242>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4f      	ldr	r2, [pc, #316]	@ (80011a0 <HAL_GPIO_Init+0x338>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d01f      	beq.n	80010a6 <HAL_GPIO_Init+0x23e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4e      	ldr	r2, [pc, #312]	@ (80011a4 <HAL_GPIO_Init+0x33c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x23a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4d      	ldr	r2, [pc, #308]	@ (80011a8 <HAL_GPIO_Init+0x340>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x236>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4c      	ldr	r2, [pc, #304]	@ (80011ac <HAL_GPIO_Init+0x344>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x232>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4b      	ldr	r2, [pc, #300]	@ (80011b0 <HAL_GPIO_Init+0x348>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x22e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4a      	ldr	r2, [pc, #296]	@ (80011b4 <HAL_GPIO_Init+0x34c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x22a>
 800108e:	2306      	movs	r3, #6
 8001090:	e00c      	b.n	80010ac <HAL_GPIO_Init+0x244>
 8001092:	2307      	movs	r3, #7
 8001094:	e00a      	b.n	80010ac <HAL_GPIO_Init+0x244>
 8001096:	2305      	movs	r3, #5
 8001098:	e008      	b.n	80010ac <HAL_GPIO_Init+0x244>
 800109a:	2304      	movs	r3, #4
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x244>
 800109e:	2303      	movs	r3, #3
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x244>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x244>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x244>
 80010aa:	2300      	movs	r3, #0
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	f002 0203 	and.w	r2, r2, #3
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	4093      	lsls	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010bc:	4937      	ldr	r1, [pc, #220]	@ (800119c <HAL_GPIO_Init+0x334>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ca:	4b3b      	ldr	r3, [pc, #236]	@ (80011b8 <HAL_GPIO_Init+0x350>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ee:	4a32      	ldr	r2, [pc, #200]	@ (80011b8 <HAL_GPIO_Init+0x350>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f4:	4b30      	ldr	r3, [pc, #192]	@ (80011b8 <HAL_GPIO_Init+0x350>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001118:	4a27      	ldr	r2, [pc, #156]	@ (80011b8 <HAL_GPIO_Init+0x350>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800111e:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <HAL_GPIO_Init+0x350>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001142:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <HAL_GPIO_Init+0x350>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_GPIO_Init+0x350>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <HAL_GPIO_Init+0x350>)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa22 f303 	lsr.w	r3, r2, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	f47f ae78 	bne.w	8000e78 <HAL_GPIO_Init+0x10>
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	48001000 	.word	0x48001000
 80011b0:	48001400 	.word	0x48001400
 80011b4:	48001800 	.word	0x48001800
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <HAL_PWREx_GetVoltageRange+0x18>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001216:	d130      	bne.n	800127a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001218:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001224:	d038      	beq.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800122e:	4a1e      	ldr	r2, [pc, #120]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001230:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001234:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2232      	movs	r2, #50	@ 0x32
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0c9b      	lsrs	r3, r3, #18
 8001248:	3301      	adds	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800124c:	e002      	b.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3b01      	subs	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001260:	d102      	bne.n	8001268 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f2      	bne.n	800124e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001274:	d110      	bne.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e00f      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001286:	d007      	beq.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001290:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001296:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40007000 	.word	0x40007000
 80012ac:	20000000 	.word	0x20000000
 80012b0:	431bde83 	.word	0x431bde83

080012b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e3ca      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c6:	4b97      	ldr	r3, [pc, #604]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d0:	4b94      	ldr	r3, [pc, #592]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80e4 	beq.w	80014b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_RCC_OscConfig+0x4a>
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	f040 808b 	bne.w	800140c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	f040 8087 	bne.w	800140c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012fe:	4b89      	ldr	r3, [pc, #548]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x62>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e3a2      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <HAL_RCC_OscConfig+0x7c>
 8001326:	4b7f      	ldr	r3, [pc, #508]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800132e:	e005      	b.n	800133c <HAL_RCC_OscConfig+0x88>
 8001330:	4b7c      	ldr	r3, [pc, #496]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800133c:	4293      	cmp	r3, r2
 800133e:	d223      	bcs.n	8001388 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fd87 	bl	8001e58 <RCC_SetFlashLatencyFromMSIRange>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e383      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001354:	4b73      	ldr	r3, [pc, #460]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a72      	ldr	r2, [pc, #456]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	496d      	ldr	r1, [pc, #436]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001372:	4b6c      	ldr	r3, [pc, #432]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4968      	ldr	r1, [pc, #416]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
 8001386:	e025      	b.n	80013d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001388:	4b66      	ldr	r3, [pc, #408]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a65      	ldr	r2, [pc, #404]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b63      	ldr	r3, [pc, #396]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4960      	ldr	r1, [pc, #384]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	495b      	ldr	r1, [pc, #364]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fd47 	bl	8001e58 <RCC_SetFlashLatencyFromMSIRange>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e343      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d4:	f000 fc4a 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	4950      	ldr	r1, [pc, #320]	@ (8001528 <HAL_RCC_OscConfig+0x274>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	4a4e      	ldr	r2, [pc, #312]	@ (800152c <HAL_RCC_OscConfig+0x278>)
 80013f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001530 <HAL_RCC_OscConfig+0x27c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fa89 	bl	8000910 <HAL_InitTick>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d052      	beq.n	80014ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	e327      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d032      	beq.n	800147a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001414:	4b43      	ldr	r3, [pc, #268]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a42      	ldr	r2, [pc, #264]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001420:	f7ff fc10 	bl	8000c44 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001428:	f7ff fc0c 	bl	8000c44 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e310      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143a:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001446:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a36      	ldr	r2, [pc, #216]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b34      	ldr	r3, [pc, #208]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4931      	ldr	r1, [pc, #196]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	492c      	ldr	r1, [pc, #176]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e01a      	b.n	80014b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147a:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a29      	ldr	r2, [pc, #164]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001486:	f7ff fbdd 	bl	8000c44 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800148e:	f7ff fbd9 	bl	8000c44 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e2dd      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a0:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x1da>
 80014ac:	e000      	b.n	80014b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d074      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x21a>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d10e      	bne.n	80014e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d10b      	bne.n	80014e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d064      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2f0>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d160      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e2ba      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x24a>
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 80014f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e026      	b.n	800154c <HAL_RCC_OscConfig+0x298>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001506:	d115      	bne.n	8001534 <HAL_RCC_OscConfig+0x280>
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a05      	ldr	r2, [pc, #20]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800150e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a02      	ldr	r2, [pc, #8]	@ (8001524 <HAL_RCC_OscConfig+0x270>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x298>
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	0800702c 	.word	0x0800702c
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004
 8001534:	4ba0      	ldr	r3, [pc, #640]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a9f      	ldr	r2, [pc, #636]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800153a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b9d      	ldr	r3, [pc, #628]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a9c      	ldr	r2, [pc, #624]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fb76 	bl	8000c44 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fb72 	bl	8000c44 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	@ 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e276      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	4b92      	ldr	r3, [pc, #584]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x2a8>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fb62 	bl	8000c44 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fb5e 	bl	8000c44 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	@ 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e262      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001596:	4b88      	ldr	r3, [pc, #544]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x2d0>
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d060      	beq.n	8001674 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x310>
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d119      	bne.n	80015f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d116      	bne.n	80015f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c4:	4b7c      	ldr	r3, [pc, #496]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x328>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e23f      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b76      	ldr	r3, [pc, #472]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	061b      	lsls	r3, r3, #24
 80015ea:	4973      	ldr	r1, [pc, #460]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f0:	e040      	b.n	8001674 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d023      	beq.n	8001642 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fa:	4b6f      	ldr	r3, [pc, #444]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6e      	ldr	r2, [pc, #440]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fb1d 	bl	8000c44 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fb19 	bl	8000c44 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e21d      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001620:	4b65      	ldr	r3, [pc, #404]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b62      	ldr	r3, [pc, #392]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	495f      	ldr	r1, [pc, #380]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
 8001640:	e018      	b.n	8001674 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b5d      	ldr	r3, [pc, #372]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a5c      	ldr	r2, [pc, #368]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800164c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff faf9 	bl	8000c44 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff faf5 	bl	8000c44 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1f9      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001668:	4b53      	ldr	r3, [pc, #332]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d03c      	beq.n	80016fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001688:	4b4b      	ldr	r3, [pc, #300]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168e:	4a4a      	ldr	r2, [pc, #296]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fad4 	bl	8000c44 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fad0 	bl	8000c44 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1d4      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b2:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ef      	beq.n	80016a0 <HAL_RCC_OscConfig+0x3ec>
 80016c0:	e01b      	b.n	80016fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c2:	4b3d      	ldr	r3, [pc, #244]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c8:	4a3b      	ldr	r2, [pc, #236]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff fab7 	bl	8000c44 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fab3 	bl	8000c44 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1b7      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ec:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80016ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ef      	bne.n	80016da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80a6 	beq.w	8001854 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800170c:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10d      	bne.n	8001734 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	4b27      	ldr	r3, [pc, #156]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171c:	4a26      	ldr	r2, [pc, #152]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001722:	6593      	str	r3, [r2, #88]	@ 0x58
 8001724:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001730:	2301      	movs	r3, #1
 8001732:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001734:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <HAL_RCC_OscConfig+0x508>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d118      	bne.n	8001772 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001740:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <HAL_RCC_OscConfig+0x508>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <HAL_RCC_OscConfig+0x508>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174c:	f7ff fa7a 	bl	8000c44 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001754:	f7ff fa76 	bl	8000c44 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e17a      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_RCC_OscConfig+0x508>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_RCC_OscConfig+0x4d8>
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001780:	4a0d      	ldr	r2, [pc, #52]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178a:	e029      	b.n	80017e0 <HAL_RCC_OscConfig+0x52c>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d115      	bne.n	80017c0 <HAL_RCC_OscConfig+0x50c>
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179a:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017aa:	4a03      	ldr	r2, [pc, #12]	@ (80017b8 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b4:	e014      	b.n	80017e0 <HAL_RCC_OscConfig+0x52c>
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40007000 	.word	0x40007000
 80017c0:	4b9c      	ldr	r3, [pc, #624]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	4a9b      	ldr	r2, [pc, #620]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d0:	4b98      	ldr	r3, [pc, #608]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d6:	4a97      	ldr	r2, [pc, #604]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d016      	beq.n	8001816 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa2c 	bl	8000c44 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fa28 	bl	8000c44 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e12a      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001806:	4b8b      	ldr	r3, [pc, #556]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ed      	beq.n	80017f0 <HAL_RCC_OscConfig+0x53c>
 8001814:	e015      	b.n	8001842 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff fa15 	bl	8000c44 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800181c:	e00a      	b.n	8001834 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff fa11 	bl	8000c44 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e113      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001834:	4b7f      	ldr	r3, [pc, #508]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1ed      	bne.n	800181e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001842:	7ffb      	ldrb	r3, [r7, #31]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b7a      	ldr	r3, [pc, #488]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	4a79      	ldr	r2, [pc, #484]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001852:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80fe 	beq.w	8001a5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001862:	2b02      	cmp	r3, #2
 8001864:	f040 80d0 	bne.w	8001a08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001868:	4b72      	ldr	r3, [pc, #456]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	429a      	cmp	r2, r3
 800187a:	d130      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	3b01      	subs	r3, #1
 8001888:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d127      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001898:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11f      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018a8:	2a07      	cmp	r2, #7
 80018aa:	bf14      	ite	ne
 80018ac:	2201      	movne	r2, #1
 80018ae:	2200      	moveq	r2, #0
 80018b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d113      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d109      	bne.n	80018de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	3b01      	subs	r3, #1
 80018d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d06e      	beq.n	80019bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d069      	beq.n	80019b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018f0:	4b50      	ldr	r3, [pc, #320]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0ad      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001900:	4b4c      	ldr	r3, [pc, #304]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a4b      	ldr	r2, [pc, #300]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800190a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190c:	f7ff f99a 	bl	8000c44 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f996 	bl	8000c44 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e09a      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001926:	4b43      	ldr	r3, [pc, #268]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001932:	4b40      	ldr	r3, [pc, #256]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x784>)
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001942:	3a01      	subs	r2, #1
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	4311      	orrs	r1, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800194c:	0212      	lsls	r2, r2, #8
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	0552      	lsls	r2, r2, #21
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001960:	0852      	lsrs	r2, r2, #1
 8001962:	3a01      	subs	r2, #1
 8001964:	0652      	lsls	r2, r2, #25
 8001966:	4311      	orrs	r1, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800196c:	0912      	lsrs	r2, r2, #4
 800196e:	0452      	lsls	r2, r2, #17
 8001970:	430a      	orrs	r2, r1
 8001972:	4930      	ldr	r1, [pc, #192]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001978:	4b2e      	ldr	r3, [pc, #184]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001984:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a2a      	ldr	r2, [pc, #168]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800198e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001990:	f7ff f958 	bl	8000c44 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f954 	bl	8000c44 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e058      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b6:	e050      	b.n	8001a5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e04f      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d148      	bne.n	8001a5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e0:	f7ff f930 	bl	8000c44 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f92c 	bl	8000c44 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e030      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x734>
 8001a06:	e028      	b.n	8001a5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d023      	beq.n	8001a56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_RCC_OscConfig+0x780>)
 8001a14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f913 	bl	8000c44 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	e00c      	b.n	8001a3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f90f 	bl	8000c44 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d905      	bls.n	8001a3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e013      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
 8001a34:	40021000 	.word	0x40021000
 8001a38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_OscConfig+0x7b0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ec      	bne.n	8001a22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_RCC_OscConfig+0x7b0>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4905      	ldr	r1, [pc, #20]	@ (8001a64 <HAL_RCC_OscConfig+0x7b0>)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x7b4>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
 8001a54:	e001      	b.n	8001a5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	feeefffc 	.word	0xfeeefffc

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0e7      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b75      	ldr	r3, [pc, #468]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b72      	ldr	r3, [pc, #456]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4970      	ldr	r1, [pc, #448]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0cf      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b66      	ldr	r3, [pc, #408]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4960      	ldr	r1, [pc, #384]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d04c      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d121      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0a6      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	4b54      	ldr	r3, [pc, #336]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e09a      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b22:	4b4e      	ldr	r3, [pc, #312]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e08e      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b32:	4b4a      	ldr	r3, [pc, #296]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e086      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b46      	ldr	r3, [pc, #280]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4943      	ldr	r1, [pc, #268]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b54:	f7ff f876 	bl	8000c44 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff f872 	bl	8000c44 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e06e      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d010      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d208      	bcs.n	8001bb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	492b      	ldr	r1, [pc, #172]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb2:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d210      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 0207 	bic.w	r2, r3, #7
 8001bc8:	4923      	ldr	r1, [pc, #140]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd0:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e036      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	4918      	ldr	r1, [pc, #96]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4910      	ldr	r1, [pc, #64]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c20:	f000 f824 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	490b      	ldr	r1, [pc, #44]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	4a09      	ldr	r2, [pc, #36]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1fc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fe63 	bl	8000910 <HAL_InitTick>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	0800702c 	.word	0x0800702c
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c84:	4b3b      	ldr	r3, [pc, #236]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d121      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d11e      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca0:	4b34      	ldr	r3, [pc, #208]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cac:	4b31      	ldr	r3, [pc, #196]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e005      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d102      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	e004      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf0:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d134      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d003      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0xac>
 8001d10:	e005      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d14:	617b      	str	r3, [r7, #20]
      break;
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1a:	617b      	str	r3, [r7, #20]
      break;
 8001d1c:	e002      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	617b      	str	r3, [r7, #20]
      break;
 8001d22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	3301      	adds	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	fb03 f202 	mul.w	r2, r3, r2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0e5b      	lsrs	r3, r3, #25
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	3301      	adds	r3, #1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d64:	69bb      	ldr	r3, [r7, #24]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	@ 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08007044 	.word	0x08007044
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	007a1200 	.word	0x007a1200

08001d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da0:	f7ff fff0 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4904      	ldr	r1, [pc, #16]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	0800703c 	.word	0x0800703c

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dcc:	f7ff ffda 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4904      	ldr	r1, [pc, #16]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	0800703c 	.word	0x0800703c

08001df4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	220f      	movs	r2, #15
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <HAL_RCC_GetClockConfig+0x60>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0207 	and.w	r2, r3, #7
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	601a      	str	r2, [r3, #0]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40022000 	.word	0x40022000

08001e58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e64:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e70:	f7ff f9bc 	bl	80011ec <HAL_PWREx_GetVoltageRange>
 8001e74:	6178      	str	r0, [r7, #20]
 8001e76:	e014      	b.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	4b25      	ldr	r3, [pc, #148]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	4a24      	ldr	r2, [pc, #144]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e84:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e90:	f7ff f9ac 	bl	80011ec <HAL_PWREx_GetVoltageRange>
 8001e94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea8:	d10b      	bne.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b80      	cmp	r3, #128	@ 0x80
 8001eae:	d919      	bls.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eb4:	d902      	bls.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	e013      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e010      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	@ 0x80
 8001ec6:	d902      	bls.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ec8:	2303      	movs	r3, #3
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e00a      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b80      	cmp	r3, #128	@ 0x80
 8001ed2:	d102      	bne.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e004      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b70      	cmp	r3, #112	@ 0x70
 8001ede:	d101      	bne.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 0207 	bic.w	r2, r3, #7
 8001eec:	4909      	ldr	r1, [pc, #36]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40022000 	.word	0x40022000

08001f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f20:	2300      	movs	r3, #0
 8001f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f24:	2300      	movs	r3, #0
 8001f26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d041      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f3c:	d02a      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f42:	d824      	bhi.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f48:	d008      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f4e:	d81e      	bhi.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f58:	d010      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f5a:	e018      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f5c:	4b86      	ldr	r3, [pc, #536]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a85      	ldr	r2, [pc, #532]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f68:	e015      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fabb 	bl	80024ec <RCCEx_PLLSAI1_Config>
 8001f76:	4603      	mov	r3, r0
 8001f78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f7a:	e00c      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3320      	adds	r3, #32
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fba6 	bl	80026d4 <RCCEx_PLLSAI2_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f8c:	e003      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	74fb      	strb	r3, [r7, #19]
      break;
 8001f92:	e000      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f96:	7cfb      	ldrb	r3, [r7, #19]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f9c:	4b76      	ldr	r3, [pc, #472]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001faa:	4973      	ldr	r1, [pc, #460]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fb2:	e001      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d041      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fcc:	d02a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fd2:	d824      	bhi.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fd8:	d008      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fde:	d81e      	bhi.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe8:	d010      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fea:	e018      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fec:	4b62      	ldr	r3, [pc, #392]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a61      	ldr	r2, [pc, #388]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ff8:	e015      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fa73 	bl	80024ec <RCCEx_PLLSAI1_Config>
 8002006:	4603      	mov	r3, r0
 8002008:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800200a:	e00c      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3320      	adds	r3, #32
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fb5e 	bl	80026d4 <RCCEx_PLLSAI2_Config>
 8002018:	4603      	mov	r3, r0
 800201a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800201c:	e003      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	74fb      	strb	r3, [r7, #19]
      break;
 8002022:	e000      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002026:	7cfb      	ldrb	r3, [r7, #19]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800202c:	4b52      	ldr	r3, [pc, #328]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800203a:	494f      	ldr	r1, [pc, #316]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002042:	e001      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a0 	beq.w	8002196 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800205a:	4b47      	ldr	r3, [pc, #284]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800206a:	2300      	movs	r3, #0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002074:	4a40      	ldr	r2, [pc, #256]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207a:	6593      	str	r3, [r2, #88]	@ 0x58
 800207c:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800208c:	4b3b      	ldr	r3, [pc, #236]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3a      	ldr	r2, [pc, #232]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002098:	f7fe fdd4 	bl	8000c44 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800209e:	e009      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a0:	f7fe fdd0 	bl	8000c44 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d902      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	74fb      	strb	r3, [r7, #19]
        break;
 80020b2:	e005      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b4:	4b31      	ldr	r3, [pc, #196]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ef      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d15c      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01f      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d019      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f0:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f6:	4a20      	ldr	r2, [pc, #128]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002110:	4a19      	ldr	r2, [pc, #100]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7fe fd8f 	bl	8000c44 <HAL_GetTick>
 8002126:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002128:	e00b      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fd8b 	bl	8000c44 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d902      	bls.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	74fb      	strb	r3, [r7, #19]
            break;
 8002140:	e006      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ec      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002166:	4904      	ldr	r1, [pc, #16]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800216e:	e009      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	74bb      	strb	r3, [r7, #18]
 8002174:	e006      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002184:	7c7b      	ldrb	r3, [r7, #17]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b9e      	ldr	r3, [pc, #632]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	4a9d      	ldr	r2, [pc, #628]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002194:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a2:	4b98      	ldr	r3, [pc, #608]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a8:	f023 0203 	bic.w	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b0:	4994      	ldr	r1, [pc, #592]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	f023 020c 	bic.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d2:	498c      	ldr	r1, [pc, #560]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021e6:	4b87      	ldr	r3, [pc, #540]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	4983      	ldr	r1, [pc, #524]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002208:	4b7e      	ldr	r3, [pc, #504]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	497b      	ldr	r1, [pc, #492]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800222a:	4b76      	ldr	r3, [pc, #472]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002238:	4972      	ldr	r1, [pc, #456]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800224c:	4b6d      	ldr	r3, [pc, #436]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	496a      	ldr	r1, [pc, #424]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800226e:	4b65      	ldr	r3, [pc, #404]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	4961      	ldr	r1, [pc, #388]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002290:	4b5c      	ldr	r3, [pc, #368]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229e:	4959      	ldr	r1, [pc, #356]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b2:	4b54      	ldr	r3, [pc, #336]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c0:	4950      	ldr	r1, [pc, #320]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e2:	4948      	ldr	r1, [pc, #288]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022f6:	4b43      	ldr	r3, [pc, #268]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	493f      	ldr	r1, [pc, #252]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d028      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002318:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002326:	4937      	ldr	r1, [pc, #220]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002336:	d106      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002338:	4b32      	ldr	r3, [pc, #200]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a31      	ldr	r2, [pc, #196]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002342:	60d3      	str	r3, [r2, #12]
 8002344:	e011      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800234e:	d10c      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f8c8 	bl	80024ec <RCCEx_PLLSAI1_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002366:	7cfb      	ldrb	r3, [r7, #19]
 8002368:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d028      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002376:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002384:	491f      	ldr	r1, [pc, #124]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002394:	d106      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002396:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4a1a      	ldr	r2, [pc, #104]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023a0:	60d3      	str	r3, [r2, #12]
 80023a2:	e011      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f899 	bl	80024ec <RCCEx_PLLSAI1_Config>
 80023ba:	4603      	mov	r3, r0
 80023bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d02b      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e2:	4908      	ldr	r1, [pc, #32]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023f2:	d109      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a02      	ldr	r2, [pc, #8]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fe:	60d3      	str	r3, [r2, #12]
 8002400:	e014      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002410:	d10c      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f867 	bl	80024ec <RCCEx_PLLSAI1_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02f      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002438:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002446:	4928      	ldr	r1, [pc, #160]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002456:	d10d      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	2102      	movs	r1, #2
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f844 	bl	80024ec <RCCEx_PLLSAI1_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d014      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	74bb      	strb	r3, [r7, #18]
 8002472:	e011      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800247c:	d10c      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3320      	adds	r3, #32
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f925 	bl	80026d4 <RCCEx_PLLSAI2_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024a4:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024b2:	490d      	ldr	r1, [pc, #52]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024d6:	4904      	ldr	r1, [pc, #16]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024de:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000

080024ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024fa:	4b75      	ldr	r3, [pc, #468]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d018      	beq.n	8002538 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002506:	4b72      	ldr	r3, [pc, #456]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d10d      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
       ||
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800251e:	4b6c      	ldr	r3, [pc, #432]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
       ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d047      	beq.n	80025c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e044      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d018      	beq.n	8002572 <RCCEx_PLLSAI1_Config+0x86>
 8002540:	2b03      	cmp	r3, #3
 8002542:	d825      	bhi.n	8002590 <RCCEx_PLLSAI1_Config+0xa4>
 8002544:	2b01      	cmp	r3, #1
 8002546:	d002      	beq.n	800254e <RCCEx_PLLSAI1_Config+0x62>
 8002548:	2b02      	cmp	r3, #2
 800254a:	d009      	beq.n	8002560 <RCCEx_PLLSAI1_Config+0x74>
 800254c:	e020      	b.n	8002590 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800254e:	4b60      	ldr	r3, [pc, #384]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11d      	bne.n	8002596 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255e:	e01a      	b.n	8002596 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002560:	4b5b      	ldr	r3, [pc, #364]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d116      	bne.n	800259a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002570:	e013      	b.n	800259a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002572:	4b57      	ldr	r3, [pc, #348]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10f      	bne.n	800259e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800257e:	4b54      	ldr	r3, [pc, #336]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800258e:	e006      	b.n	800259e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e004      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259e:	bf00      	nop
    }

    if(status == HAL_OK)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025a6:	4b4a      	ldr	r3, [pc, #296]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	430b      	orrs	r3, r1
 80025bc:	4944      	ldr	r1, [pc, #272]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d17d      	bne.n	80026c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025c8:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a40      	ldr	r2, [pc, #256]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fb36 	bl	8000c44 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025da:	e009      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025dc:	f7fe fb32 	bl	8000c44 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d902      	bls.n	80025f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	73fb      	strb	r3, [r7, #15]
        break;
 80025ee:	e005      	b.n	80025fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f0:	4b37      	ldr	r3, [pc, #220]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ef      	bne.n	80025dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d160      	bne.n	80026c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d111      	bne.n	800262c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002608:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6892      	ldr	r2, [r2, #8]
 8002618:	0211      	lsls	r1, r2, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68d2      	ldr	r2, [r2, #12]
 800261e:	0912      	lsrs	r2, r2, #4
 8002620:	0452      	lsls	r2, r2, #17
 8002622:	430a      	orrs	r2, r1
 8002624:	492a      	ldr	r1, [pc, #168]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	610b      	str	r3, [r1, #16]
 800262a:	e027      	b.n	800267c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d112      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002632:	4b27      	ldr	r3, [pc, #156]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800263a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6892      	ldr	r2, [r2, #8]
 8002642:	0211      	lsls	r1, r2, #8
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6912      	ldr	r2, [r2, #16]
 8002648:	0852      	lsrs	r2, r2, #1
 800264a:	3a01      	subs	r2, #1
 800264c:	0552      	lsls	r2, r2, #21
 800264e:	430a      	orrs	r2, r1
 8002650:	491f      	ldr	r1, [pc, #124]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	610b      	str	r3, [r1, #16]
 8002656:	e011      	b.n	800267c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002660:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6892      	ldr	r2, [r2, #8]
 8002668:	0211      	lsls	r1, r2, #8
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6952      	ldr	r2, [r2, #20]
 800266e:	0852      	lsrs	r2, r2, #1
 8002670:	3a01      	subs	r2, #1
 8002672:	0652      	lsls	r2, r2, #25
 8002674:	430a      	orrs	r2, r1
 8002676:	4916      	ldr	r1, [pc, #88]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a13      	ldr	r2, [pc, #76]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002686:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe fadc 	bl	8000c44 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800268e:	e009      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002690:	f7fe fad8 	bl	8000c44 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d902      	bls.n	80026a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	73fb      	strb	r3, [r7, #15]
          break;
 80026a2:	e005      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a4:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ef      	beq.n	8002690 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026b6:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000

080026d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026e2:	4b6a      	ldr	r3, [pc, #424]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d018      	beq.n	8002720 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026ee:	4b67      	ldr	r3, [pc, #412]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d10d      	bne.n	800271a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
       ||
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002706:	4b61      	ldr	r3, [pc, #388]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
       ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d047      	beq.n	80027aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e044      	b.n	80027aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d018      	beq.n	800275a <RCCEx_PLLSAI2_Config+0x86>
 8002728:	2b03      	cmp	r3, #3
 800272a:	d825      	bhi.n	8002778 <RCCEx_PLLSAI2_Config+0xa4>
 800272c:	2b01      	cmp	r3, #1
 800272e:	d002      	beq.n	8002736 <RCCEx_PLLSAI2_Config+0x62>
 8002730:	2b02      	cmp	r3, #2
 8002732:	d009      	beq.n	8002748 <RCCEx_PLLSAI2_Config+0x74>
 8002734:	e020      	b.n	8002778 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002736:	4b55      	ldr	r3, [pc, #340]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11d      	bne.n	800277e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002746:	e01a      	b.n	800277e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002748:	4b50      	ldr	r3, [pc, #320]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d116      	bne.n	8002782 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002758:	e013      	b.n	8002782 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800275a:	4b4c      	ldr	r3, [pc, #304]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002766:	4b49      	ldr	r3, [pc, #292]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002776:	e006      	b.n	8002786 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e004      	b.n	8002788 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800277e:	bf00      	nop
 8002780:	e002      	b.n	8002788 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002786:	bf00      	nop
    }

    if(status == HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800278e:	4b3f      	ldr	r3, [pc, #252]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	430b      	orrs	r3, r1
 80027a4:	4939      	ldr	r1, [pc, #228]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d167      	bne.n	8002880 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027b0:	4b36      	ldr	r3, [pc, #216]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a35      	ldr	r2, [pc, #212]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027bc:	f7fe fa42 	bl	8000c44 <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027c2:	e009      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c4:	f7fe fa3e 	bl	8000c44 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d902      	bls.n	80027d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	73fb      	strb	r3, [r7, #15]
        break;
 80027d6:	e005      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027d8:	4b2c      	ldr	r3, [pc, #176]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ef      	bne.n	80027c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d14a      	bne.n	8002880 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027f0:	4b26      	ldr	r3, [pc, #152]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6892      	ldr	r2, [r2, #8]
 8002800:	0211      	lsls	r1, r2, #8
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d2      	ldr	r2, [r2, #12]
 8002806:	0912      	lsrs	r2, r2, #4
 8002808:	0452      	lsls	r2, r2, #17
 800280a:	430a      	orrs	r2, r1
 800280c:	491f      	ldr	r1, [pc, #124]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	4313      	orrs	r3, r2
 8002810:	614b      	str	r3, [r1, #20]
 8002812:	e011      	b.n	8002838 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002814:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800281c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6892      	ldr	r2, [r2, #8]
 8002824:	0211      	lsls	r1, r2, #8
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6912      	ldr	r2, [r2, #16]
 800282a:	0852      	lsrs	r2, r2, #1
 800282c:	3a01      	subs	r2, #1
 800282e:	0652      	lsls	r2, r2, #25
 8002830:	430a      	orrs	r2, r1
 8002832:	4916      	ldr	r1, [pc, #88]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002838:	4b14      	ldr	r3, [pc, #80]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a13      	ldr	r2, [pc, #76]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002842:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe f9fe 	bl	8000c44 <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800284a:	e009      	b.n	8002860 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800284c:	f7fe f9fa 	bl	8000c44 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d902      	bls.n	8002860 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	73fb      	strb	r3, [r7, #15]
          break;
 800285e:	e005      	b.n	800286c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002860:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ef      	beq.n	800284c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4904      	ldr	r1, [pc, #16]	@ (800288c <RCCEx_PLLSAI2_Config+0x1b8>)
 800287c:	4313      	orrs	r3, r2
 800287e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e049      	b.n	8002936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f841 	bl	800293e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 f9e0 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04f      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	@ (8002a18 <HAL_TIM_Base_Start_IT+0xc4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01d      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002996:	d018      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a1c <HAL_TIM_Base_Start_IT+0xc8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002a28 <HAL_TIM_Base_Start_IT+0xd4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	@ (8002a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d115      	bne.n	80029f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b17      	ldr	r3, [pc, #92]	@ (8002a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d015      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e2:	d011      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	e008      	b.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e000      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40013400 	.word	0x40013400
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	00010007 	.word	0x00010007

08002a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d020      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0202 	mvn.w	r2, #2
 8002a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8e9 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8db 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8ec 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d020      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01b      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0204 	mvn.w	r2, #4
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8c3 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8b5 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8c6 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d020      	beq.n	8002b30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0208 	mvn.w	r2, #8
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2204      	movs	r2, #4
 8002b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f89d 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f88f 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8a0 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d020      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0210 	mvn.w	r2, #16
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2208      	movs	r2, #8
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f877 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f869 	bl	8002c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f87a 	bl	8002c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00c      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0201 	mvn.w	r2, #1
 8002b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fd fe1c 	bl	80007d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f913 	bl	8002df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f90b 	bl	8002e08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00c      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f834 	bl	8002c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00c      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0220 	mvn.w	r2, #32
 8002c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f8d3 	bl	8002de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a46      	ldr	r2, [pc, #280]	@ (8002dc0 <TIM_Base_SetConfig+0x12c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d013      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb2:	d00f      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a43      	ldr	r2, [pc, #268]	@ (8002dc4 <TIM_Base_SetConfig+0x130>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00b      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a42      	ldr	r2, [pc, #264]	@ (8002dc8 <TIM_Base_SetConfig+0x134>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a41      	ldr	r2, [pc, #260]	@ (8002dcc <TIM_Base_SetConfig+0x138>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0x40>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a40      	ldr	r2, [pc, #256]	@ (8002dd0 <TIM_Base_SetConfig+0x13c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a35      	ldr	r2, [pc, #212]	@ (8002dc0 <TIM_Base_SetConfig+0x12c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf4:	d01b      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a32      	ldr	r2, [pc, #200]	@ (8002dc4 <TIM_Base_SetConfig+0x130>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d017      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a31      	ldr	r2, [pc, #196]	@ (8002dc8 <TIM_Base_SetConfig+0x134>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a30      	ldr	r2, [pc, #192]	@ (8002dcc <TIM_Base_SetConfig+0x138>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00f      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd0 <TIM_Base_SetConfig+0x13c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd4 <TIM_Base_SetConfig+0x140>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd8 <TIM_Base_SetConfig+0x144>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x9a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2c      	ldr	r2, [pc, #176]	@ (8002ddc <TIM_Base_SetConfig+0x148>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a16      	ldr	r2, [pc, #88]	@ (8002dc0 <TIM_Base_SetConfig+0x12c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00f      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	@ (8002dd0 <TIM_Base_SetConfig+0x13c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <TIM_Base_SetConfig+0x140>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a16      	ldr	r2, [pc, #88]	@ (8002dd8 <TIM_Base_SetConfig+0x144>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_Base_SetConfig+0xf8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <TIM_Base_SetConfig+0x148>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d103      	bne.n	8002d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d105      	bne.n	8002db2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	611a      	str	r2, [r3, #16]
  }
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40000800 	.word	0x40000800
 8002dcc:	40000c00 	.word	0x40000c00
 8002dd0:	40013400 	.word	0x40013400
 8002dd4:	40014000 	.word	0x40014000
 8002dd8:	40014400 	.word	0x40014400
 8002ddc:	40014800 	.word	0x40014800

08002de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e040      	b.n	8002eb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fd fd0a 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	@ 0x24
 8002e48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fb6a 	bl	800353c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f8af 	bl	8002fcc <UART_SetConfig>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e01b      	b.n	8002eb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fbe9 	bl	8003680 <UART_CheckIdleState>
 8002eae:	4603      	mov	r3, r0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	@ 0x28
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d177      	bne.n	8002fc0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_UART_Transmit+0x24>
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e070      	b.n	8002fc2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2221      	movs	r2, #33	@ 0x21
 8002eec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eee:	f7fd fea9 	bl	8000c44 <HAL_GetTick>
 8002ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	88fa      	ldrh	r2, [r7, #6]
 8002f00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f0c:	d108      	bne.n	8002f20 <HAL_UART_Transmit+0x68>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e003      	b.n	8002f28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f28:	e02f      	b.n	8002f8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2180      	movs	r1, #128	@ 0x80
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fc4b 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d004      	beq.n	8002f4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e03b      	b.n	8002fc2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	881a      	ldrh	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	3302      	adds	r3, #2
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	e007      	b.n	8002f78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3301      	adds	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1c9      	bne.n	8002f2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2140      	movs	r1, #64	@ 0x40
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fc15 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e005      	b.n	8002fc2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd0:	b08a      	sub	sp, #40	@ 0x28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4ba4      	ldr	r3, [pc, #656]	@ (800328c <UART_SetConfig+0x2c0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003004:	430b      	orrs	r3, r1
 8003006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a99      	ldr	r2, [pc, #612]	@ (8003290 <UART_SetConfig+0x2c4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003034:	4313      	orrs	r3, r2
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a90      	ldr	r2, [pc, #576]	@ (8003294 <UART_SetConfig+0x2c8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d126      	bne.n	80030a4 <UART_SetConfig+0xd8>
 8003056:	4b90      	ldr	r3, [pc, #576]	@ (8003298 <UART_SetConfig+0x2cc>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d81b      	bhi.n	800309c <UART_SetConfig+0xd0>
 8003064:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <UART_SetConfig+0xa0>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	0800307d 	.word	0x0800307d
 8003070:	0800308d 	.word	0x0800308d
 8003074:	08003085 	.word	0x08003085
 8003078:	08003095 	.word	0x08003095
 800307c:	2301      	movs	r3, #1
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003082:	e116      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003084:	2302      	movs	r3, #2
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308a:	e112      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800308c:	2304      	movs	r3, #4
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003092:	e10e      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003094:	2308      	movs	r3, #8
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309a:	e10a      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800309c:	2310      	movs	r3, #16
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a2:	e106      	b.n	80032b2 <UART_SetConfig+0x2e6>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a7c      	ldr	r2, [pc, #496]	@ (800329c <UART_SetConfig+0x2d0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d138      	bne.n	8003120 <UART_SetConfig+0x154>
 80030ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003298 <UART_SetConfig+0x2cc>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d82d      	bhi.n	8003118 <UART_SetConfig+0x14c>
 80030bc:	a201      	add	r2, pc, #4	@ (adr r2, 80030c4 <UART_SetConfig+0xf8>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	08003119 	.word	0x08003119
 80030cc:	08003119 	.word	0x08003119
 80030d0:	08003119 	.word	0x08003119
 80030d4:	08003109 	.word	0x08003109
 80030d8:	08003119 	.word	0x08003119
 80030dc:	08003119 	.word	0x08003119
 80030e0:	08003119 	.word	0x08003119
 80030e4:	08003101 	.word	0x08003101
 80030e8:	08003119 	.word	0x08003119
 80030ec:	08003119 	.word	0x08003119
 80030f0:	08003119 	.word	0x08003119
 80030f4:	08003111 	.word	0x08003111
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fe:	e0d8      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003100:	2302      	movs	r3, #2
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003106:	e0d4      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003108:	2304      	movs	r3, #4
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310e:	e0d0      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003110:	2308      	movs	r3, #8
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003116:	e0cc      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003118:	2310      	movs	r3, #16
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311e:	e0c8      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a5e      	ldr	r2, [pc, #376]	@ (80032a0 <UART_SetConfig+0x2d4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d125      	bne.n	8003176 <UART_SetConfig+0x1aa>
 800312a:	4b5b      	ldr	r3, [pc, #364]	@ (8003298 <UART_SetConfig+0x2cc>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003130:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003134:	2b30      	cmp	r3, #48	@ 0x30
 8003136:	d016      	beq.n	8003166 <UART_SetConfig+0x19a>
 8003138:	2b30      	cmp	r3, #48	@ 0x30
 800313a:	d818      	bhi.n	800316e <UART_SetConfig+0x1a2>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d00a      	beq.n	8003156 <UART_SetConfig+0x18a>
 8003140:	2b20      	cmp	r3, #32
 8003142:	d814      	bhi.n	800316e <UART_SetConfig+0x1a2>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <UART_SetConfig+0x182>
 8003148:	2b10      	cmp	r3, #16
 800314a:	d008      	beq.n	800315e <UART_SetConfig+0x192>
 800314c:	e00f      	b.n	800316e <UART_SetConfig+0x1a2>
 800314e:	2300      	movs	r3, #0
 8003150:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003154:	e0ad      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003156:	2302      	movs	r3, #2
 8003158:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315c:	e0a9      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800315e:	2304      	movs	r3, #4
 8003160:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003164:	e0a5      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003166:	2308      	movs	r3, #8
 8003168:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316c:	e0a1      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800316e:	2310      	movs	r3, #16
 8003170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003174:	e09d      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a4a      	ldr	r2, [pc, #296]	@ (80032a4 <UART_SetConfig+0x2d8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d125      	bne.n	80031cc <UART_SetConfig+0x200>
 8003180:	4b45      	ldr	r3, [pc, #276]	@ (8003298 <UART_SetConfig+0x2cc>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003186:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800318a:	2bc0      	cmp	r3, #192	@ 0xc0
 800318c:	d016      	beq.n	80031bc <UART_SetConfig+0x1f0>
 800318e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003190:	d818      	bhi.n	80031c4 <UART_SetConfig+0x1f8>
 8003192:	2b80      	cmp	r3, #128	@ 0x80
 8003194:	d00a      	beq.n	80031ac <UART_SetConfig+0x1e0>
 8003196:	2b80      	cmp	r3, #128	@ 0x80
 8003198:	d814      	bhi.n	80031c4 <UART_SetConfig+0x1f8>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <UART_SetConfig+0x1d8>
 800319e:	2b40      	cmp	r3, #64	@ 0x40
 80031a0:	d008      	beq.n	80031b4 <UART_SetConfig+0x1e8>
 80031a2:	e00f      	b.n	80031c4 <UART_SetConfig+0x1f8>
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031aa:	e082      	b.n	80032b2 <UART_SetConfig+0x2e6>
 80031ac:	2302      	movs	r3, #2
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b2:	e07e      	b.n	80032b2 <UART_SetConfig+0x2e6>
 80031b4:	2304      	movs	r3, #4
 80031b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ba:	e07a      	b.n	80032b2 <UART_SetConfig+0x2e6>
 80031bc:	2308      	movs	r3, #8
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c2:	e076      	b.n	80032b2 <UART_SetConfig+0x2e6>
 80031c4:	2310      	movs	r3, #16
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ca:	e072      	b.n	80032b2 <UART_SetConfig+0x2e6>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a35      	ldr	r2, [pc, #212]	@ (80032a8 <UART_SetConfig+0x2dc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d12a      	bne.n	800322c <UART_SetConfig+0x260>
 80031d6:	4b30      	ldr	r3, [pc, #192]	@ (8003298 <UART_SetConfig+0x2cc>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031e4:	d01a      	beq.n	800321c <UART_SetConfig+0x250>
 80031e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ea:	d81b      	bhi.n	8003224 <UART_SetConfig+0x258>
 80031ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f0:	d00c      	beq.n	800320c <UART_SetConfig+0x240>
 80031f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f6:	d815      	bhi.n	8003224 <UART_SetConfig+0x258>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <UART_SetConfig+0x238>
 80031fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003200:	d008      	beq.n	8003214 <UART_SetConfig+0x248>
 8003202:	e00f      	b.n	8003224 <UART_SetConfig+0x258>
 8003204:	2300      	movs	r3, #0
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320a:	e052      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800320c:	2302      	movs	r3, #2
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003212:	e04e      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003214:	2304      	movs	r3, #4
 8003216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321a:	e04a      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800321c:	2308      	movs	r3, #8
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003222:	e046      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003224:	2310      	movs	r3, #16
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322a:	e042      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <UART_SetConfig+0x2c4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d13a      	bne.n	80032ac <UART_SetConfig+0x2e0>
 8003236:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <UART_SetConfig+0x2cc>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003240:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003244:	d01a      	beq.n	800327c <UART_SetConfig+0x2b0>
 8003246:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800324a:	d81b      	bhi.n	8003284 <UART_SetConfig+0x2b8>
 800324c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003250:	d00c      	beq.n	800326c <UART_SetConfig+0x2a0>
 8003252:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003256:	d815      	bhi.n	8003284 <UART_SetConfig+0x2b8>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <UART_SetConfig+0x298>
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003260:	d008      	beq.n	8003274 <UART_SetConfig+0x2a8>
 8003262:	e00f      	b.n	8003284 <UART_SetConfig+0x2b8>
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326a:	e022      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800326c:	2302      	movs	r3, #2
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003272:	e01e      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003274:	2304      	movs	r3, #4
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327a:	e01a      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800327c:	2308      	movs	r3, #8
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003282:	e016      	b.n	80032b2 <UART_SetConfig+0x2e6>
 8003284:	2310      	movs	r3, #16
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800328a:	e012      	b.n	80032b2 <UART_SetConfig+0x2e6>
 800328c:	efff69f3 	.word	0xefff69f3
 8003290:	40008000 	.word	0x40008000
 8003294:	40013800 	.word	0x40013800
 8003298:	40021000 	.word	0x40021000
 800329c:	40004400 	.word	0x40004400
 80032a0:	40004800 	.word	0x40004800
 80032a4:	40004c00 	.word	0x40004c00
 80032a8:	40005000 	.word	0x40005000
 80032ac:	2310      	movs	r3, #16
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a9f      	ldr	r2, [pc, #636]	@ (8003534 <UART_SetConfig+0x568>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d17a      	bne.n	80033b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d824      	bhi.n	800330e <UART_SetConfig+0x342>
 80032c4:	a201      	add	r2, pc, #4	@ (adr r2, 80032cc <UART_SetConfig+0x300>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	0800330f 	.word	0x0800330f
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	0800330f 	.word	0x0800330f
 80032dc:	080032ff 	.word	0x080032ff
 80032e0:	0800330f 	.word	0x0800330f
 80032e4:	0800330f 	.word	0x0800330f
 80032e8:	0800330f 	.word	0x0800330f
 80032ec:	08003307 	.word	0x08003307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7fe fd54 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 80032f4:	61f8      	str	r0, [r7, #28]
        break;
 80032f6:	e010      	b.n	800331a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003538 <UART_SetConfig+0x56c>)
 80032fa:	61fb      	str	r3, [r7, #28]
        break;
 80032fc:	e00d      	b.n	800331a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7fe fcb5 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8003302:	61f8      	str	r0, [r7, #28]
        break;
 8003304:	e009      	b.n	800331a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800330a:	61fb      	str	r3, [r7, #28]
        break;
 800330c:	e005      	b.n	800331a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003318:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80fb 	beq.w	8003518 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	429a      	cmp	r2, r3
 8003330:	d305      	bcc.n	800333e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	429a      	cmp	r2, r3
 800333c:	d903      	bls.n	8003346 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003344:	e0e8      	b.n	8003518 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	2200      	movs	r2, #0
 800334a:	461c      	mov	r4, r3
 800334c:	4615      	mov	r5, r2
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	022b      	lsls	r3, r5, #8
 8003358:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800335c:	0222      	lsls	r2, r4, #8
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	6849      	ldr	r1, [r1, #4]
 8003362:	0849      	lsrs	r1, r1, #1
 8003364:	2000      	movs	r0, #0
 8003366:	4688      	mov	r8, r1
 8003368:	4681      	mov	r9, r0
 800336a:	eb12 0a08 	adds.w	sl, r2, r8
 800336e:	eb43 0b09 	adc.w	fp, r3, r9
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003380:	4650      	mov	r0, sl
 8003382:	4659      	mov	r1, fp
 8003384:	f7fc ff7c 	bl	8000280 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4613      	mov	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003396:	d308      	bcc.n	80033aa <UART_SetConfig+0x3de>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339e:	d204      	bcs.n	80033aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	60da      	str	r2, [r3, #12]
 80033a8:	e0b6      	b.n	8003518 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033b0:	e0b2      	b.n	8003518 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ba:	d15e      	bne.n	800347a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80033bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d828      	bhi.n	8003416 <UART_SetConfig+0x44a>
 80033c4:	a201      	add	r2, pc, #4	@ (adr r2, 80033cc <UART_SetConfig+0x400>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	080033f9 	.word	0x080033f9
 80033d4:	08003401 	.word	0x08003401
 80033d8:	08003417 	.word	0x08003417
 80033dc:	08003407 	.word	0x08003407
 80033e0:	08003417 	.word	0x08003417
 80033e4:	08003417 	.word	0x08003417
 80033e8:	08003417 	.word	0x08003417
 80033ec:	0800340f 	.word	0x0800340f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f0:	f7fe fcd4 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 80033f4:	61f8      	str	r0, [r7, #28]
        break;
 80033f6:	e014      	b.n	8003422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f8:	f7fe fce6 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 80033fc:	61f8      	str	r0, [r7, #28]
        break;
 80033fe:	e010      	b.n	8003422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003400:	4b4d      	ldr	r3, [pc, #308]	@ (8003538 <UART_SetConfig+0x56c>)
 8003402:	61fb      	str	r3, [r7, #28]
        break;
 8003404:	e00d      	b.n	8003422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003406:	f7fe fc31 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 800340a:	61f8      	str	r0, [r7, #28]
        break;
 800340c:	e009      	b.n	8003422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003412:	61fb      	str	r3, [r7, #28]
        break;
 8003414:	e005      	b.n	8003422 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d077      	beq.n	8003518 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005a      	lsls	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	441a      	add	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b0f      	cmp	r3, #15
 8003442:	d916      	bls.n	8003472 <UART_SetConfig+0x4a6>
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344a:	d212      	bcs.n	8003472 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f023 030f 	bic.w	r3, r3, #15
 8003454:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	b29b      	uxth	r3, r3
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	b29a      	uxth	r2, r3
 8003462:	8afb      	ldrh	r3, [r7, #22]
 8003464:	4313      	orrs	r3, r2
 8003466:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	8afa      	ldrh	r2, [r7, #22]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	e052      	b.n	8003518 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003478:	e04e      	b.n	8003518 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800347a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800347e:	2b08      	cmp	r3, #8
 8003480:	d827      	bhi.n	80034d2 <UART_SetConfig+0x506>
 8003482:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <UART_SetConfig+0x4bc>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	080034ad 	.word	0x080034ad
 800348c:	080034b5 	.word	0x080034b5
 8003490:	080034bd 	.word	0x080034bd
 8003494:	080034d3 	.word	0x080034d3
 8003498:	080034c3 	.word	0x080034c3
 800349c:	080034d3 	.word	0x080034d3
 80034a0:	080034d3 	.word	0x080034d3
 80034a4:	080034d3 	.word	0x080034d3
 80034a8:	080034cb 	.word	0x080034cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ac:	f7fe fc76 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 80034b0:	61f8      	str	r0, [r7, #28]
        break;
 80034b2:	e014      	b.n	80034de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b4:	f7fe fc88 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 80034b8:	61f8      	str	r0, [r7, #28]
        break;
 80034ba:	e010      	b.n	80034de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003538 <UART_SetConfig+0x56c>)
 80034be:	61fb      	str	r3, [r7, #28]
        break;
 80034c0:	e00d      	b.n	80034de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c2:	f7fe fbd3 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 80034c6:	61f8      	str	r0, [r7, #28]
        break;
 80034c8:	e009      	b.n	80034de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ce:	61fb      	str	r3, [r7, #28]
        break;
 80034d0:	e005      	b.n	80034de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034dc:	bf00      	nop
    }

    if (pclk != 0U)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d019      	beq.n	8003518 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	085a      	lsrs	r2, r3, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	441a      	add	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b0f      	cmp	r3, #15
 80034fc:	d909      	bls.n	8003512 <UART_SetConfig+0x546>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003504:	d205      	bcs.n	8003512 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60da      	str	r2, [r3, #12]
 8003510:	e002      	b.n	8003518 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003524:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003528:	4618      	mov	r0, r3
 800352a:	3728      	adds	r7, #40	@ 0x28
 800352c:	46bd      	mov	sp, r7
 800352e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003532:	bf00      	nop
 8003534:	40008000 	.word	0x40008000
 8003538:	00f42400 	.word	0x00f42400

0800353c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01a      	beq.n	8003652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800363a:	d10a      	bne.n	8003652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	605a      	str	r2, [r3, #4]
  }
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b098      	sub	sp, #96	@ 0x60
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003690:	f7fd fad8 	bl	8000c44 <HAL_GetTick>
 8003694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d12e      	bne.n	8003702 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ac:	2200      	movs	r2, #0
 80036ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f88c 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d021      	beq.n	8003702 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e6      	bne.n	80036be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e062      	b.n	80037c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d149      	bne.n	80037a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003718:	2200      	movs	r2, #0
 800371a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f856 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d03c      	beq.n	80037a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	623b      	str	r3, [r7, #32]
   return(result);
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800373e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003748:	633b      	str	r3, [r7, #48]	@ 0x30
 800374a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800374e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e6      	bne.n	800372a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3308      	adds	r3, #8
 8003762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	60fb      	str	r3, [r7, #12]
   return(result);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3308      	adds	r3, #8
 800377a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800377c:	61fa      	str	r2, [r7, #28]
 800377e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	69b9      	ldr	r1, [r7, #24]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	617b      	str	r3, [r7, #20]
   return(result);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e5      	bne.n	800375c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e011      	b.n	80037c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3758      	adds	r7, #88	@ 0x58
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e0:	e04f      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d04b      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ea:	f7fd fa2b 	bl	8000c44 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d302      	bcc.n	8003800 <UART_WaitOnFlagUntilTimeout+0x30>
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e04e      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d037      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b80      	cmp	r3, #128	@ 0x80
 8003816:	d034      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b40      	cmp	r3, #64	@ 0x40
 800381c:	d031      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b08      	cmp	r3, #8
 800382a:	d110      	bne.n	800384e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2208      	movs	r2, #8
 8003832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f838 	bl	80038aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2208      	movs	r2, #8
 800383e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e029      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800385c:	d111      	bne.n	8003882 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f81e 	bl	80038aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e00f      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4013      	ands	r3, r2
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	429a      	cmp	r2, r3
 800389e:	d0a0      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b095      	sub	sp, #84	@ 0x54
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80038d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e6      	bne.n	80038b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3308      	adds	r3, #8
 80038ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3308      	adds	r3, #8
 8003902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800390a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e5      	bne.n	80038e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	2b01      	cmp	r3, #1
 800391e:	d118      	bne.n	8003952 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	60bb      	str	r3, [r7, #8]
   return(result);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f023 0310 	bic.w	r3, r3, #16
 8003934:	647b      	str	r3, [r7, #68]	@ 0x44
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6979      	ldr	r1, [r7, #20]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	613b      	str	r3, [r7, #16]
   return(result);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e6      	bne.n	8003920 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003966:	bf00      	nop
 8003968:	3754      	adds	r7, #84	@ 0x54
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <__NVIC_SetPriority>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003984:	2b00      	cmp	r3, #0
 8003986:	db0a      	blt.n	800399e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	490c      	ldr	r1, [pc, #48]	@ (80039c0 <__NVIC_SetPriority+0x4c>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	440b      	add	r3, r1
 8003998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800399c:	e00a      	b.n	80039b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4908      	ldr	r1, [pc, #32]	@ (80039c4 <__NVIC_SetPriority+0x50>)
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3b04      	subs	r3, #4
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	440b      	add	r3, r1
 80039b2:	761a      	strb	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80039cc:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <SysTick_Handler+0x1c>)
 80039ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039d0:	f001 fd46 	bl	8005460 <xTaskGetSchedulerState>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80039da:	f002 fb3d 	bl	8006058 <xPortSysTickHandler>
  }
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	e000e010 	.word	0xe000e010

080039e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039ec:	2100      	movs	r1, #0
 80039ee:	f06f 0004 	mvn.w	r0, #4
 80039f2:	f7ff ffbf 	bl	8003974 <__NVIC_SetPriority>
#endif
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a02:	f3ef 8305 	mrs	r3, IPSR
 8003a06:	603b      	str	r3, [r7, #0]
  return(result);
 8003a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a0e:	f06f 0305 	mvn.w	r3, #5
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	e00c      	b.n	8003a30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a16:	4b0a      	ldr	r3, [pc, #40]	@ (8003a40 <osKernelInitialize+0x44>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d105      	bne.n	8003a2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a1e:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <osKernelInitialize+0x44>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	e002      	b.n	8003a30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000260 	.word	0x20000260

08003a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a4a:	f3ef 8305 	mrs	r3, IPSR
 8003a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a56:	f06f 0305 	mvn.w	r3, #5
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e010      	b.n	8003a80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <osKernelStart+0x48>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d109      	bne.n	8003a7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a66:	f7ff ffbf 	bl	80039e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a6a:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <osKernelStart+0x48>)
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a70:	f001 f892 	bl	8004b98 <vTaskStartScheduler>
      stat = osOK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	e002      	b.n	8003a80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000260 	.word	0x20000260

08003a90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08e      	sub	sp, #56	@ 0x38
 8003a94:	af04      	add	r7, sp, #16
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aa0:	f3ef 8305 	mrs	r3, IPSR
 8003aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8003aa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d17e      	bne.n	8003baa <osThreadNew+0x11a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d07b      	beq.n	8003baa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ab2:	2380      	movs	r3, #128	@ 0x80
 8003ab4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ab6:	2318      	movs	r3, #24
 8003ab8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d045      	beq.n	8003b56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <osThreadNew+0x48>
        name = attr->name;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <osThreadNew+0x6e>
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b38      	cmp	r3, #56	@ 0x38
 8003af0:	d805      	bhi.n	8003afe <osThreadNew+0x6e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <osThreadNew+0x72>
        return (NULL);
 8003afe:	2300      	movs	r3, #0
 8003b00:	e054      	b.n	8003bac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00e      	beq.n	8003b38 <osThreadNew+0xa8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003b20:	d90a      	bls.n	8003b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d006      	beq.n	8003b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <osThreadNew+0xa8>
        mem = 1;
 8003b32:	2301      	movs	r3, #1
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e010      	b.n	8003b5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10c      	bne.n	8003b5a <osThreadNew+0xca>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <osThreadNew+0xca>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <osThreadNew+0xca>
          mem = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e001      	b.n	8003b5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d110      	bne.n	8003b82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b68:	9202      	str	r2, [sp, #8]
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6a3a      	ldr	r2, [r7, #32]
 8003b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fe1a 	bl	80047b0 <xTaskCreateStatic>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	e013      	b.n	8003baa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d110      	bne.n	8003baa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	f107 0310 	add.w	r3, r7, #16
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 fe68 	bl	8004870 <xTaskCreate>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d001      	beq.n	8003baa <osThreadNew+0x11a>
            hTask = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003baa:	693b      	ldr	r3, [r7, #16]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3728      	adds	r7, #40	@ 0x28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bbc:	f3ef 8305 	mrs	r3, IPSR
 8003bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <osDelay+0x1c>
    stat = osErrorISR;
 8003bc8:	f06f 0305 	mvn.w	r3, #5
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	e007      	b.n	8003be0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 ffa6 	bl	8004b2c <vTaskDelay>
    }
  }

  return (stat);
 8003be0:	68fb      	ldr	r3, [r7, #12]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a07      	ldr	r2, [pc, #28]	@ (8003c18 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4a06      	ldr	r2, [pc, #24]	@ (8003c1c <vApplicationGetIdleTaskMemory+0x30>)
 8003c02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	@ 0x80
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000264 	.word	0x20000264
 8003c1c:	2000030c 	.word	0x2000030c

08003c20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a07      	ldr	r2, [pc, #28]	@ (8003c4c <vApplicationGetTimerTaskMemory+0x2c>)
 8003c30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4a06      	ldr	r2, [pc, #24]	@ (8003c50 <vApplicationGetTimerTaskMemory+0x30>)
 8003c36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c3e:	601a      	str	r2, [r3, #0]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	2000050c 	.word	0x2000050c
 8003c50:	200005b4 	.word	0x200005b4

08003c54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f103 0208 	add.w	r2, r3, #8
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f103 0208 	add.w	r2, r3, #8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f103 0208 	add.w	r2, r3, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d103      	bne.n	8003d16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e00c      	b.n	8003d30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e002      	b.n	8003d24 <vListInsert+0x2e>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d2f6      	bcs.n	8003d1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	601a      	str	r2, [r3, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6892      	ldr	r2, [r2, #8]
 8003d7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6852      	ldr	r2, [r2, #4]
 8003d88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d103      	bne.n	8003d9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	1e5a      	subs	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003de8:	f002 f8a6 	bl	8005f38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df4:	68f9      	ldr	r1, [r7, #12]
 8003df6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	441a      	add	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	441a      	add	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	22ff      	movs	r2, #255	@ 0xff
 8003e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	22ff      	movs	r2, #255	@ 0xff
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d114      	bne.n	8003e68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01a      	beq.n	8003e7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3310      	adds	r3, #16
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 f942 	bl	80050d4 <xTaskRemoveFromEventList>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <xQueueGenericReset+0xd0>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	e009      	b.n	8003e7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3310      	adds	r3, #16
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fef1 	bl	8003c54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3324      	adds	r3, #36	@ 0x24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff feec 	bl	8003c54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e7c:	f002 f88e 	bl	8005f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e80:	2301      	movs	r3, #1
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08e      	sub	sp, #56	@ 0x38
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	e7fd      	b.n	8003ed6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <xQueueGenericCreateStatic+0x56>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <xQueueGenericCreateStatic+0x5a>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <xQueueGenericCreateStatic+0x5c>
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10b      	bne.n	8003f08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	623b      	str	r3, [r7, #32]
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	e7fd      	b.n	8003f04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <xQueueGenericCreateStatic+0x84>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <xQueueGenericCreateStatic+0x88>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <xQueueGenericCreateStatic+0x8a>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	61fb      	str	r3, [r7, #28]
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	e7fd      	b.n	8003f32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f36:	2350      	movs	r3, #80	@ 0x50
 8003f38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b50      	cmp	r3, #80	@ 0x50
 8003f3e:	d00b      	beq.n	8003f58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	61bb      	str	r3, [r7, #24]
}
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00d      	beq.n	8003f80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f805 	bl	8003f8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3730      	adds	r7, #48	@ 0x30
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e002      	b.n	8003fac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fb8:	2101      	movs	r1, #1
 8003fba:	69b8      	ldr	r0, [r7, #24]
 8003fbc:	f7ff fefe 	bl	8003dbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08e      	sub	sp, #56	@ 0x38
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <xQueueGenericSend+0x34>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <xQueueGenericSend+0x42>
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <xQueueGenericSend+0x46>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <xQueueGenericSend+0x48>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <xQueueGenericSend+0x64>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d103      	bne.n	8004042 <xQueueGenericSend+0x72>
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <xQueueGenericSend+0x76>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <xQueueGenericSend+0x78>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <xQueueGenericSend+0x94>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	623b      	str	r3, [r7, #32]
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004064:	f001 f9fc 	bl	8005460 <xTaskGetSchedulerState>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <xQueueGenericSend+0xa4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <xQueueGenericSend+0xa8>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <xQueueGenericSend+0xaa>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10b      	bne.n	8004096 <xQueueGenericSend+0xc6>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	61fb      	str	r3, [r7, #28]
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	e7fd      	b.n	8004092 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004096:	f001 ff4f 	bl	8005f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800409a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <xQueueGenericSend+0xdc>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d129      	bne.n	8004100 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040b2:	f000 fa0f 	bl	80044d4 <prvCopyDataToQueue>
 80040b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	3324      	adds	r3, #36	@ 0x24
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 f805 	bl	80050d4 <xTaskRemoveFromEventList>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040d0:	4b3f      	ldr	r3, [pc, #252]	@ (80041d0 <xQueueGenericSend+0x200>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	e00a      	b.n	80040f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040e8:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <xQueueGenericSend+0x200>)
 80040ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040f8:	f001 ff50 	bl	8005f9c <vPortExitCritical>
				return pdPASS;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e063      	b.n	80041c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004106:	f001 ff49 	bl	8005f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800410a:	2300      	movs	r3, #0
 800410c:	e05c      	b.n	80041c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800410e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004114:	f107 0314 	add.w	r3, r7, #20
 8004118:	4618      	mov	r0, r3
 800411a:	f001 f83f 	bl	800519c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800411e:	2301      	movs	r3, #1
 8004120:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004122:	f001 ff3b 	bl	8005f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004126:	f000 fda7 	bl	8004c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800412a:	f001 ff05 	bl	8005f38 <vPortEnterCritical>
 800412e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004134:	b25b      	sxtb	r3, r3
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d103      	bne.n	8004144 <xQueueGenericSend+0x174>
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800414a:	b25b      	sxtb	r3, r3
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d103      	bne.n	800415a <xQueueGenericSend+0x18a>
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800415a:	f001 ff1f 	bl	8005f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800415e:	1d3a      	adds	r2, r7, #4
 8004160:	f107 0314 	add.w	r3, r7, #20
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f001 f82e 	bl	80051c8 <xTaskCheckForTimeOut>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d124      	bne.n	80041bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004172:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004174:	f000 faa6 	bl	80046c4 <prvIsQueueFull>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d018      	beq.n	80041b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	3310      	adds	r3, #16
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f000 ff52 	bl	8005030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800418c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800418e:	f000 fa31 	bl	80045f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004192:	f000 fd7f 	bl	8004c94 <xTaskResumeAll>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	f47f af7c 	bne.w	8004096 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800419e:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <xQueueGenericSend+0x200>)
 80041a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	e772      	b.n	8004096 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041b2:	f000 fa1f 	bl	80045f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041b6:	f000 fd6d 	bl	8004c94 <xTaskResumeAll>
 80041ba:	e76c      	b.n	8004096 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041be:	f000 fa19 	bl	80045f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041c2:	f000 fd67 	bl	8004c94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3738      	adds	r7, #56	@ 0x38
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b090      	sub	sp, #64	@ 0x40
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <xQueueGenericSendFromISR+0x3e>
 800420a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <xQueueGenericSendFromISR+0x42>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <xQueueGenericSendFromISR+0x44>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d103      	bne.n	8004242 <xQueueGenericSendFromISR+0x6e>
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <xQueueGenericSendFromISR+0x72>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <xQueueGenericSendFromISR+0x74>
 8004246:	2300      	movs	r3, #0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	623b      	str	r3, [r7, #32]
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004264:	f001 ff48 	bl	80060f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004268:	f3ef 8211 	mrs	r2, BASEPRI
 800426c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	61fa      	str	r2, [r7, #28]
 800427e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004280:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428c:	429a      	cmp	r2, r3
 800428e:	d302      	bcc.n	8004296 <xQueueGenericSendFromISR+0xc2>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d12f      	bne.n	80042f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800429c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80042ac:	f000 f912 	bl	80044d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d112      	bne.n	80042e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c4:	3324      	adds	r3, #36	@ 0x24
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 ff04 	bl	80050d4 <xTaskRemoveFromEventList>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00e      	beq.n	80042f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e007      	b.n	80042f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80042e4:	3301      	adds	r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	b25a      	sxtb	r2, r3
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80042f0:	2301      	movs	r3, #1
 80042f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80042f4:	e001      	b.n	80042fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004304:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004308:	4618      	mov	r0, r3
 800430a:	3740      	adds	r7, #64	@ 0x40
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08c      	sub	sp, #48	@ 0x30
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800431c:	2300      	movs	r3, #0
 800431e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <xQueueReceive+0x32>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	623b      	str	r3, [r7, #32]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <xQueueReceive+0x40>
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <xQueueReceive+0x44>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <xQueueReceive+0x46>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <xQueueReceive+0x62>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	61fb      	str	r3, [r7, #28]
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	e7fd      	b.n	800436e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004372:	f001 f875 	bl	8005460 <xTaskGetSchedulerState>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d102      	bne.n	8004382 <xQueueReceive+0x72>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <xQueueReceive+0x76>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <xQueueReceive+0x78>
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <xQueueReceive+0x94>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	61bb      	str	r3, [r7, #24]
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043a4:	f001 fdc8 	bl	8005f38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01f      	beq.n	80043f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043b8:	f000 f8f6 	bl	80045a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00f      	beq.n	80043ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	3310      	adds	r3, #16
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fe7f 	bl	80050d4 <xTaskRemoveFromEventList>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043dc:	4b3c      	ldr	r3, [pc, #240]	@ (80044d0 <xQueueReceive+0x1c0>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043ec:	f001 fdd6 	bl	8005f9c <vPortExitCritical>
				return pdPASS;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e069      	b.n	80044c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043fa:	f001 fdcf 	bl	8005f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043fe:	2300      	movs	r3, #0
 8004400:	e062      	b.n	80044c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004408:	f107 0310 	add.w	r3, r7, #16
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fec5 	bl	800519c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004412:	2301      	movs	r3, #1
 8004414:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004416:	f001 fdc1 	bl	8005f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800441a:	f000 fc2d 	bl	8004c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800441e:	f001 fd8b 	bl	8005f38 <vPortEnterCritical>
 8004422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004428:	b25b      	sxtb	r3, r3
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d103      	bne.n	8004438 <xQueueReceive+0x128>
 8004430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800443e:	b25b      	sxtb	r3, r3
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d103      	bne.n	800444e <xQueueReceive+0x13e>
 8004446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800444e:	f001 fda5 	bl	8005f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004452:	1d3a      	adds	r2, r7, #4
 8004454:	f107 0310 	add.w	r3, r7, #16
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 feb4 	bl	80051c8 <xTaskCheckForTimeOut>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d123      	bne.n	80044ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004468:	f000 f916 	bl	8004698 <prvIsQueueEmpty>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004474:	3324      	adds	r3, #36	@ 0x24
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fdd8 	bl	8005030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004482:	f000 f8b7 	bl	80045f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004486:	f000 fc05 	bl	8004c94 <xTaskResumeAll>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d189      	bne.n	80043a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004490:	4b0f      	ldr	r3, [pc, #60]	@ (80044d0 <xQueueReceive+0x1c0>)
 8004492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	e780      	b.n	80043a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a4:	f000 f8a6 	bl	80045f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044a8:	f000 fbf4 	bl	8004c94 <xTaskResumeAll>
 80044ac:	e77a      	b.n	80043a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044b0:	f000 f8a0 	bl	80045f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044b4:	f000 fbee 	bl	8004c94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044ba:	f000 f8ed 	bl	8004698 <prvIsQueueEmpty>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f43f af6f 	beq.w	80043a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3730      	adds	r7, #48	@ 0x30
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	e000ed04 	.word	0xe000ed04

080044d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d14d      	bne.n	8004596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 ffcc 	bl	800549c <xTaskPriorityDisinherit>
 8004504:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	e043      	b.n	8004596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d119      	bne.n	8004548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6858      	ldr	r0, [r3, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	461a      	mov	r2, r3
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	f002 f8d8 	bl	80066d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	441a      	add	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	429a      	cmp	r2, r3
 800453c:	d32b      	bcc.n	8004596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	e026      	b.n	8004596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68d8      	ldr	r0, [r3, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	461a      	mov	r2, r3
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	f002 f8be 	bl	80066d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	425b      	negs	r3, r3
 8004562:	441a      	add	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d207      	bcs.n	8004584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	425b      	negs	r3, r3
 800457e:	441a      	add	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d105      	bne.n	8004596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	3b01      	subs	r3, #1
 8004594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800459e:	697b      	ldr	r3, [r7, #20]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d018      	beq.n	80045ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	441a      	add	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d303      	bcc.n	80045dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68d9      	ldr	r1, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	461a      	mov	r2, r3
 80045e6:	6838      	ldr	r0, [r7, #0]
 80045e8:	f002 f874 	bl	80066d4 <memcpy>
	}
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045fc:	f001 fc9c 	bl	8005f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004608:	e011      	b.n	800462e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	2b00      	cmp	r3, #0
 8004610:	d012      	beq.n	8004638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3324      	adds	r3, #36	@ 0x24
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fd5c 	bl	80050d4 <xTaskRemoveFromEventList>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004622:	f000 fe35 	bl	8005290 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	3b01      	subs	r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800462e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004632:	2b00      	cmp	r3, #0
 8004634:	dce9      	bgt.n	800460a <prvUnlockQueue+0x16>
 8004636:	e000      	b.n	800463a <prvUnlockQueue+0x46>
					break;
 8004638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	22ff      	movs	r2, #255	@ 0xff
 800463e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004642:	f001 fcab 	bl	8005f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004646:	f001 fc77 	bl	8005f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004652:	e011      	b.n	8004678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d012      	beq.n	8004682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3310      	adds	r3, #16
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fd37 	bl	80050d4 <xTaskRemoveFromEventList>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800466c:	f000 fe10 	bl	8005290 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004670:	7bbb      	ldrb	r3, [r7, #14]
 8004672:	3b01      	subs	r3, #1
 8004674:	b2db      	uxtb	r3, r3
 8004676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dce9      	bgt.n	8004654 <prvUnlockQueue+0x60>
 8004680:	e000      	b.n	8004684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	22ff      	movs	r2, #255	@ 0xff
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800468c:	f001 fc86 	bl	8005f9c <vPortExitCritical>
}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046a0:	f001 fc4a 	bl	8005f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046ac:	2301      	movs	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e001      	b.n	80046b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046b6:	f001 fc71 	bl	8005f9c <vPortExitCritical>

	return xReturn;
 80046ba:	68fb      	ldr	r3, [r7, #12]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046cc:	f001 fc34 	bl	8005f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	429a      	cmp	r2, r3
 80046da:	d102      	bne.n	80046e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046dc:	2301      	movs	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e001      	b.n	80046e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046e6:	f001 fc59 	bl	8005f9c <vPortExitCritical>

	return xReturn;
 80046ea:	68fb      	ldr	r3, [r7, #12]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	e014      	b.n	800472e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004704:	4a0f      	ldr	r2, [pc, #60]	@ (8004744 <vQueueAddToRegistry+0x50>)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10b      	bne.n	8004728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004710:	490c      	ldr	r1, [pc, #48]	@ (8004744 <vQueueAddToRegistry+0x50>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800471a:	4a0a      	ldr	r2, [pc, #40]	@ (8004744 <vQueueAddToRegistry+0x50>)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004726:	e006      	b.n	8004736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3301      	adds	r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b07      	cmp	r3, #7
 8004732:	d9e7      	bls.n	8004704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	200009b4 	.word	0x200009b4

08004748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004758:	f001 fbee 	bl	8005f38 <vPortEnterCritical>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004762:	b25b      	sxtb	r3, r3
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d103      	bne.n	8004772 <vQueueWaitForMessageRestricted+0x2a>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004778:	b25b      	sxtb	r3, r3
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	d103      	bne.n	8004788 <vQueueWaitForMessageRestricted+0x40>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004788:	f001 fc08 	bl	8005f9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3324      	adds	r3, #36	@ 0x24
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fc6d 	bl	800507c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f7ff ff26 	bl	80045f4 <prvUnlockQueue>
	}
 80047a8:	bf00      	nop
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08e      	sub	sp, #56	@ 0x38
 80047b4:	af04      	add	r7, sp, #16
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	623b      	str	r3, [r7, #32]
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	61fb      	str	r3, [r7, #28]
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	e7fd      	b.n	80047f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047fa:	23a8      	movs	r3, #168	@ 0xa8
 80047fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2ba8      	cmp	r3, #168	@ 0xa8
 8004802:	d00b      	beq.n	800481c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	61bb      	str	r3, [r7, #24]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800481c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01e      	beq.n	8004862 <xTaskCreateStatic+0xb2>
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01b      	beq.n	8004862 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	2202      	movs	r2, #2
 8004838:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800483c:	2300      	movs	r3, #0
 800483e:	9303      	str	r3, [sp, #12]
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	9302      	str	r3, [sp, #8]
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f851 	bl	80048fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800485a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800485c:	f000 f8f6 	bl	8004a4c <prvAddNewTaskToReadyList>
 8004860:	e001      	b.n	8004866 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004866:	697b      	ldr	r3, [r7, #20]
	}
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	@ 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08c      	sub	sp, #48	@ 0x30
 8004874:	af04      	add	r7, sp, #16
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fc79 	bl	800617c <pvPortMalloc>
 800488a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00e      	beq.n	80048b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004892:	20a8      	movs	r0, #168	@ 0xa8
 8004894:	f001 fc72 	bl	800617c <pvPortMalloc>
 8004898:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80048a6:	e005      	b.n	80048b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048a8:	6978      	ldr	r0, [r7, #20]
 80048aa:	f001 fd35 	bl	8006318 <vPortFree>
 80048ae:	e001      	b.n	80048b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	2300      	movs	r3, #0
 80048c6:	9303      	str	r3, [sp, #12]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	9302      	str	r3, [sp, #8]
 80048cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f80f 	bl	80048fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048de:	69f8      	ldr	r0, [r7, #28]
 80048e0:	f000 f8b4 	bl	8004a4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048e4:	2301      	movs	r3, #1
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e002      	b.n	80048f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048ea:	f04f 33ff 	mov.w	r3, #4294967295
 80048ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048f0:	69bb      	ldr	r3, [r7, #24]
	}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800490a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	461a      	mov	r2, r3
 8004914:	21a5      	movs	r1, #165	@ 0xa5
 8004916:	f001 fe53 	bl	80065c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004924:	3b01      	subs	r3, #1
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	617b      	str	r3, [r7, #20]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01f      	beq.n	800499c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800495c:	2300      	movs	r3, #0
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	e012      	b.n	8004988 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	7819      	ldrb	r1, [r3, #0]
 800496a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	3334      	adds	r3, #52	@ 0x34
 8004972:	460a      	mov	r2, r1
 8004974:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d9e9      	bls.n	8004962 <prvInitialiseNewTask+0x66>
 800498e:	e000      	b.n	8004992 <prvInitialiseNewTask+0x96>
			{
				break;
 8004990:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800499a:	e003      	b.n	80049a4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	2b37      	cmp	r3, #55	@ 0x37
 80049a8:	d901      	bls.n	80049ae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049aa:	2337      	movs	r3, #55	@ 0x37
 80049ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	2200      	movs	r2, #0
 80049be:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	3304      	adds	r3, #4
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff f965 	bl	8003c94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	3318      	adds	r3, #24
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff f960 	bl	8003c94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	3354      	adds	r3, #84	@ 0x54
 80049fe:	224c      	movs	r2, #76	@ 0x4c
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 fddc 	bl	80065c0 <memset>
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a40 <prvInitialiseNewTask+0x144>)
 8004a0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	4a0c      	ldr	r2, [pc, #48]	@ (8004a44 <prvInitialiseNewTask+0x148>)
 8004a12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a16:	4a0c      	ldr	r2, [pc, #48]	@ (8004a48 <prvInitialiseNewTask+0x14c>)
 8004a18:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	68f9      	ldr	r1, [r7, #12]
 8004a1e:	69b8      	ldr	r0, [r7, #24]
 8004a20:	f001 f95a 	bl	8005cd8 <pxPortInitialiseStack>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a36:	bf00      	nop
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20001c00 	.word	0x20001c00
 8004a44:	20001c68 	.word	0x20001c68
 8004a48:	20001cd0 	.word	0x20001cd0

08004a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a54:	f001 fa70 	bl	8005f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a58:	4b2d      	ldr	r3, [pc, #180]	@ (8004b10 <prvAddNewTaskToReadyList+0xc4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b10 <prvAddNewTaskToReadyList+0xc4>)
 8004a60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a62:	4b2c      	ldr	r3, [pc, #176]	@ (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a70:	4b27      	ldr	r3, [pc, #156]	@ (8004b10 <prvAddNewTaskToReadyList+0xc4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d110      	bne.n	8004a9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a78:	f000 fc2e 	bl	80052d8 <prvInitialiseTaskLists>
 8004a7c:	e00d      	b.n	8004a9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a7e:	4b26      	ldr	r3, [pc, #152]	@ (8004b18 <prvAddNewTaskToReadyList+0xcc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a86:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d802      	bhi.n	8004a9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a94:	4a1f      	ldr	r2, [pc, #124]	@ (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a9a:	4b20      	ldr	r3, [pc, #128]	@ (8004b1c <prvAddNewTaskToReadyList+0xd0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b1c <prvAddNewTaskToReadyList+0xd0>)
 8004aa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b1c <prvAddNewTaskToReadyList+0xd0>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b20 <prvAddNewTaskToReadyList+0xd4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d903      	bls.n	8004ac0 <prvAddNewTaskToReadyList+0x74>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abc:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <prvAddNewTaskToReadyList+0xd4>)
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4a15      	ldr	r2, [pc, #84]	@ (8004b24 <prvAddNewTaskToReadyList+0xd8>)
 8004ace:	441a      	add	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7ff f8e9 	bl	8003cae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004adc:	f001 fa5e 	bl	8005f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <prvAddNewTaskToReadyList+0xcc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <prvAddNewTaskToReadyList+0xc8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d207      	bcs.n	8004b06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004af6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <prvAddNewTaskToReadyList+0xdc>)
 8004af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000ec8 	.word	0x20000ec8
 8004b14:	200009f4 	.word	0x200009f4
 8004b18:	20000ed4 	.word	0x20000ed4
 8004b1c:	20000ee4 	.word	0x20000ee4
 8004b20:	20000ed0 	.word	0x20000ed0
 8004b24:	200009f8 	.word	0x200009f8
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b3e:	4b14      	ldr	r3, [pc, #80]	@ (8004b90 <vTaskDelay+0x64>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <vTaskDelay+0x32>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	60bb      	str	r3, [r7, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b5e:	f000 f88b 	bl	8004c78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b62:	2100      	movs	r1, #0
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fd09 	bl	800557c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b6a:	f000 f893 	bl	8004c94 <xTaskResumeAll>
 8004b6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d107      	bne.n	8004b86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b76:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <vTaskDelay+0x68>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000ef0 	.word	0x20000ef0
 8004b94:	e000ed04 	.word	0xe000ed04

08004b98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	@ 0x28
 8004b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ba6:	463a      	mov	r2, r7
 8004ba8:	1d39      	adds	r1, r7, #4
 8004baa:	f107 0308 	add.w	r3, r7, #8
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff f81c 	bl	8003bec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bb4:	6839      	ldr	r1, [r7, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	9202      	str	r2, [sp, #8]
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	460a      	mov	r2, r1
 8004bc6:	4924      	ldr	r1, [pc, #144]	@ (8004c58 <vTaskStartScheduler+0xc0>)
 8004bc8:	4824      	ldr	r0, [pc, #144]	@ (8004c5c <vTaskStartScheduler+0xc4>)
 8004bca:	f7ff fdf1 	bl	80047b0 <xTaskCreateStatic>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4a23      	ldr	r2, [pc, #140]	@ (8004c60 <vTaskStartScheduler+0xc8>)
 8004bd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bd4:	4b22      	ldr	r3, [pc, #136]	@ (8004c60 <vTaskStartScheduler+0xc8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	e001      	b.n	8004be6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d102      	bne.n	8004bf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bec:	f000 fd1a 	bl	8005624 <xTimerCreateTimerTask>
 8004bf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d11b      	bne.n	8004c30 <vTaskStartScheduler+0x98>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	613b      	str	r3, [r7, #16]
}
 8004c0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c0c:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <vTaskStartScheduler+0xcc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3354      	adds	r3, #84	@ 0x54
 8004c12:	4a15      	ldr	r2, [pc, #84]	@ (8004c68 <vTaskStartScheduler+0xd0>)
 8004c14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c16:	4b15      	ldr	r3, [pc, #84]	@ (8004c6c <vTaskStartScheduler+0xd4>)
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c1e:	4b14      	ldr	r3, [pc, #80]	@ (8004c70 <vTaskStartScheduler+0xd8>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c24:	4b13      	ldr	r3, [pc, #76]	@ (8004c74 <vTaskStartScheduler+0xdc>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c2a:	f001 f8e1 	bl	8005df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c2e:	e00f      	b.n	8004c50 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d10b      	bne.n	8004c50 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	e7fd      	b.n	8004c4c <vTaskStartScheduler+0xb4>
}
 8004c50:	bf00      	nop
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	08006fcc 	.word	0x08006fcc
 8004c5c:	080052a9 	.word	0x080052a9
 8004c60:	20000eec 	.word	0x20000eec
 8004c64:	200009f4 	.word	0x200009f4
 8004c68:	20000010 	.word	0x20000010
 8004c6c:	20000ee8 	.word	0x20000ee8
 8004c70:	20000ed4 	.word	0x20000ed4
 8004c74:	20000ecc 	.word	0x20000ecc

08004c78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c7c:	4b04      	ldr	r3, [pc, #16]	@ (8004c90 <vTaskSuspendAll+0x18>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	4a03      	ldr	r2, [pc, #12]	@ (8004c90 <vTaskSuspendAll+0x18>)
 8004c84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	20000ef0 	.word	0x20000ef0

08004c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ca2:	4b42      	ldr	r3, [pc, #264]	@ (8004dac <xTaskResumeAll+0x118>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10b      	bne.n	8004cc2 <xTaskResumeAll+0x2e>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	603b      	str	r3, [r7, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	e7fd      	b.n	8004cbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cc2:	f001 f939 	bl	8005f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cc6:	4b39      	ldr	r3, [pc, #228]	@ (8004dac <xTaskResumeAll+0x118>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	4a37      	ldr	r2, [pc, #220]	@ (8004dac <xTaskResumeAll+0x118>)
 8004cce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd0:	4b36      	ldr	r3, [pc, #216]	@ (8004dac <xTaskResumeAll+0x118>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d162      	bne.n	8004d9e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cd8:	4b35      	ldr	r3, [pc, #212]	@ (8004db0 <xTaskResumeAll+0x11c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d05e      	beq.n	8004d9e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ce0:	e02f      	b.n	8004d42 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce2:	4b34      	ldr	r3, [pc, #208]	@ (8004db4 <xTaskResumeAll+0x120>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3318      	adds	r3, #24
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff f83a 	bl	8003d68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff f835 	bl	8003d68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d02:	4b2d      	ldr	r3, [pc, #180]	@ (8004db8 <xTaskResumeAll+0x124>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d903      	bls.n	8004d12 <xTaskResumeAll+0x7e>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8004db8 <xTaskResumeAll+0x124>)
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4a27      	ldr	r2, [pc, #156]	@ (8004dbc <xTaskResumeAll+0x128>)
 8004d20:	441a      	add	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f7fe ffc0 	bl	8003cae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d32:	4b23      	ldr	r3, [pc, #140]	@ (8004dc0 <xTaskResumeAll+0x12c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004d3c:	4b21      	ldr	r3, [pc, #132]	@ (8004dc4 <xTaskResumeAll+0x130>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d42:	4b1c      	ldr	r3, [pc, #112]	@ (8004db4 <xTaskResumeAll+0x120>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1cb      	bne.n	8004ce2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d50:	f000 fb66 	bl	8005420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d54:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc8 <xTaskResumeAll+0x134>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d010      	beq.n	8004d82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d60:	f000 f846 	bl	8004df0 <xTaskIncrementTick>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004d6a:	4b16      	ldr	r3, [pc, #88]	@ (8004dc4 <xTaskResumeAll+0x130>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f1      	bne.n	8004d60 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004d7c:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <xTaskResumeAll+0x134>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d82:	4b10      	ldr	r3, [pc, #64]	@ (8004dc4 <xTaskResumeAll+0x130>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dcc <xTaskResumeAll+0x138>)
 8004d90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d9e:	f001 f8fd 	bl	8005f9c <vPortExitCritical>

	return xAlreadyYielded;
 8004da2:	68bb      	ldr	r3, [r7, #8]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000ef0 	.word	0x20000ef0
 8004db0:	20000ec8 	.word	0x20000ec8
 8004db4:	20000e88 	.word	0x20000e88
 8004db8:	20000ed0 	.word	0x20000ed0
 8004dbc:	200009f8 	.word	0x200009f8
 8004dc0:	200009f4 	.word	0x200009f4
 8004dc4:	20000edc 	.word	0x20000edc
 8004dc8:	20000ed8 	.word	0x20000ed8
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dd6:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <xTaskGetTickCount+0x1c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ddc:	687b      	ldr	r3, [r7, #4]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000ecc 	.word	0x20000ecc

08004df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004f38 <xTaskIncrementTick+0x148>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 8090 	bne.w	8004f24 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e04:	4b4d      	ldr	r3, [pc, #308]	@ (8004f3c <xTaskIncrementTick+0x14c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f3c <xTaskIncrementTick+0x14c>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d121      	bne.n	8004e5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e18:	4b49      	ldr	r3, [pc, #292]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	603b      	str	r3, [r7, #0]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <xTaskIncrementTick+0x46>
 8004e3a:	4b41      	ldr	r3, [pc, #260]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	4b40      	ldr	r3, [pc, #256]	@ (8004f44 <xTaskIncrementTick+0x154>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3e      	ldr	r2, [pc, #248]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	4a3e      	ldr	r2, [pc, #248]	@ (8004f44 <xTaskIncrementTick+0x154>)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f48 <xTaskIncrementTick+0x158>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	4a3c      	ldr	r2, [pc, #240]	@ (8004f48 <xTaskIncrementTick+0x158>)
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	f000 fae2 	bl	8005420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f4c <xTaskIncrementTick+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d349      	bcc.n	8004efa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e66:	4b36      	ldr	r3, [pc, #216]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e70:	4b36      	ldr	r3, [pc, #216]	@ (8004f4c <xTaskIncrementTick+0x15c>)
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295
 8004e76:	601a      	str	r2, [r3, #0]
					break;
 8004e78:	e03f      	b.n	8004efa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7a:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d203      	bcs.n	8004e9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e92:	4a2e      	ldr	r2, [pc, #184]	@ (8004f4c <xTaskIncrementTick+0x15c>)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e98:	e02f      	b.n	8004efa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe ff62 	bl	8003d68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	3318      	adds	r3, #24
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe ff59 	bl	8003d68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eba:	4b25      	ldr	r3, [pc, #148]	@ (8004f50 <xTaskIncrementTick+0x160>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d903      	bls.n	8004eca <xTaskIncrementTick+0xda>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	4a22      	ldr	r2, [pc, #136]	@ (8004f50 <xTaskIncrementTick+0x160>)
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f54 <xTaskIncrementTick+0x164>)
 8004ed8:	441a      	add	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7fe fee4 	bl	8003cae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eea:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <xTaskIncrementTick+0x168>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3b8      	bcc.n	8004e66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef8:	e7b5      	b.n	8004e66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004efa:	4b17      	ldr	r3, [pc, #92]	@ (8004f58 <xTaskIncrementTick+0x168>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f00:	4914      	ldr	r1, [pc, #80]	@ (8004f54 <xTaskIncrementTick+0x164>)
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d901      	bls.n	8004f16 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004f12:	2301      	movs	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f16:	4b11      	ldr	r3, [pc, #68]	@ (8004f5c <xTaskIncrementTick+0x16c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e004      	b.n	8004f2e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f24:	4b0e      	ldr	r3, [pc, #56]	@ (8004f60 <xTaskIncrementTick+0x170>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f60 <xTaskIncrementTick+0x170>)
 8004f2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f2e:	697b      	ldr	r3, [r7, #20]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000ef0 	.word	0x20000ef0
 8004f3c:	20000ecc 	.word	0x20000ecc
 8004f40:	20000e80 	.word	0x20000e80
 8004f44:	20000e84 	.word	0x20000e84
 8004f48:	20000ee0 	.word	0x20000ee0
 8004f4c:	20000ee8 	.word	0x20000ee8
 8004f50:	20000ed0 	.word	0x20000ed0
 8004f54:	200009f8 	.word	0x200009f8
 8004f58:	200009f4 	.word	0x200009f4
 8004f5c:	20000edc 	.word	0x20000edc
 8004f60:	20000ed8 	.word	0x20000ed8

08004f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005018 <vTaskSwitchContext+0xb4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f72:	4b2a      	ldr	r3, [pc, #168]	@ (800501c <vTaskSwitchContext+0xb8>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f78:	e047      	b.n	800500a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004f7a:	4b28      	ldr	r3, [pc, #160]	@ (800501c <vTaskSwitchContext+0xb8>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f80:	4b27      	ldr	r3, [pc, #156]	@ (8005020 <vTaskSwitchContext+0xbc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e011      	b.n	8004fac <vTaskSwitchContext+0x48>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <vTaskSwitchContext+0x42>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	e7fd      	b.n	8004fa2 <vTaskSwitchContext+0x3e>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	491d      	ldr	r1, [pc, #116]	@ (8005024 <vTaskSwitchContext+0xc0>)
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0e3      	beq.n	8004f88 <vTaskSwitchContext+0x24>
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4a16      	ldr	r2, [pc, #88]	@ (8005024 <vTaskSwitchContext+0xc0>)
 8004fcc:	4413      	add	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d104      	bne.n	8004ff0 <vTaskSwitchContext+0x8c>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8005028 <vTaskSwitchContext+0xc4>)
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	4a09      	ldr	r2, [pc, #36]	@ (8005020 <vTaskSwitchContext+0xbc>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005000:	4b09      	ldr	r3, [pc, #36]	@ (8005028 <vTaskSwitchContext+0xc4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3354      	adds	r3, #84	@ 0x54
 8005006:	4a09      	ldr	r2, [pc, #36]	@ (800502c <vTaskSwitchContext+0xc8>)
 8005008:	6013      	str	r3, [r2, #0]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000ef0 	.word	0x20000ef0
 800501c:	20000edc 	.word	0x20000edc
 8005020:	20000ed0 	.word	0x20000ed0
 8005024:	200009f8 	.word	0x200009f8
 8005028:	200009f4 	.word	0x200009f4
 800502c:	20000010 	.word	0x20000010

08005030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60fb      	str	r3, [r7, #12]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005058:	4b07      	ldr	r3, [pc, #28]	@ (8005078 <vTaskPlaceOnEventList+0x48>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3318      	adds	r3, #24
 800505e:	4619      	mov	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fe fe48 	bl	8003cf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005066:	2101      	movs	r1, #1
 8005068:	6838      	ldr	r0, [r7, #0]
 800506a:	f000 fa87 	bl	800557c <prvAddCurrentTaskToDelayedList>
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	200009f4 	.word	0x200009f4

0800507c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	617b      	str	r3, [r7, #20]
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	e7fd      	b.n	80050a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050a6:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3318      	adds	r3, #24
 80050ac:	4619      	mov	r1, r3
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7fe fdfd 	bl	8003cae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	68b8      	ldr	r0, [r7, #8]
 80050c4:	f000 fa5a 	bl	800557c <prvAddCurrentTaskToDelayedList>
	}
 80050c8:	bf00      	nop
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200009f4 	.word	0x200009f4

080050d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10b      	bne.n	8005102 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	60fb      	str	r3, [r7, #12]
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	e7fd      	b.n	80050fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	3318      	adds	r3, #24
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fe2e 	bl	8003d68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800510c:	4b1d      	ldr	r3, [pc, #116]	@ (8005184 <xTaskRemoveFromEventList+0xb0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d11d      	bne.n	8005150 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	3304      	adds	r3, #4
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe fe25 	bl	8003d68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005122:	4b19      	ldr	r3, [pc, #100]	@ (8005188 <xTaskRemoveFromEventList+0xb4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d903      	bls.n	8005132 <xTaskRemoveFromEventList+0x5e>
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	4a16      	ldr	r2, [pc, #88]	@ (8005188 <xTaskRemoveFromEventList+0xb4>)
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4a13      	ldr	r2, [pc, #76]	@ (800518c <xTaskRemoveFromEventList+0xb8>)
 8005140:	441a      	add	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f7fe fdb0 	bl	8003cae <vListInsertEnd>
 800514e:	e005      	b.n	800515c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3318      	adds	r3, #24
 8005154:	4619      	mov	r1, r3
 8005156:	480e      	ldr	r0, [pc, #56]	@ (8005190 <xTaskRemoveFromEventList+0xbc>)
 8005158:	f7fe fda9 	bl	8003cae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005160:	4b0c      	ldr	r3, [pc, #48]	@ (8005194 <xTaskRemoveFromEventList+0xc0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	429a      	cmp	r2, r3
 8005168:	d905      	bls.n	8005176 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800516a:	2301      	movs	r3, #1
 800516c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800516e:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <xTaskRemoveFromEventList+0xc4>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e001      	b.n	800517a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800517a:	697b      	ldr	r3, [r7, #20]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	20000ef0 	.word	0x20000ef0
 8005188:	20000ed0 	.word	0x20000ed0
 800518c:	200009f8 	.word	0x200009f8
 8005190:	20000e88 	.word	0x20000e88
 8005194:	200009f4 	.word	0x200009f4
 8005198:	20000edc 	.word	0x20000edc

0800519c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <vTaskInternalSetTimeOutState+0x24>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051ac:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <vTaskInternalSetTimeOutState+0x28>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	605a      	str	r2, [r3, #4]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	20000ee0 	.word	0x20000ee0
 80051c4:	20000ecc 	.word	0x20000ecc

080051c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	613b      	str	r3, [r7, #16]
}
 80051ea:	bf00      	nop
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10b      	bne.n	800520e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	60fb      	str	r3, [r7, #12]
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	e7fd      	b.n	800520a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800520e:	f000 fe93 	bl	8005f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005212:	4b1d      	ldr	r3, [pc, #116]	@ (8005288 <xTaskCheckForTimeOut+0xc0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	d102      	bne.n	8005232 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	e023      	b.n	800527a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b15      	ldr	r3, [pc, #84]	@ (800528c <xTaskCheckForTimeOut+0xc4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d007      	beq.n	800524e <xTaskCheckForTimeOut+0x86>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	429a      	cmp	r2, r3
 8005246:	d302      	bcc.n	800524e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	e015      	b.n	800527a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	429a      	cmp	r2, r3
 8005256:	d20b      	bcs.n	8005270 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff ff99 	bl	800519c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	e004      	b.n	800527a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005276:	2301      	movs	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800527a:	f000 fe8f 	bl	8005f9c <vPortExitCritical>

	return xReturn;
 800527e:	69fb      	ldr	r3, [r7, #28]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3720      	adds	r7, #32
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20000ecc 	.word	0x20000ecc
 800528c:	20000ee0 	.word	0x20000ee0

08005290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005294:	4b03      	ldr	r3, [pc, #12]	@ (80052a4 <vTaskMissedYield+0x14>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	20000edc 	.word	0x20000edc

080052a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052b0:	f000 f852 	bl	8005358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052b4:	4b06      	ldr	r3, [pc, #24]	@ (80052d0 <prvIdleTask+0x28>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d9f9      	bls.n	80052b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052bc:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <prvIdleTask+0x2c>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052cc:	e7f0      	b.n	80052b0 <prvIdleTask+0x8>
 80052ce:	bf00      	nop
 80052d0:	200009f8 	.word	0x200009f8
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	e00c      	b.n	80052fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4a12      	ldr	r2, [pc, #72]	@ (8005338 <prvInitialiseTaskLists+0x60>)
 80052f0:	4413      	add	r3, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fcae 	bl	8003c54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3301      	adds	r3, #1
 80052fc:	607b      	str	r3, [r7, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b37      	cmp	r3, #55	@ 0x37
 8005302:	d9ef      	bls.n	80052e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005304:	480d      	ldr	r0, [pc, #52]	@ (800533c <prvInitialiseTaskLists+0x64>)
 8005306:	f7fe fca5 	bl	8003c54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800530a:	480d      	ldr	r0, [pc, #52]	@ (8005340 <prvInitialiseTaskLists+0x68>)
 800530c:	f7fe fca2 	bl	8003c54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005310:	480c      	ldr	r0, [pc, #48]	@ (8005344 <prvInitialiseTaskLists+0x6c>)
 8005312:	f7fe fc9f 	bl	8003c54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005316:	480c      	ldr	r0, [pc, #48]	@ (8005348 <prvInitialiseTaskLists+0x70>)
 8005318:	f7fe fc9c 	bl	8003c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800531c:	480b      	ldr	r0, [pc, #44]	@ (800534c <prvInitialiseTaskLists+0x74>)
 800531e:	f7fe fc99 	bl	8003c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005322:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <prvInitialiseTaskLists+0x78>)
 8005324:	4a05      	ldr	r2, [pc, #20]	@ (800533c <prvInitialiseTaskLists+0x64>)
 8005326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005328:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <prvInitialiseTaskLists+0x7c>)
 800532a:	4a05      	ldr	r2, [pc, #20]	@ (8005340 <prvInitialiseTaskLists+0x68>)
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200009f8 	.word	0x200009f8
 800533c:	20000e58 	.word	0x20000e58
 8005340:	20000e6c 	.word	0x20000e6c
 8005344:	20000e88 	.word	0x20000e88
 8005348:	20000e9c 	.word	0x20000e9c
 800534c:	20000eb4 	.word	0x20000eb4
 8005350:	20000e80 	.word	0x20000e80
 8005354:	20000e84 	.word	0x20000e84

08005358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800535e:	e019      	b.n	8005394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005360:	f000 fdea 	bl	8005f38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005364:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <prvCheckTasksWaitingTermination+0x50>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe fcf9 	bl	8003d68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005376:	4b0d      	ldr	r3, [pc, #52]	@ (80053ac <prvCheckTasksWaitingTermination+0x54>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3b01      	subs	r3, #1
 800537c:	4a0b      	ldr	r2, [pc, #44]	@ (80053ac <prvCheckTasksWaitingTermination+0x54>)
 800537e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <prvCheckTasksWaitingTermination+0x58>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3b01      	subs	r3, #1
 8005386:	4a0a      	ldr	r2, [pc, #40]	@ (80053b0 <prvCheckTasksWaitingTermination+0x58>)
 8005388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800538a:	f000 fe07 	bl	8005f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f810 	bl	80053b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005394:	4b06      	ldr	r3, [pc, #24]	@ (80053b0 <prvCheckTasksWaitingTermination+0x58>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e1      	bne.n	8005360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000e9c 	.word	0x20000e9c
 80053ac:	20000ec8 	.word	0x20000ec8
 80053b0:	20000eb0 	.word	0x20000eb0

080053b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3354      	adds	r3, #84	@ 0x54
 80053c0:	4618      	mov	r0, r3
 80053c2:	f001 f905 	bl	80065d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d108      	bne.n	80053e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 ff9f 	bl	8006318 <vPortFree>
				vPortFree( pxTCB );
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 ff9c 	bl	8006318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053e0:	e019      	b.n	8005416 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d103      	bne.n	80053f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 ff93 	bl	8006318 <vPortFree>
	}
 80053f2:	e010      	b.n	8005416 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d00b      	beq.n	8005416 <prvDeleteTCB+0x62>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	60fb      	str	r3, [r7, #12]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <prvDeleteTCB+0x5e>
	}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005426:	4b0c      	ldr	r3, [pc, #48]	@ (8005458 <prvResetNextTaskUnblockTime+0x38>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005430:	4b0a      	ldr	r3, [pc, #40]	@ (800545c <prvResetNextTaskUnblockTime+0x3c>)
 8005432:	f04f 32ff 	mov.w	r2, #4294967295
 8005436:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005438:	e008      	b.n	800544c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800543a:	4b07      	ldr	r3, [pc, #28]	@ (8005458 <prvResetNextTaskUnblockTime+0x38>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4a04      	ldr	r2, [pc, #16]	@ (800545c <prvResetNextTaskUnblockTime+0x3c>)
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	20000e80 	.word	0x20000e80
 800545c:	20000ee8 	.word	0x20000ee8

08005460 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005466:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <xTaskGetSchedulerState+0x34>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800546e:	2301      	movs	r3, #1
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	e008      	b.n	8005486 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005474:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <xTaskGetSchedulerState+0x38>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800547c:	2302      	movs	r3, #2
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	e001      	b.n	8005486 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005482:	2300      	movs	r3, #0
 8005484:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005486:	687b      	ldr	r3, [r7, #4]
	}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	20000ed4 	.word	0x20000ed4
 8005498:	20000ef0 	.word	0x20000ef0

0800549c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d058      	beq.n	8005564 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005570 <xTaskPriorityDisinherit+0xd4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d00b      	beq.n	80054d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	60fb      	str	r3, [r7, #12]
}
 80054ce:	bf00      	nop
 80054d0:	bf00      	nop
 80054d2:	e7fd      	b.n	80054d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60bb      	str	r3, [r7, #8]
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f8:	1e5a      	subs	r2, r3, #1
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005506:	429a      	cmp	r2, r3
 8005508:	d02c      	beq.n	8005564 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800550e:	2b00      	cmp	r3, #0
 8005510:	d128      	bne.n	8005564 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3304      	adds	r3, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f7fe fc26 	bl	8003d68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005534:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <xTaskPriorityDisinherit+0xd8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d903      	bls.n	8005544 <xTaskPriorityDisinherit+0xa8>
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	4a0c      	ldr	r2, [pc, #48]	@ (8005574 <xTaskPriorityDisinherit+0xd8>)
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4a09      	ldr	r2, [pc, #36]	@ (8005578 <xTaskPriorityDisinherit+0xdc>)
 8005552:	441a      	add	r2, r3
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	3304      	adds	r3, #4
 8005558:	4619      	mov	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	f7fe fba7 	bl	8003cae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005564:	697b      	ldr	r3, [r7, #20]
	}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	200009f4 	.word	0x200009f4
 8005574:	20000ed0 	.word	0x20000ed0
 8005578:	200009f8 	.word	0x200009f8

0800557c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005586:	4b21      	ldr	r3, [pc, #132]	@ (800560c <prvAddCurrentTaskToDelayedList+0x90>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800558c:	4b20      	ldr	r3, [pc, #128]	@ (8005610 <prvAddCurrentTaskToDelayedList+0x94>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3304      	adds	r3, #4
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe fbe8 	bl	8003d68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d10a      	bne.n	80055b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005610 <prvAddCurrentTaskToDelayedList+0x94>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3304      	adds	r3, #4
 80055ac:	4619      	mov	r1, r3
 80055ae:	4819      	ldr	r0, [pc, #100]	@ (8005614 <prvAddCurrentTaskToDelayedList+0x98>)
 80055b0:	f7fe fb7d 	bl	8003cae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055b4:	e026      	b.n	8005604 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055be:	4b14      	ldr	r3, [pc, #80]	@ (8005610 <prvAddCurrentTaskToDelayedList+0x94>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d209      	bcs.n	80055e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ce:	4b12      	ldr	r3, [pc, #72]	@ (8005618 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005610 <prvAddCurrentTaskToDelayedList+0x94>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f7fe fb8b 	bl	8003cf6 <vListInsert>
}
 80055e0:	e010      	b.n	8005604 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055e2:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <prvAddCurrentTaskToDelayedList+0xa0>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005610 <prvAddCurrentTaskToDelayedList+0x94>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4619      	mov	r1, r3
 80055ee:	4610      	mov	r0, r2
 80055f0:	f7fe fb81 	bl	8003cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d202      	bcs.n	8005604 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055fe:	4a08      	ldr	r2, [pc, #32]	@ (8005620 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6013      	str	r3, [r2, #0]
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20000ecc 	.word	0x20000ecc
 8005610:	200009f4 	.word	0x200009f4
 8005614:	20000eb4 	.word	0x20000eb4
 8005618:	20000e84 	.word	0x20000e84
 800561c:	20000e80 	.word	0x20000e80
 8005620:	20000ee8 	.word	0x20000ee8

08005624 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	@ 0x28
 8005628:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800562e:	f000 fb13 	bl	8005c58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005632:	4b1d      	ldr	r3, [pc, #116]	@ (80056a8 <xTimerCreateTimerTask+0x84>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d021      	beq.n	800567e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005642:	1d3a      	adds	r2, r7, #4
 8005644:	f107 0108 	add.w	r1, r7, #8
 8005648:	f107 030c 	add.w	r3, r7, #12
 800564c:	4618      	mov	r0, r3
 800564e:	f7fe fae7 	bl	8003c20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	9202      	str	r2, [sp, #8]
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	2302      	movs	r3, #2
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	460a      	mov	r2, r1
 8005664:	4911      	ldr	r1, [pc, #68]	@ (80056ac <xTimerCreateTimerTask+0x88>)
 8005666:	4812      	ldr	r0, [pc, #72]	@ (80056b0 <xTimerCreateTimerTask+0x8c>)
 8005668:	f7ff f8a2 	bl	80047b0 <xTaskCreateStatic>
 800566c:	4603      	mov	r3, r0
 800566e:	4a11      	ldr	r2, [pc, #68]	@ (80056b4 <xTimerCreateTimerTask+0x90>)
 8005670:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005672:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <xTimerCreateTimerTask+0x90>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800567a:	2301      	movs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	613b      	str	r3, [r7, #16]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800569c:	697b      	ldr	r3, [r7, #20]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000f24 	.word	0x20000f24
 80056ac:	08006fd4 	.word	0x08006fd4
 80056b0:	080057f1 	.word	0x080057f1
 80056b4:	20000f28 	.word	0x20000f28

080056b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	@ 0x28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	623b      	str	r3, [r7, #32]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056e8:	4b19      	ldr	r3, [pc, #100]	@ (8005750 <xTimerGenericCommand+0x98>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d02a      	beq.n	8005746 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b05      	cmp	r3, #5
 8005700:	dc18      	bgt.n	8005734 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005702:	f7ff fead 	bl	8005460 <xTaskGetSchedulerState>
 8005706:	4603      	mov	r3, r0
 8005708:	2b02      	cmp	r3, #2
 800570a:	d109      	bne.n	8005720 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800570c:	4b10      	ldr	r3, [pc, #64]	@ (8005750 <xTimerGenericCommand+0x98>)
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	f107 0110 	add.w	r1, r7, #16
 8005714:	2300      	movs	r3, #0
 8005716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005718:	f7fe fc5a 	bl	8003fd0 <xQueueGenericSend>
 800571c:	6278      	str	r0, [r7, #36]	@ 0x24
 800571e:	e012      	b.n	8005746 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005720:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <xTimerGenericCommand+0x98>)
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	f107 0110 	add.w	r1, r7, #16
 8005728:	2300      	movs	r3, #0
 800572a:	2200      	movs	r2, #0
 800572c:	f7fe fc50 	bl	8003fd0 <xQueueGenericSend>
 8005730:	6278      	str	r0, [r7, #36]	@ 0x24
 8005732:	e008      	b.n	8005746 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005734:	4b06      	ldr	r3, [pc, #24]	@ (8005750 <xTimerGenericCommand+0x98>)
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	f107 0110 	add.w	r1, r7, #16
 800573c:	2300      	movs	r3, #0
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	f7fe fd48 	bl	80041d4 <xQueueGenericSendFromISR>
 8005744:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005748:	4618      	mov	r0, r3
 800574a:	3728      	adds	r7, #40	@ 0x28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20000f24 	.word	0x20000f24

08005754 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af02      	add	r7, sp, #8
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800575e:	4b23      	ldr	r3, [pc, #140]	@ (80057ec <prvProcessExpiredTimer+0x98>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	3304      	adds	r3, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fafb 	bl	8003d68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d023      	beq.n	80057c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	18d1      	adds	r1, r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	6978      	ldr	r0, [r7, #20]
 800578e:	f000 f8d5 	bl	800593c <prvInsertTimerInActiveList>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d020      	beq.n	80057da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005798:	2300      	movs	r3, #0
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	2300      	movs	r3, #0
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	2100      	movs	r1, #0
 80057a2:	6978      	ldr	r0, [r7, #20]
 80057a4:	f7ff ff88 	bl	80056b8 <xTimerGenericCommand>
 80057a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d114      	bne.n	80057da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60fb      	str	r3, [r7, #12]
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	e7fd      	b.n	80057c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	6978      	ldr	r0, [r7, #20]
 80057e0:	4798      	blx	r3
}
 80057e2:	bf00      	nop
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000f1c 	.word	0x20000f1c

080057f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057f8:	f107 0308 	add.w	r3, r7, #8
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 f859 	bl	80058b4 <prvGetNextExpireTime>
 8005802:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f805 	bl	8005818 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800580e:	f000 f8d7 	bl	80059c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005812:	bf00      	nop
 8005814:	e7f0      	b.n	80057f8 <prvTimerTask+0x8>
	...

08005818 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005822:	f7ff fa29 	bl	8004c78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f866 	bl	80058fc <prvSampleTimeNow>
 8005830:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d130      	bne.n	800589a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <prvProcessTimerOrBlockTask+0x3c>
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	429a      	cmp	r2, r3
 8005844:	d806      	bhi.n	8005854 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005846:	f7ff fa25 	bl	8004c94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff ff81 	bl	8005754 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005852:	e024      	b.n	800589e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d008      	beq.n	800586c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800585a:	4b13      	ldr	r3, [pc, #76]	@ (80058a8 <prvProcessTimerOrBlockTask+0x90>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <prvProcessTimerOrBlockTask+0x50>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <prvProcessTimerOrBlockTask+0x52>
 8005868:	2300      	movs	r3, #0
 800586a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800586c:	4b0f      	ldr	r3, [pc, #60]	@ (80058ac <prvProcessTimerOrBlockTask+0x94>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	4619      	mov	r1, r3
 800587a:	f7fe ff65 	bl	8004748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800587e:	f7ff fa09 	bl	8004c94 <xTaskResumeAll>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005888:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <prvProcessTimerOrBlockTask+0x98>)
 800588a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	f3bf 8f6f 	isb	sy
}
 8005898:	e001      	b.n	800589e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800589a:	f7ff f9fb 	bl	8004c94 <xTaskResumeAll>
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000f20 	.word	0x20000f20
 80058ac:	20000f24 	.word	0x20000f24
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058bc:	4b0e      	ldr	r3, [pc, #56]	@ (80058f8 <prvGetNextExpireTime+0x44>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <prvGetNextExpireTime+0x16>
 80058c6:	2201      	movs	r2, #1
 80058c8:	e000      	b.n	80058cc <prvGetNextExpireTime+0x18>
 80058ca:	2200      	movs	r2, #0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058d8:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <prvGetNextExpireTime+0x44>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	e001      	b.n	80058e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058e8:	68fb      	ldr	r3, [r7, #12]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000f1c 	.word	0x20000f1c

080058fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005904:	f7ff fa64 	bl	8004dd0 <xTaskGetTickCount>
 8005908:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800590a:	4b0b      	ldr	r3, [pc, #44]	@ (8005938 <prvSampleTimeNow+0x3c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	429a      	cmp	r2, r3
 8005912:	d205      	bcs.n	8005920 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005914:	f000 f93a 	bl	8005b8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e002      	b.n	8005926 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005926:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <prvSampleTimeNow+0x3c>)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800592c:	68fb      	ldr	r3, [r7, #12]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000f2c 	.word	0x20000f2c

0800593c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	429a      	cmp	r2, r3
 8005960:	d812      	bhi.n	8005988 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	1ad2      	subs	r2, r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	429a      	cmp	r2, r3
 800596e:	d302      	bcc.n	8005976 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	e01b      	b.n	80059ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005976:	4b10      	ldr	r3, [pc, #64]	@ (80059b8 <prvInsertTimerInActiveList+0x7c>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3304      	adds	r3, #4
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f7fe f9b8 	bl	8003cf6 <vListInsert>
 8005986:	e012      	b.n	80059ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d206      	bcs.n	800599e <prvInsertTimerInActiveList+0x62>
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d302      	bcc.n	800599e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005998:	2301      	movs	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e007      	b.n	80059ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800599e:	4b07      	ldr	r3, [pc, #28]	@ (80059bc <prvInsertTimerInActiveList+0x80>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe f9a4 	bl	8003cf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059ae:	697b      	ldr	r3, [r7, #20]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000f20 	.word	0x20000f20
 80059bc:	20000f1c 	.word	0x20000f1c

080059c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	@ 0x38
 80059c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059c6:	e0ce      	b.n	8005b66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da19      	bge.n	8005a02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	3304      	adds	r3, #4
 80059d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	61fb      	str	r3, [r7, #28]
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	e7fd      	b.n	80059ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f8:	6850      	ldr	r0, [r2, #4]
 80059fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059fc:	6892      	ldr	r2, [r2, #8]
 80059fe:	4611      	mov	r1, r2
 8005a00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f2c0 80ae 	blt.w	8005b66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe f9a4 	bl	8003d68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a20:	463b      	mov	r3, r7
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff ff6a 	bl	80058fc <prvSampleTimeNow>
 8005a28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b09      	cmp	r3, #9
 8005a2e:	f200 8097 	bhi.w	8005b60 <prvProcessReceivedCommands+0x1a0>
 8005a32:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <prvProcessReceivedCommands+0x78>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	08005a61 	.word	0x08005a61
 8005a40:	08005a61 	.word	0x08005a61
 8005a44:	08005ad7 	.word	0x08005ad7
 8005a48:	08005aeb 	.word	0x08005aeb
 8005a4c:	08005b37 	.word	0x08005b37
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005a61 	.word	0x08005a61
 8005a58:	08005ad7 	.word	0x08005ad7
 8005a5c:	08005aeb 	.word	0x08005aeb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	18d1      	adds	r1, r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a80:	f7ff ff5c 	bl	800593c <prvInsertTimerInActiveList>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d06c      	beq.n	8005b64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d061      	beq.n	8005b64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	441a      	add	r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2300      	movs	r3, #0
 8005aae:	2100      	movs	r1, #0
 8005ab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab2:	f7ff fe01 	bl	80056b8 <xTimerGenericCommand>
 8005ab6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d152      	bne.n	8005b64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	61bb      	str	r3, [r7, #24]
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	e7fd      	b.n	8005ad2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ae8:	e03d      	b.n	8005b66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10b      	bne.n	8005b22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	617b      	str	r3, [r7, #20]
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	e7fd      	b.n	8005b1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	18d1      	adds	r1, r2, r3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b30:	f7ff ff04 	bl	800593c <prvInsertTimerInActiveList>
					break;
 8005b34:	e017      	b.n	8005b66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005b44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b46:	f000 fbe7 	bl	8006318 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b4a:	e00c      	b.n	8005b66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b5e:	e002      	b.n	8005b66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005b60:	bf00      	nop
 8005b62:	e000      	b.n	8005b66 <prvProcessReceivedCommands+0x1a6>
					break;
 8005b64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b66:	4b08      	ldr	r3, [pc, #32]	@ (8005b88 <prvProcessReceivedCommands+0x1c8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	1d39      	adds	r1, r7, #4
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fbce 	bl	8004310 <xQueueReceive>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f47f af26 	bne.w	80059c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	3730      	adds	r7, #48	@ 0x30
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000f24 	.word	0x20000f24

08005b8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b92:	e049      	b.n	8005c28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b94:	4b2e      	ldr	r3, [pc, #184]	@ (8005c50 <prvSwitchTimerLists+0xc4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8005c50 <prvSwitchTimerLists+0xc4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe f8db 	bl	8003d68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d02f      	beq.n	8005c28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4413      	add	r3, r2
 8005bd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d90e      	bls.n	8005bf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005be6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c50 <prvSwitchTimerLists+0xc4>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f7fe f880 	bl	8003cf6 <vListInsert>
 8005bf6:	e017      	b.n	8005c28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	2100      	movs	r1, #0
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff fd58 	bl	80056b8 <xTimerGenericCommand>
 8005c08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10b      	bne.n	8005c28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	603b      	str	r3, [r7, #0]
}
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c28:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <prvSwitchTimerLists+0xc4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1b0      	bne.n	8005b94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c32:	4b07      	ldr	r3, [pc, #28]	@ (8005c50 <prvSwitchTimerLists+0xc4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c38:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <prvSwitchTimerLists+0xc8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a04      	ldr	r2, [pc, #16]	@ (8005c50 <prvSwitchTimerLists+0xc4>)
 8005c3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c40:	4a04      	ldr	r2, [pc, #16]	@ (8005c54 <prvSwitchTimerLists+0xc8>)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6013      	str	r3, [r2, #0]
}
 8005c46:	bf00      	nop
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000f1c 	.word	0x20000f1c
 8005c54:	20000f20 	.word	0x20000f20

08005c58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c5e:	f000 f96b 	bl	8005f38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c62:	4b15      	ldr	r3, [pc, #84]	@ (8005cb8 <prvCheckForValidListAndQueue+0x60>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d120      	bne.n	8005cac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c6a:	4814      	ldr	r0, [pc, #80]	@ (8005cbc <prvCheckForValidListAndQueue+0x64>)
 8005c6c:	f7fd fff2 	bl	8003c54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c70:	4813      	ldr	r0, [pc, #76]	@ (8005cc0 <prvCheckForValidListAndQueue+0x68>)
 8005c72:	f7fd ffef 	bl	8003c54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c76:	4b13      	ldr	r3, [pc, #76]	@ (8005cc4 <prvCheckForValidListAndQueue+0x6c>)
 8005c78:	4a10      	ldr	r2, [pc, #64]	@ (8005cbc <prvCheckForValidListAndQueue+0x64>)
 8005c7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c7c:	4b12      	ldr	r3, [pc, #72]	@ (8005cc8 <prvCheckForValidListAndQueue+0x70>)
 8005c7e:	4a10      	ldr	r2, [pc, #64]	@ (8005cc0 <prvCheckForValidListAndQueue+0x68>)
 8005c80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c82:	2300      	movs	r3, #0
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	4b11      	ldr	r3, [pc, #68]	@ (8005ccc <prvCheckForValidListAndQueue+0x74>)
 8005c88:	4a11      	ldr	r2, [pc, #68]	@ (8005cd0 <prvCheckForValidListAndQueue+0x78>)
 8005c8a:	2110      	movs	r1, #16
 8005c8c:	200a      	movs	r0, #10
 8005c8e:	f7fe f8ff 	bl	8003e90 <xQueueGenericCreateStatic>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4a08      	ldr	r2, [pc, #32]	@ (8005cb8 <prvCheckForValidListAndQueue+0x60>)
 8005c96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c98:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <prvCheckForValidListAndQueue+0x60>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ca0:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <prvCheckForValidListAndQueue+0x60>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	490b      	ldr	r1, [pc, #44]	@ (8005cd4 <prvCheckForValidListAndQueue+0x7c>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe fd24 	bl	80046f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cac:	f000 f976 	bl	8005f9c <vPortExitCritical>
}
 8005cb0:	bf00      	nop
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000f24 	.word	0x20000f24
 8005cbc:	20000ef4 	.word	0x20000ef4
 8005cc0:	20000f08 	.word	0x20000f08
 8005cc4:	20000f1c 	.word	0x20000f1c
 8005cc8:	20000f20 	.word	0x20000f20
 8005ccc:	20000fd0 	.word	0x20000fd0
 8005cd0:	20000f30 	.word	0x20000f30
 8005cd4:	08006fdc 	.word	0x08006fdc

08005cd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3b04      	subs	r3, #4
 8005ce8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3b04      	subs	r3, #4
 8005cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f023 0201 	bic.w	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3b04      	subs	r3, #4
 8005d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d08:	4a0c      	ldr	r2, [pc, #48]	@ (8005d3c <pxPortInitialiseStack+0x64>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3b14      	subs	r3, #20
 8005d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3b04      	subs	r3, #4
 8005d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f06f 0202 	mvn.w	r2, #2
 8005d26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3b20      	subs	r3, #32
 8005d2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	08005d41 	.word	0x08005d41

08005d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d4a:	4b13      	ldr	r3, [pc, #76]	@ (8005d98 <prvTaskExitError+0x58>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d00b      	beq.n	8005d6c <prvTaskExitError+0x2c>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	60fb      	str	r3, [r7, #12]
}
 8005d66:	bf00      	nop
 8005d68:	bf00      	nop
 8005d6a:	e7fd      	b.n	8005d68 <prvTaskExitError+0x28>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60bb      	str	r3, [r7, #8]
}
 8005d7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d80:	bf00      	nop
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0fc      	beq.n	8005d82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	2000000c 	.word	0x2000000c
 8005d9c:	00000000 	.word	0x00000000

08005da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005da0:	4b07      	ldr	r3, [pc, #28]	@ (8005dc0 <pxCurrentTCBConst2>)
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	6808      	ldr	r0, [r1, #0]
 8005da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005daa:	f380 8809 	msr	PSP, r0
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f04f 0000 	mov.w	r0, #0
 8005db6:	f380 8811 	msr	BASEPRI, r0
 8005dba:	4770      	bx	lr
 8005dbc:	f3af 8000 	nop.w

08005dc0 <pxCurrentTCBConst2>:
 8005dc0:	200009f4 	.word	0x200009f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop

08005dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005dc8:	4808      	ldr	r0, [pc, #32]	@ (8005dec <prvPortStartFirstTask+0x24>)
 8005dca:	6800      	ldr	r0, [r0, #0]
 8005dcc:	6800      	ldr	r0, [r0, #0]
 8005dce:	f380 8808 	msr	MSP, r0
 8005dd2:	f04f 0000 	mov.w	r0, #0
 8005dd6:	f380 8814 	msr	CONTROL, r0
 8005dda:	b662      	cpsie	i
 8005ddc:	b661      	cpsie	f
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	df00      	svc	0
 8005de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dea:	bf00      	nop
 8005dec:	e000ed08 	.word	0xe000ed08

08005df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005df6:	4b47      	ldr	r3, [pc, #284]	@ (8005f14 <xPortStartScheduler+0x124>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a47      	ldr	r2, [pc, #284]	@ (8005f18 <xPortStartScheduler+0x128>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d10b      	bne.n	8005e18 <xPortStartScheduler+0x28>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	613b      	str	r3, [r7, #16]
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e18:	4b3e      	ldr	r3, [pc, #248]	@ (8005f14 <xPortStartScheduler+0x124>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f1c <xPortStartScheduler+0x12c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d10b      	bne.n	8005e3a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	60fb      	str	r3, [r7, #12]
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	e7fd      	b.n	8005e36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e3a:	4b39      	ldr	r3, [pc, #228]	@ (8005f20 <xPortStartScheduler+0x130>)
 8005e3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	22ff      	movs	r2, #255	@ 0xff
 8005e4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	4b31      	ldr	r3, [pc, #196]	@ (8005f24 <xPortStartScheduler+0x134>)
 8005e60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e62:	4b31      	ldr	r3, [pc, #196]	@ (8005f28 <xPortStartScheduler+0x138>)
 8005e64:	2207      	movs	r2, #7
 8005e66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e68:	e009      	b.n	8005e7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f28 <xPortStartScheduler+0x138>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	4a2d      	ldr	r2, [pc, #180]	@ (8005f28 <xPortStartScheduler+0x138>)
 8005e72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e7e:	78fb      	ldrb	r3, [r7, #3]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e86:	2b80      	cmp	r3, #128	@ 0x80
 8005e88:	d0ef      	beq.n	8005e6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e8a:	4b27      	ldr	r3, [pc, #156]	@ (8005f28 <xPortStartScheduler+0x138>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f1c3 0307 	rsb	r3, r3, #7
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d00b      	beq.n	8005eae <xPortStartScheduler+0xbe>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60bb      	str	r3, [r7, #8]
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	e7fd      	b.n	8005eaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005eae:	4b1e      	ldr	r3, [pc, #120]	@ (8005f28 <xPortStartScheduler+0x138>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f28 <xPortStartScheduler+0x138>)
 8005eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <xPortStartScheduler+0x138>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ec0:	4a19      	ldr	r2, [pc, #100]	@ (8005f28 <xPortStartScheduler+0x138>)
 8005ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ecc:	4b17      	ldr	r3, [pc, #92]	@ (8005f2c <xPortStartScheduler+0x13c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a16      	ldr	r2, [pc, #88]	@ (8005f2c <xPortStartScheduler+0x13c>)
 8005ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ed8:	4b14      	ldr	r3, [pc, #80]	@ (8005f2c <xPortStartScheduler+0x13c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a13      	ldr	r2, [pc, #76]	@ (8005f2c <xPortStartScheduler+0x13c>)
 8005ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ee4:	f000 f8da 	bl	800609c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ee8:	4b11      	ldr	r3, [pc, #68]	@ (8005f30 <xPortStartScheduler+0x140>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005eee:	f000 f8f9 	bl	80060e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ef2:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <xPortStartScheduler+0x144>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8005f34 <xPortStartScheduler+0x144>)
 8005ef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005efc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005efe:	f7ff ff63 	bl	8005dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f02:	f7ff f82f 	bl	8004f64 <vTaskSwitchContext>
	prvTaskExitError();
 8005f06:	f7ff ff1b 	bl	8005d40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	e000ed00 	.word	0xe000ed00
 8005f18:	410fc271 	.word	0x410fc271
 8005f1c:	410fc270 	.word	0x410fc270
 8005f20:	e000e400 	.word	0xe000e400
 8005f24:	20001020 	.word	0x20001020
 8005f28:	20001024 	.word	0x20001024
 8005f2c:	e000ed20 	.word	0xe000ed20
 8005f30:	2000000c 	.word	0x2000000c
 8005f34:	e000ef34 	.word	0xe000ef34

08005f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	607b      	str	r3, [r7, #4]
}
 8005f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f52:	4b10      	ldr	r3, [pc, #64]	@ (8005f94 <vPortEnterCritical+0x5c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3301      	adds	r3, #1
 8005f58:	4a0e      	ldr	r2, [pc, #56]	@ (8005f94 <vPortEnterCritical+0x5c>)
 8005f5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f94 <vPortEnterCritical+0x5c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d110      	bne.n	8005f86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f64:	4b0c      	ldr	r3, [pc, #48]	@ (8005f98 <vPortEnterCritical+0x60>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00b      	beq.n	8005f86 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	603b      	str	r3, [r7, #0]
}
 8005f80:	bf00      	nop
 8005f82:	bf00      	nop
 8005f84:	e7fd      	b.n	8005f82 <vPortEnterCritical+0x4a>
	}
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	2000000c 	.word	0x2000000c
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fa2:	4b12      	ldr	r3, [pc, #72]	@ (8005fec <vPortExitCritical+0x50>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <vPortExitCritical+0x26>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	607b      	str	r3, [r7, #4]
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	e7fd      	b.n	8005fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fec <vPortExitCritical+0x50>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	4a08      	ldr	r2, [pc, #32]	@ (8005fec <vPortExitCritical+0x50>)
 8005fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fcc:	4b07      	ldr	r3, [pc, #28]	@ (8005fec <vPortExitCritical+0x50>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <vPortExitCritical+0x44>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f383 8811 	msr	BASEPRI, r3
}
 8005fde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	2000000c 	.word	0x2000000c

08005ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ff0:	f3ef 8009 	mrs	r0, PSP
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	4b15      	ldr	r3, [pc, #84]	@ (8006050 <pxCurrentTCBConst>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	f01e 0f10 	tst.w	lr, #16
 8006000:	bf08      	it	eq
 8006002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	6010      	str	r0, [r2, #0]
 800600c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006014:	f380 8811 	msr	BASEPRI, r0
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f7fe ffa0 	bl	8004f64 <vTaskSwitchContext>
 8006024:	f04f 0000 	mov.w	r0, #0
 8006028:	f380 8811 	msr	BASEPRI, r0
 800602c:	bc09      	pop	{r0, r3}
 800602e:	6819      	ldr	r1, [r3, #0]
 8006030:	6808      	ldr	r0, [r1, #0]
 8006032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006036:	f01e 0f10 	tst.w	lr, #16
 800603a:	bf08      	it	eq
 800603c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006040:	f380 8809 	msr	PSP, r0
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	f3af 8000 	nop.w

08006050 <pxCurrentTCBConst>:
 8006050:	200009f4 	.word	0x200009f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	607b      	str	r3, [r7, #4]
}
 8006070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006072:	f7fe febd 	bl	8004df0 <xTaskIncrementTick>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800607c:	4b06      	ldr	r3, [pc, #24]	@ (8006098 <xPortSysTickHandler+0x40>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	2300      	movs	r3, #0
 8006086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f383 8811 	msr	BASEPRI, r3
}
 800608e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060a0:	4b0b      	ldr	r3, [pc, #44]	@ (80060d0 <vPortSetupTimerInterrupt+0x34>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060a6:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <vPortSetupTimerInterrupt+0x38>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060ac:	4b0a      	ldr	r3, [pc, #40]	@ (80060d8 <vPortSetupTimerInterrupt+0x3c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0a      	ldr	r2, [pc, #40]	@ (80060dc <vPortSetupTimerInterrupt+0x40>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	099b      	lsrs	r3, r3, #6
 80060b8:	4a09      	ldr	r2, [pc, #36]	@ (80060e0 <vPortSetupTimerInterrupt+0x44>)
 80060ba:	3b01      	subs	r3, #1
 80060bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060be:	4b04      	ldr	r3, [pc, #16]	@ (80060d0 <vPortSetupTimerInterrupt+0x34>)
 80060c0:	2207      	movs	r2, #7
 80060c2:	601a      	str	r2, [r3, #0]
}
 80060c4:	bf00      	nop
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	e000e010 	.word	0xe000e010
 80060d4:	e000e018 	.word	0xe000e018
 80060d8:	20000000 	.word	0x20000000
 80060dc:	10624dd3 	.word	0x10624dd3
 80060e0:	e000e014 	.word	0xe000e014

080060e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80060f4 <vPortEnableVFP+0x10>
 80060e8:	6801      	ldr	r1, [r0, #0]
 80060ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80060ee:	6001      	str	r1, [r0, #0]
 80060f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060f2:	bf00      	nop
 80060f4:	e000ed88 	.word	0xe000ed88

080060f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060fe:	f3ef 8305 	mrs	r3, IPSR
 8006102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b0f      	cmp	r3, #15
 8006108:	d915      	bls.n	8006136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800610a:	4a18      	ldr	r2, [pc, #96]	@ (800616c <vPortValidateInterruptPriority+0x74>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006114:	4b16      	ldr	r3, [pc, #88]	@ (8006170 <vPortValidateInterruptPriority+0x78>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	7afa      	ldrb	r2, [r7, #11]
 800611a:	429a      	cmp	r2, r3
 800611c:	d20b      	bcs.n	8006136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	607b      	str	r3, [r7, #4]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006136:	4b0f      	ldr	r3, [pc, #60]	@ (8006174 <vPortValidateInterruptPriority+0x7c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800613e:	4b0e      	ldr	r3, [pc, #56]	@ (8006178 <vPortValidateInterruptPriority+0x80>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d90b      	bls.n	800615e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	603b      	str	r3, [r7, #0]
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	e7fd      	b.n	800615a <vPortValidateInterruptPriority+0x62>
	}
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	e000e3f0 	.word	0xe000e3f0
 8006170:	20001020 	.word	0x20001020
 8006174:	e000ed0c 	.word	0xe000ed0c
 8006178:	20001024 	.word	0x20001024

0800617c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	@ 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006188:	f7fe fd76 	bl	8004c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800618c:	4b5c      	ldr	r3, [pc, #368]	@ (8006300 <pvPortMalloc+0x184>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006194:	f000 f924 	bl	80063e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006198:	4b5a      	ldr	r3, [pc, #360]	@ (8006304 <pvPortMalloc+0x188>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f040 8095 	bne.w	80062d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01e      	beq.n	80061ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061ac:	2208      	movs	r2, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4413      	add	r3, r2
 80061b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d015      	beq.n	80061ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f023 0307 	bic.w	r3, r3, #7
 80061c4:	3308      	adds	r3, #8
 80061c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <pvPortMalloc+0x6e>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	617b      	str	r3, [r7, #20]
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	e7fd      	b.n	80061e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d06f      	beq.n	80062d0 <pvPortMalloc+0x154>
 80061f0:	4b45      	ldr	r3, [pc, #276]	@ (8006308 <pvPortMalloc+0x18c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d86a      	bhi.n	80062d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061fa:	4b44      	ldr	r3, [pc, #272]	@ (800630c <pvPortMalloc+0x190>)
 80061fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061fe:	4b43      	ldr	r3, [pc, #268]	@ (800630c <pvPortMalloc+0x190>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006204:	e004      	b.n	8006210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	429a      	cmp	r2, r3
 8006218:	d903      	bls.n	8006222 <pvPortMalloc+0xa6>
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f1      	bne.n	8006206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006222:	4b37      	ldr	r3, [pc, #220]	@ (8006300 <pvPortMalloc+0x184>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006228:	429a      	cmp	r2, r3
 800622a:	d051      	beq.n	80062d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2208      	movs	r2, #8
 8006232:	4413      	add	r3, r2
 8006234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	1ad2      	subs	r2, r2, r3
 8006246:	2308      	movs	r3, #8
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	429a      	cmp	r2, r3
 800624c:	d920      	bls.n	8006290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800624e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4413      	add	r3, r2
 8006254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <pvPortMalloc+0xfc>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	613b      	str	r3, [r7, #16]
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	e7fd      	b.n	8006274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800628a:	69b8      	ldr	r0, [r7, #24]
 800628c:	f000 f90a 	bl	80064a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006290:	4b1d      	ldr	r3, [pc, #116]	@ (8006308 <pvPortMalloc+0x18c>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	4a1b      	ldr	r2, [pc, #108]	@ (8006308 <pvPortMalloc+0x18c>)
 800629c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800629e:	4b1a      	ldr	r3, [pc, #104]	@ (8006308 <pvPortMalloc+0x18c>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <pvPortMalloc+0x194>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d203      	bcs.n	80062b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062aa:	4b17      	ldr	r3, [pc, #92]	@ (8006308 <pvPortMalloc+0x18c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a18      	ldr	r2, [pc, #96]	@ (8006310 <pvPortMalloc+0x194>)
 80062b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	4b13      	ldr	r3, [pc, #76]	@ (8006304 <pvPortMalloc+0x188>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062c6:	4b13      	ldr	r3, [pc, #76]	@ (8006314 <pvPortMalloc+0x198>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3301      	adds	r3, #1
 80062cc:	4a11      	ldr	r2, [pc, #68]	@ (8006314 <pvPortMalloc+0x198>)
 80062ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062d0:	f7fe fce0 	bl	8004c94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <pvPortMalloc+0x17a>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	60fb      	str	r3, [r7, #12]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <pvPortMalloc+0x176>
	return pvReturn;
 80062f6:	69fb      	ldr	r3, [r7, #28]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3728      	adds	r7, #40	@ 0x28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20001be8 	.word	0x20001be8
 8006304:	20001bfc 	.word	0x20001bfc
 8006308:	20001bec 	.word	0x20001bec
 800630c:	20001be0 	.word	0x20001be0
 8006310:	20001bf0 	.word	0x20001bf0
 8006314:	20001bf4 	.word	0x20001bf4

08006318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d04f      	beq.n	80063ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800632a:	2308      	movs	r3, #8
 800632c:	425b      	negs	r3, r3
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4413      	add	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	4b25      	ldr	r3, [pc, #148]	@ (80063d4 <vPortFree+0xbc>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4013      	ands	r3, r2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <vPortFree+0x46>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60fb      	str	r3, [r7, #12]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <vPortFree+0x66>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60bb      	str	r3, [r7, #8]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	4b14      	ldr	r3, [pc, #80]	@ (80063d4 <vPortFree+0xbc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4013      	ands	r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01e      	beq.n	80063ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d11a      	bne.n	80063ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	4b0e      	ldr	r3, [pc, #56]	@ (80063d4 <vPortFree+0xbc>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	43db      	mvns	r3, r3
 800639e:	401a      	ands	r2, r3
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063a4:	f7fe fc68 	bl	8004c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	4b0a      	ldr	r3, [pc, #40]	@ (80063d8 <vPortFree+0xc0>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4413      	add	r3, r2
 80063b2:	4a09      	ldr	r2, [pc, #36]	@ (80063d8 <vPortFree+0xc0>)
 80063b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063b6:	6938      	ldr	r0, [r7, #16]
 80063b8:	f000 f874 	bl	80064a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063bc:	4b07      	ldr	r3, [pc, #28]	@ (80063dc <vPortFree+0xc4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3301      	adds	r3, #1
 80063c2:	4a06      	ldr	r2, [pc, #24]	@ (80063dc <vPortFree+0xc4>)
 80063c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063c6:	f7fe fc65 	bl	8004c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ca:	bf00      	nop
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20001bfc 	.word	0x20001bfc
 80063d8:	20001bec 	.word	0x20001bec
 80063dc:	20001bf8 	.word	0x20001bf8

080063e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063e6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80063ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063ec:	4b27      	ldr	r3, [pc, #156]	@ (800648c <prvHeapInit+0xac>)
 80063ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00c      	beq.n	8006414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3307      	adds	r3, #7
 80063fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0307 	bic.w	r3, r3, #7
 8006406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	4a1f      	ldr	r2, [pc, #124]	@ (800648c <prvHeapInit+0xac>)
 8006410:	4413      	add	r3, r2
 8006412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006418:	4a1d      	ldr	r2, [pc, #116]	@ (8006490 <prvHeapInit+0xb0>)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800641e:	4b1c      	ldr	r3, [pc, #112]	@ (8006490 <prvHeapInit+0xb0>)
 8006420:	2200      	movs	r2, #0
 8006422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	4413      	add	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800642c:	2208      	movs	r2, #8
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1a9b      	subs	r3, r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0307 	bic.w	r3, r3, #7
 800643a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4a15      	ldr	r2, [pc, #84]	@ (8006494 <prvHeapInit+0xb4>)
 8006440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006442:	4b14      	ldr	r3, [pc, #80]	@ (8006494 <prvHeapInit+0xb4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2200      	movs	r2, #0
 8006448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800644a:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <prvHeapInit+0xb4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	1ad2      	subs	r2, r2, r3
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006460:	4b0c      	ldr	r3, [pc, #48]	@ (8006494 <prvHeapInit+0xb4>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	4a0a      	ldr	r2, [pc, #40]	@ (8006498 <prvHeapInit+0xb8>)
 800646e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4a09      	ldr	r2, [pc, #36]	@ (800649c <prvHeapInit+0xbc>)
 8006476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006478:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <prvHeapInit+0xc0>)
 800647a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800647e:	601a      	str	r2, [r3, #0]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	20001028 	.word	0x20001028
 8006490:	20001be0 	.word	0x20001be0
 8006494:	20001be8 	.word	0x20001be8
 8006498:	20001bf0 	.word	0x20001bf0
 800649c:	20001bec 	.word	0x20001bec
 80064a0:	20001bfc 	.word	0x20001bfc

080064a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064ac:	4b28      	ldr	r3, [pc, #160]	@ (8006550 <prvInsertBlockIntoFreeList+0xac>)
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e002      	b.n	80064b8 <prvInsertBlockIntoFreeList+0x14>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d8f7      	bhi.n	80064b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4413      	add	r3, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d108      	bne.n	80064e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	441a      	add	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	441a      	add	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d118      	bne.n	800652c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4b15      	ldr	r3, [pc, #84]	@ (8006554 <prvInsertBlockIntoFreeList+0xb0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d00d      	beq.n	8006522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	441a      	add	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e008      	b.n	8006534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006522:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <prvInsertBlockIntoFreeList+0xb0>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	e003      	b.n	8006534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d002      	beq.n	8006542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20001be0 	.word	0x20001be0
 8006554:	20001be8 	.word	0x20001be8

08006558 <sniprintf>:
 8006558:	b40c      	push	{r2, r3}
 800655a:	b530      	push	{r4, r5, lr}
 800655c:	4b17      	ldr	r3, [pc, #92]	@ (80065bc <sniprintf+0x64>)
 800655e:	1e0c      	subs	r4, r1, #0
 8006560:	681d      	ldr	r5, [r3, #0]
 8006562:	b09d      	sub	sp, #116	@ 0x74
 8006564:	da08      	bge.n	8006578 <sniprintf+0x20>
 8006566:	238b      	movs	r3, #139	@ 0x8b
 8006568:	602b      	str	r3, [r5, #0]
 800656a:	f04f 30ff 	mov.w	r0, #4294967295
 800656e:	b01d      	add	sp, #116	@ 0x74
 8006570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006574:	b002      	add	sp, #8
 8006576:	4770      	bx	lr
 8006578:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800657c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006580:	bf14      	ite	ne
 8006582:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006586:	4623      	moveq	r3, r4
 8006588:	9304      	str	r3, [sp, #16]
 800658a:	9307      	str	r3, [sp, #28]
 800658c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006590:	9002      	str	r0, [sp, #8]
 8006592:	9006      	str	r0, [sp, #24]
 8006594:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006598:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800659a:	ab21      	add	r3, sp, #132	@ 0x84
 800659c:	a902      	add	r1, sp, #8
 800659e:	4628      	mov	r0, r5
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	f000 f9f9 	bl	8006998 <_svfiprintf_r>
 80065a6:	1c43      	adds	r3, r0, #1
 80065a8:	bfbc      	itt	lt
 80065aa:	238b      	movlt	r3, #139	@ 0x8b
 80065ac:	602b      	strlt	r3, [r5, #0]
 80065ae:	2c00      	cmp	r4, #0
 80065b0:	d0dd      	beq.n	800656e <sniprintf+0x16>
 80065b2:	9b02      	ldr	r3, [sp, #8]
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e7d9      	b.n	800656e <sniprintf+0x16>
 80065ba:	bf00      	nop
 80065bc:	20000010 	.word	0x20000010

080065c0 <memset>:
 80065c0:	4402      	add	r2, r0
 80065c2:	4603      	mov	r3, r0
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d100      	bne.n	80065ca <memset+0xa>
 80065c8:	4770      	bx	lr
 80065ca:	f803 1b01 	strb.w	r1, [r3], #1
 80065ce:	e7f9      	b.n	80065c4 <memset+0x4>

080065d0 <_reclaim_reent>:
 80065d0:	4b29      	ldr	r3, [pc, #164]	@ (8006678 <_reclaim_reent+0xa8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4283      	cmp	r3, r0
 80065d6:	b570      	push	{r4, r5, r6, lr}
 80065d8:	4604      	mov	r4, r0
 80065da:	d04b      	beq.n	8006674 <_reclaim_reent+0xa4>
 80065dc:	69c3      	ldr	r3, [r0, #28]
 80065de:	b1ab      	cbz	r3, 800660c <_reclaim_reent+0x3c>
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	b16b      	cbz	r3, 8006600 <_reclaim_reent+0x30>
 80065e4:	2500      	movs	r5, #0
 80065e6:	69e3      	ldr	r3, [r4, #28]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	5959      	ldr	r1, [r3, r5]
 80065ec:	2900      	cmp	r1, #0
 80065ee:	d13b      	bne.n	8006668 <_reclaim_reent+0x98>
 80065f0:	3504      	adds	r5, #4
 80065f2:	2d80      	cmp	r5, #128	@ 0x80
 80065f4:	d1f7      	bne.n	80065e6 <_reclaim_reent+0x16>
 80065f6:	69e3      	ldr	r3, [r4, #28]
 80065f8:	4620      	mov	r0, r4
 80065fa:	68d9      	ldr	r1, [r3, #12]
 80065fc:	f000 f878 	bl	80066f0 <_free_r>
 8006600:	69e3      	ldr	r3, [r4, #28]
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	b111      	cbz	r1, 800660c <_reclaim_reent+0x3c>
 8006606:	4620      	mov	r0, r4
 8006608:	f000 f872 	bl	80066f0 <_free_r>
 800660c:	6961      	ldr	r1, [r4, #20]
 800660e:	b111      	cbz	r1, 8006616 <_reclaim_reent+0x46>
 8006610:	4620      	mov	r0, r4
 8006612:	f000 f86d 	bl	80066f0 <_free_r>
 8006616:	69e1      	ldr	r1, [r4, #28]
 8006618:	b111      	cbz	r1, 8006620 <_reclaim_reent+0x50>
 800661a:	4620      	mov	r0, r4
 800661c:	f000 f868 	bl	80066f0 <_free_r>
 8006620:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006622:	b111      	cbz	r1, 800662a <_reclaim_reent+0x5a>
 8006624:	4620      	mov	r0, r4
 8006626:	f000 f863 	bl	80066f0 <_free_r>
 800662a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800662c:	b111      	cbz	r1, 8006634 <_reclaim_reent+0x64>
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f85e 	bl	80066f0 <_free_r>
 8006634:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006636:	b111      	cbz	r1, 800663e <_reclaim_reent+0x6e>
 8006638:	4620      	mov	r0, r4
 800663a:	f000 f859 	bl	80066f0 <_free_r>
 800663e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006640:	b111      	cbz	r1, 8006648 <_reclaim_reent+0x78>
 8006642:	4620      	mov	r0, r4
 8006644:	f000 f854 	bl	80066f0 <_free_r>
 8006648:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800664a:	b111      	cbz	r1, 8006652 <_reclaim_reent+0x82>
 800664c:	4620      	mov	r0, r4
 800664e:	f000 f84f 	bl	80066f0 <_free_r>
 8006652:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006654:	b111      	cbz	r1, 800665c <_reclaim_reent+0x8c>
 8006656:	4620      	mov	r0, r4
 8006658:	f000 f84a 	bl	80066f0 <_free_r>
 800665c:	6a23      	ldr	r3, [r4, #32]
 800665e:	b14b      	cbz	r3, 8006674 <_reclaim_reent+0xa4>
 8006660:	4620      	mov	r0, r4
 8006662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006666:	4718      	bx	r3
 8006668:	680e      	ldr	r6, [r1, #0]
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f840 	bl	80066f0 <_free_r>
 8006670:	4631      	mov	r1, r6
 8006672:	e7bb      	b.n	80065ec <_reclaim_reent+0x1c>
 8006674:	bd70      	pop	{r4, r5, r6, pc}
 8006676:	bf00      	nop
 8006678:	20000010 	.word	0x20000010

0800667c <__errno>:
 800667c:	4b01      	ldr	r3, [pc, #4]	@ (8006684 <__errno+0x8>)
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000010 	.word	0x20000010

08006688 <__libc_init_array>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4d0d      	ldr	r5, [pc, #52]	@ (80066c0 <__libc_init_array+0x38>)
 800668c:	4c0d      	ldr	r4, [pc, #52]	@ (80066c4 <__libc_init_array+0x3c>)
 800668e:	1b64      	subs	r4, r4, r5
 8006690:	10a4      	asrs	r4, r4, #2
 8006692:	2600      	movs	r6, #0
 8006694:	42a6      	cmp	r6, r4
 8006696:	d109      	bne.n	80066ac <__libc_init_array+0x24>
 8006698:	4d0b      	ldr	r5, [pc, #44]	@ (80066c8 <__libc_init_array+0x40>)
 800669a:	4c0c      	ldr	r4, [pc, #48]	@ (80066cc <__libc_init_array+0x44>)
 800669c:	f000 fc66 	bl	8006f6c <_init>
 80066a0:	1b64      	subs	r4, r4, r5
 80066a2:	10a4      	asrs	r4, r4, #2
 80066a4:	2600      	movs	r6, #0
 80066a6:	42a6      	cmp	r6, r4
 80066a8:	d105      	bne.n	80066b6 <__libc_init_array+0x2e>
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
 80066ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b0:	4798      	blx	r3
 80066b2:	3601      	adds	r6, #1
 80066b4:	e7ee      	b.n	8006694 <__libc_init_array+0xc>
 80066b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ba:	4798      	blx	r3
 80066bc:	3601      	adds	r6, #1
 80066be:	e7f2      	b.n	80066a6 <__libc_init_array+0x1e>
 80066c0:	080070b0 	.word	0x080070b0
 80066c4:	080070b0 	.word	0x080070b0
 80066c8:	080070b0 	.word	0x080070b0
 80066cc:	080070b4 	.word	0x080070b4

080066d0 <__retarget_lock_acquire_recursive>:
 80066d0:	4770      	bx	lr

080066d2 <__retarget_lock_release_recursive>:
 80066d2:	4770      	bx	lr

080066d4 <memcpy>:
 80066d4:	440a      	add	r2, r1
 80066d6:	4291      	cmp	r1, r2
 80066d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066dc:	d100      	bne.n	80066e0 <memcpy+0xc>
 80066de:	4770      	bx	lr
 80066e0:	b510      	push	{r4, lr}
 80066e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ea:	4291      	cmp	r1, r2
 80066ec:	d1f9      	bne.n	80066e2 <memcpy+0xe>
 80066ee:	bd10      	pop	{r4, pc}

080066f0 <_free_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4605      	mov	r5, r0
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d041      	beq.n	800677c <_free_r+0x8c>
 80066f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fc:	1f0c      	subs	r4, r1, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfb8      	it	lt
 8006702:	18e4      	addlt	r4, r4, r3
 8006704:	f000 f8e0 	bl	80068c8 <__malloc_lock>
 8006708:	4a1d      	ldr	r2, [pc, #116]	@ (8006780 <_free_r+0x90>)
 800670a:	6813      	ldr	r3, [r2, #0]
 800670c:	b933      	cbnz	r3, 800671c <_free_r+0x2c>
 800670e:	6063      	str	r3, [r4, #4]
 8006710:	6014      	str	r4, [r2, #0]
 8006712:	4628      	mov	r0, r5
 8006714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006718:	f000 b8dc 	b.w	80068d4 <__malloc_unlock>
 800671c:	42a3      	cmp	r3, r4
 800671e:	d908      	bls.n	8006732 <_free_r+0x42>
 8006720:	6820      	ldr	r0, [r4, #0]
 8006722:	1821      	adds	r1, r4, r0
 8006724:	428b      	cmp	r3, r1
 8006726:	bf01      	itttt	eq
 8006728:	6819      	ldreq	r1, [r3, #0]
 800672a:	685b      	ldreq	r3, [r3, #4]
 800672c:	1809      	addeq	r1, r1, r0
 800672e:	6021      	streq	r1, [r4, #0]
 8006730:	e7ed      	b.n	800670e <_free_r+0x1e>
 8006732:	461a      	mov	r2, r3
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	b10b      	cbz	r3, 800673c <_free_r+0x4c>
 8006738:	42a3      	cmp	r3, r4
 800673a:	d9fa      	bls.n	8006732 <_free_r+0x42>
 800673c:	6811      	ldr	r1, [r2, #0]
 800673e:	1850      	adds	r0, r2, r1
 8006740:	42a0      	cmp	r0, r4
 8006742:	d10b      	bne.n	800675c <_free_r+0x6c>
 8006744:	6820      	ldr	r0, [r4, #0]
 8006746:	4401      	add	r1, r0
 8006748:	1850      	adds	r0, r2, r1
 800674a:	4283      	cmp	r3, r0
 800674c:	6011      	str	r1, [r2, #0]
 800674e:	d1e0      	bne.n	8006712 <_free_r+0x22>
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	6053      	str	r3, [r2, #4]
 8006756:	4408      	add	r0, r1
 8006758:	6010      	str	r0, [r2, #0]
 800675a:	e7da      	b.n	8006712 <_free_r+0x22>
 800675c:	d902      	bls.n	8006764 <_free_r+0x74>
 800675e:	230c      	movs	r3, #12
 8006760:	602b      	str	r3, [r5, #0]
 8006762:	e7d6      	b.n	8006712 <_free_r+0x22>
 8006764:	6820      	ldr	r0, [r4, #0]
 8006766:	1821      	adds	r1, r4, r0
 8006768:	428b      	cmp	r3, r1
 800676a:	bf04      	itt	eq
 800676c:	6819      	ldreq	r1, [r3, #0]
 800676e:	685b      	ldreq	r3, [r3, #4]
 8006770:	6063      	str	r3, [r4, #4]
 8006772:	bf04      	itt	eq
 8006774:	1809      	addeq	r1, r1, r0
 8006776:	6021      	streq	r1, [r4, #0]
 8006778:	6054      	str	r4, [r2, #4]
 800677a:	e7ca      	b.n	8006712 <_free_r+0x22>
 800677c:	bd38      	pop	{r3, r4, r5, pc}
 800677e:	bf00      	nop
 8006780:	20001d44 	.word	0x20001d44

08006784 <sbrk_aligned>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	4e0f      	ldr	r6, [pc, #60]	@ (80067c4 <sbrk_aligned+0x40>)
 8006788:	460c      	mov	r4, r1
 800678a:	6831      	ldr	r1, [r6, #0]
 800678c:	4605      	mov	r5, r0
 800678e:	b911      	cbnz	r1, 8006796 <sbrk_aligned+0x12>
 8006790:	f000 fba6 	bl	8006ee0 <_sbrk_r>
 8006794:	6030      	str	r0, [r6, #0]
 8006796:	4621      	mov	r1, r4
 8006798:	4628      	mov	r0, r5
 800679a:	f000 fba1 	bl	8006ee0 <_sbrk_r>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	d103      	bne.n	80067aa <sbrk_aligned+0x26>
 80067a2:	f04f 34ff 	mov.w	r4, #4294967295
 80067a6:	4620      	mov	r0, r4
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	1cc4      	adds	r4, r0, #3
 80067ac:	f024 0403 	bic.w	r4, r4, #3
 80067b0:	42a0      	cmp	r0, r4
 80067b2:	d0f8      	beq.n	80067a6 <sbrk_aligned+0x22>
 80067b4:	1a21      	subs	r1, r4, r0
 80067b6:	4628      	mov	r0, r5
 80067b8:	f000 fb92 	bl	8006ee0 <_sbrk_r>
 80067bc:	3001      	adds	r0, #1
 80067be:	d1f2      	bne.n	80067a6 <sbrk_aligned+0x22>
 80067c0:	e7ef      	b.n	80067a2 <sbrk_aligned+0x1e>
 80067c2:	bf00      	nop
 80067c4:	20001d40 	.word	0x20001d40

080067c8 <_malloc_r>:
 80067c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067cc:	1ccd      	adds	r5, r1, #3
 80067ce:	f025 0503 	bic.w	r5, r5, #3
 80067d2:	3508      	adds	r5, #8
 80067d4:	2d0c      	cmp	r5, #12
 80067d6:	bf38      	it	cc
 80067d8:	250c      	movcc	r5, #12
 80067da:	2d00      	cmp	r5, #0
 80067dc:	4606      	mov	r6, r0
 80067de:	db01      	blt.n	80067e4 <_malloc_r+0x1c>
 80067e0:	42a9      	cmp	r1, r5
 80067e2:	d904      	bls.n	80067ee <_malloc_r+0x26>
 80067e4:	230c      	movs	r3, #12
 80067e6:	6033      	str	r3, [r6, #0]
 80067e8:	2000      	movs	r0, #0
 80067ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068c4 <_malloc_r+0xfc>
 80067f2:	f000 f869 	bl	80068c8 <__malloc_lock>
 80067f6:	f8d8 3000 	ldr.w	r3, [r8]
 80067fa:	461c      	mov	r4, r3
 80067fc:	bb44      	cbnz	r4, 8006850 <_malloc_r+0x88>
 80067fe:	4629      	mov	r1, r5
 8006800:	4630      	mov	r0, r6
 8006802:	f7ff ffbf 	bl	8006784 <sbrk_aligned>
 8006806:	1c43      	adds	r3, r0, #1
 8006808:	4604      	mov	r4, r0
 800680a:	d158      	bne.n	80068be <_malloc_r+0xf6>
 800680c:	f8d8 4000 	ldr.w	r4, [r8]
 8006810:	4627      	mov	r7, r4
 8006812:	2f00      	cmp	r7, #0
 8006814:	d143      	bne.n	800689e <_malloc_r+0xd6>
 8006816:	2c00      	cmp	r4, #0
 8006818:	d04b      	beq.n	80068b2 <_malloc_r+0xea>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	4639      	mov	r1, r7
 800681e:	4630      	mov	r0, r6
 8006820:	eb04 0903 	add.w	r9, r4, r3
 8006824:	f000 fb5c 	bl	8006ee0 <_sbrk_r>
 8006828:	4581      	cmp	r9, r0
 800682a:	d142      	bne.n	80068b2 <_malloc_r+0xea>
 800682c:	6821      	ldr	r1, [r4, #0]
 800682e:	1a6d      	subs	r5, r5, r1
 8006830:	4629      	mov	r1, r5
 8006832:	4630      	mov	r0, r6
 8006834:	f7ff ffa6 	bl	8006784 <sbrk_aligned>
 8006838:	3001      	adds	r0, #1
 800683a:	d03a      	beq.n	80068b2 <_malloc_r+0xea>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	442b      	add	r3, r5
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	f8d8 3000 	ldr.w	r3, [r8]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	bb62      	cbnz	r2, 80068a4 <_malloc_r+0xdc>
 800684a:	f8c8 7000 	str.w	r7, [r8]
 800684e:	e00f      	b.n	8006870 <_malloc_r+0xa8>
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	1b52      	subs	r2, r2, r5
 8006854:	d420      	bmi.n	8006898 <_malloc_r+0xd0>
 8006856:	2a0b      	cmp	r2, #11
 8006858:	d917      	bls.n	800688a <_malloc_r+0xc2>
 800685a:	1961      	adds	r1, r4, r5
 800685c:	42a3      	cmp	r3, r4
 800685e:	6025      	str	r5, [r4, #0]
 8006860:	bf18      	it	ne
 8006862:	6059      	strne	r1, [r3, #4]
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	bf08      	it	eq
 8006868:	f8c8 1000 	streq.w	r1, [r8]
 800686c:	5162      	str	r2, [r4, r5]
 800686e:	604b      	str	r3, [r1, #4]
 8006870:	4630      	mov	r0, r6
 8006872:	f000 f82f 	bl	80068d4 <__malloc_unlock>
 8006876:	f104 000b 	add.w	r0, r4, #11
 800687a:	1d23      	adds	r3, r4, #4
 800687c:	f020 0007 	bic.w	r0, r0, #7
 8006880:	1ac2      	subs	r2, r0, r3
 8006882:	bf1c      	itt	ne
 8006884:	1a1b      	subne	r3, r3, r0
 8006886:	50a3      	strne	r3, [r4, r2]
 8006888:	e7af      	b.n	80067ea <_malloc_r+0x22>
 800688a:	6862      	ldr	r2, [r4, #4]
 800688c:	42a3      	cmp	r3, r4
 800688e:	bf0c      	ite	eq
 8006890:	f8c8 2000 	streq.w	r2, [r8]
 8006894:	605a      	strne	r2, [r3, #4]
 8006896:	e7eb      	b.n	8006870 <_malloc_r+0xa8>
 8006898:	4623      	mov	r3, r4
 800689a:	6864      	ldr	r4, [r4, #4]
 800689c:	e7ae      	b.n	80067fc <_malloc_r+0x34>
 800689e:	463c      	mov	r4, r7
 80068a0:	687f      	ldr	r7, [r7, #4]
 80068a2:	e7b6      	b.n	8006812 <_malloc_r+0x4a>
 80068a4:	461a      	mov	r2, r3
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	d1fb      	bne.n	80068a4 <_malloc_r+0xdc>
 80068ac:	2300      	movs	r3, #0
 80068ae:	6053      	str	r3, [r2, #4]
 80068b0:	e7de      	b.n	8006870 <_malloc_r+0xa8>
 80068b2:	230c      	movs	r3, #12
 80068b4:	6033      	str	r3, [r6, #0]
 80068b6:	4630      	mov	r0, r6
 80068b8:	f000 f80c 	bl	80068d4 <__malloc_unlock>
 80068bc:	e794      	b.n	80067e8 <_malloc_r+0x20>
 80068be:	6005      	str	r5, [r0, #0]
 80068c0:	e7d6      	b.n	8006870 <_malloc_r+0xa8>
 80068c2:	bf00      	nop
 80068c4:	20001d44 	.word	0x20001d44

080068c8 <__malloc_lock>:
 80068c8:	4801      	ldr	r0, [pc, #4]	@ (80068d0 <__malloc_lock+0x8>)
 80068ca:	f7ff bf01 	b.w	80066d0 <__retarget_lock_acquire_recursive>
 80068ce:	bf00      	nop
 80068d0:	20001d3c 	.word	0x20001d3c

080068d4 <__malloc_unlock>:
 80068d4:	4801      	ldr	r0, [pc, #4]	@ (80068dc <__malloc_unlock+0x8>)
 80068d6:	f7ff befc 	b.w	80066d2 <__retarget_lock_release_recursive>
 80068da:	bf00      	nop
 80068dc:	20001d3c 	.word	0x20001d3c

080068e0 <__ssputs_r>:
 80068e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	688e      	ldr	r6, [r1, #8]
 80068e6:	461f      	mov	r7, r3
 80068e8:	42be      	cmp	r6, r7
 80068ea:	680b      	ldr	r3, [r1, #0]
 80068ec:	4682      	mov	sl, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	4690      	mov	r8, r2
 80068f2:	d82d      	bhi.n	8006950 <__ssputs_r+0x70>
 80068f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068fc:	d026      	beq.n	800694c <__ssputs_r+0x6c>
 80068fe:	6965      	ldr	r5, [r4, #20]
 8006900:	6909      	ldr	r1, [r1, #16]
 8006902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006906:	eba3 0901 	sub.w	r9, r3, r1
 800690a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800690e:	1c7b      	adds	r3, r7, #1
 8006910:	444b      	add	r3, r9
 8006912:	106d      	asrs	r5, r5, #1
 8006914:	429d      	cmp	r5, r3
 8006916:	bf38      	it	cc
 8006918:	461d      	movcc	r5, r3
 800691a:	0553      	lsls	r3, r2, #21
 800691c:	d527      	bpl.n	800696e <__ssputs_r+0x8e>
 800691e:	4629      	mov	r1, r5
 8006920:	f7ff ff52 	bl	80067c8 <_malloc_r>
 8006924:	4606      	mov	r6, r0
 8006926:	b360      	cbz	r0, 8006982 <__ssputs_r+0xa2>
 8006928:	6921      	ldr	r1, [r4, #16]
 800692a:	464a      	mov	r2, r9
 800692c:	f7ff fed2 	bl	80066d4 <memcpy>
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693a:	81a3      	strh	r3, [r4, #12]
 800693c:	6126      	str	r6, [r4, #16]
 800693e:	6165      	str	r5, [r4, #20]
 8006940:	444e      	add	r6, r9
 8006942:	eba5 0509 	sub.w	r5, r5, r9
 8006946:	6026      	str	r6, [r4, #0]
 8006948:	60a5      	str	r5, [r4, #8]
 800694a:	463e      	mov	r6, r7
 800694c:	42be      	cmp	r6, r7
 800694e:	d900      	bls.n	8006952 <__ssputs_r+0x72>
 8006950:	463e      	mov	r6, r7
 8006952:	6820      	ldr	r0, [r4, #0]
 8006954:	4632      	mov	r2, r6
 8006956:	4641      	mov	r1, r8
 8006958:	f000 faa8 	bl	8006eac <memmove>
 800695c:	68a3      	ldr	r3, [r4, #8]
 800695e:	1b9b      	subs	r3, r3, r6
 8006960:	60a3      	str	r3, [r4, #8]
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	4433      	add	r3, r6
 8006966:	6023      	str	r3, [r4, #0]
 8006968:	2000      	movs	r0, #0
 800696a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696e:	462a      	mov	r2, r5
 8006970:	f000 fac6 	bl	8006f00 <_realloc_r>
 8006974:	4606      	mov	r6, r0
 8006976:	2800      	cmp	r0, #0
 8006978:	d1e0      	bne.n	800693c <__ssputs_r+0x5c>
 800697a:	6921      	ldr	r1, [r4, #16]
 800697c:	4650      	mov	r0, sl
 800697e:	f7ff feb7 	bl	80066f0 <_free_r>
 8006982:	230c      	movs	r3, #12
 8006984:	f8ca 3000 	str.w	r3, [sl]
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	e7e9      	b.n	800696a <__ssputs_r+0x8a>
	...

08006998 <_svfiprintf_r>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	4698      	mov	r8, r3
 800699e:	898b      	ldrh	r3, [r1, #12]
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	b09d      	sub	sp, #116	@ 0x74
 80069a4:	4607      	mov	r7, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	4614      	mov	r4, r2
 80069aa:	d510      	bpl.n	80069ce <_svfiprintf_r+0x36>
 80069ac:	690b      	ldr	r3, [r1, #16]
 80069ae:	b973      	cbnz	r3, 80069ce <_svfiprintf_r+0x36>
 80069b0:	2140      	movs	r1, #64	@ 0x40
 80069b2:	f7ff ff09 	bl	80067c8 <_malloc_r>
 80069b6:	6028      	str	r0, [r5, #0]
 80069b8:	6128      	str	r0, [r5, #16]
 80069ba:	b930      	cbnz	r0, 80069ca <_svfiprintf_r+0x32>
 80069bc:	230c      	movs	r3, #12
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	b01d      	add	sp, #116	@ 0x74
 80069c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ca:	2340      	movs	r3, #64	@ 0x40
 80069cc:	616b      	str	r3, [r5, #20]
 80069ce:	2300      	movs	r3, #0
 80069d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80069d2:	2320      	movs	r3, #32
 80069d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80069dc:	2330      	movs	r3, #48	@ 0x30
 80069de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b7c <_svfiprintf_r+0x1e4>
 80069e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069e6:	f04f 0901 	mov.w	r9, #1
 80069ea:	4623      	mov	r3, r4
 80069ec:	469a      	mov	sl, r3
 80069ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069f2:	b10a      	cbz	r2, 80069f8 <_svfiprintf_r+0x60>
 80069f4:	2a25      	cmp	r2, #37	@ 0x25
 80069f6:	d1f9      	bne.n	80069ec <_svfiprintf_r+0x54>
 80069f8:	ebba 0b04 	subs.w	fp, sl, r4
 80069fc:	d00b      	beq.n	8006a16 <_svfiprintf_r+0x7e>
 80069fe:	465b      	mov	r3, fp
 8006a00:	4622      	mov	r2, r4
 8006a02:	4629      	mov	r1, r5
 8006a04:	4638      	mov	r0, r7
 8006a06:	f7ff ff6b 	bl	80068e0 <__ssputs_r>
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	f000 80a7 	beq.w	8006b5e <_svfiprintf_r+0x1c6>
 8006a10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a12:	445a      	add	r2, fp
 8006a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a16:	f89a 3000 	ldrb.w	r3, [sl]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 809f 	beq.w	8006b5e <_svfiprintf_r+0x1c6>
 8006a20:	2300      	movs	r3, #0
 8006a22:	f04f 32ff 	mov.w	r2, #4294967295
 8006a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a2a:	f10a 0a01 	add.w	sl, sl, #1
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	9307      	str	r3, [sp, #28]
 8006a32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a36:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a38:	4654      	mov	r4, sl
 8006a3a:	2205      	movs	r2, #5
 8006a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a40:	484e      	ldr	r0, [pc, #312]	@ (8006b7c <_svfiprintf_r+0x1e4>)
 8006a42:	f7f9 fbcd 	bl	80001e0 <memchr>
 8006a46:	9a04      	ldr	r2, [sp, #16]
 8006a48:	b9d8      	cbnz	r0, 8006a82 <_svfiprintf_r+0xea>
 8006a4a:	06d0      	lsls	r0, r2, #27
 8006a4c:	bf44      	itt	mi
 8006a4e:	2320      	movmi	r3, #32
 8006a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a54:	0711      	lsls	r1, r2, #28
 8006a56:	bf44      	itt	mi
 8006a58:	232b      	movmi	r3, #43	@ 0x2b
 8006a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a64:	d015      	beq.n	8006a92 <_svfiprintf_r+0xfa>
 8006a66:	9a07      	ldr	r2, [sp, #28]
 8006a68:	4654      	mov	r4, sl
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	f04f 0c0a 	mov.w	ip, #10
 8006a70:	4621      	mov	r1, r4
 8006a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a76:	3b30      	subs	r3, #48	@ 0x30
 8006a78:	2b09      	cmp	r3, #9
 8006a7a:	d94b      	bls.n	8006b14 <_svfiprintf_r+0x17c>
 8006a7c:	b1b0      	cbz	r0, 8006aac <_svfiprintf_r+0x114>
 8006a7e:	9207      	str	r2, [sp, #28]
 8006a80:	e014      	b.n	8006aac <_svfiprintf_r+0x114>
 8006a82:	eba0 0308 	sub.w	r3, r0, r8
 8006a86:	fa09 f303 	lsl.w	r3, r9, r3
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	46a2      	mov	sl, r4
 8006a90:	e7d2      	b.n	8006a38 <_svfiprintf_r+0xa0>
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	1d19      	adds	r1, r3, #4
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	9103      	str	r1, [sp, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bfbb      	ittet	lt
 8006a9e:	425b      	neglt	r3, r3
 8006aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8006aa4:	9307      	strge	r3, [sp, #28]
 8006aa6:	9307      	strlt	r3, [sp, #28]
 8006aa8:	bfb8      	it	lt
 8006aaa:	9204      	strlt	r2, [sp, #16]
 8006aac:	7823      	ldrb	r3, [r4, #0]
 8006aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ab0:	d10a      	bne.n	8006ac8 <_svfiprintf_r+0x130>
 8006ab2:	7863      	ldrb	r3, [r4, #1]
 8006ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ab6:	d132      	bne.n	8006b1e <_svfiprintf_r+0x186>
 8006ab8:	9b03      	ldr	r3, [sp, #12]
 8006aba:	1d1a      	adds	r2, r3, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	9203      	str	r2, [sp, #12]
 8006ac0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ac4:	3402      	adds	r4, #2
 8006ac6:	9305      	str	r3, [sp, #20]
 8006ac8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b8c <_svfiprintf_r+0x1f4>
 8006acc:	7821      	ldrb	r1, [r4, #0]
 8006ace:	2203      	movs	r2, #3
 8006ad0:	4650      	mov	r0, sl
 8006ad2:	f7f9 fb85 	bl	80001e0 <memchr>
 8006ad6:	b138      	cbz	r0, 8006ae8 <_svfiprintf_r+0x150>
 8006ad8:	9b04      	ldr	r3, [sp, #16]
 8006ada:	eba0 000a 	sub.w	r0, r0, sl
 8006ade:	2240      	movs	r2, #64	@ 0x40
 8006ae0:	4082      	lsls	r2, r0
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	3401      	adds	r4, #1
 8006ae6:	9304      	str	r3, [sp, #16]
 8006ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aec:	4824      	ldr	r0, [pc, #144]	@ (8006b80 <_svfiprintf_r+0x1e8>)
 8006aee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006af2:	2206      	movs	r2, #6
 8006af4:	f7f9 fb74 	bl	80001e0 <memchr>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d036      	beq.n	8006b6a <_svfiprintf_r+0x1d2>
 8006afc:	4b21      	ldr	r3, [pc, #132]	@ (8006b84 <_svfiprintf_r+0x1ec>)
 8006afe:	bb1b      	cbnz	r3, 8006b48 <_svfiprintf_r+0x1b0>
 8006b00:	9b03      	ldr	r3, [sp, #12]
 8006b02:	3307      	adds	r3, #7
 8006b04:	f023 0307 	bic.w	r3, r3, #7
 8006b08:	3308      	adds	r3, #8
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b0e:	4433      	add	r3, r6
 8006b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b12:	e76a      	b.n	80069ea <_svfiprintf_r+0x52>
 8006b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b18:	460c      	mov	r4, r1
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	e7a8      	b.n	8006a70 <_svfiprintf_r+0xd8>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	3401      	adds	r4, #1
 8006b22:	9305      	str	r3, [sp, #20]
 8006b24:	4619      	mov	r1, r3
 8006b26:	f04f 0c0a 	mov.w	ip, #10
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b30:	3a30      	subs	r2, #48	@ 0x30
 8006b32:	2a09      	cmp	r2, #9
 8006b34:	d903      	bls.n	8006b3e <_svfiprintf_r+0x1a6>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0c6      	beq.n	8006ac8 <_svfiprintf_r+0x130>
 8006b3a:	9105      	str	r1, [sp, #20]
 8006b3c:	e7c4      	b.n	8006ac8 <_svfiprintf_r+0x130>
 8006b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b42:	4604      	mov	r4, r0
 8006b44:	2301      	movs	r3, #1
 8006b46:	e7f0      	b.n	8006b2a <_svfiprintf_r+0x192>
 8006b48:	ab03      	add	r3, sp, #12
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b88 <_svfiprintf_r+0x1f0>)
 8006b50:	a904      	add	r1, sp, #16
 8006b52:	4638      	mov	r0, r7
 8006b54:	f3af 8000 	nop.w
 8006b58:	1c42      	adds	r2, r0, #1
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	d1d6      	bne.n	8006b0c <_svfiprintf_r+0x174>
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	065b      	lsls	r3, r3, #25
 8006b62:	f53f af2d 	bmi.w	80069c0 <_svfiprintf_r+0x28>
 8006b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b68:	e72c      	b.n	80069c4 <_svfiprintf_r+0x2c>
 8006b6a:	ab03      	add	r3, sp, #12
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <_svfiprintf_r+0x1f0>)
 8006b72:	a904      	add	r1, sp, #16
 8006b74:	4638      	mov	r0, r7
 8006b76:	f000 f879 	bl	8006c6c <_printf_i>
 8006b7a:	e7ed      	b.n	8006b58 <_svfiprintf_r+0x1c0>
 8006b7c:	08007074 	.word	0x08007074
 8006b80:	0800707e 	.word	0x0800707e
 8006b84:	00000000 	.word	0x00000000
 8006b88:	080068e1 	.word	0x080068e1
 8006b8c:	0800707a 	.word	0x0800707a

08006b90 <_printf_common>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	4616      	mov	r6, r2
 8006b96:	4698      	mov	r8, r3
 8006b98:	688a      	ldr	r2, [r1, #8]
 8006b9a:	690b      	ldr	r3, [r1, #16]
 8006b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	bfb8      	it	lt
 8006ba4:	4613      	movlt	r3, r2
 8006ba6:	6033      	str	r3, [r6, #0]
 8006ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bac:	4607      	mov	r7, r0
 8006bae:	460c      	mov	r4, r1
 8006bb0:	b10a      	cbz	r2, 8006bb6 <_printf_common+0x26>
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	6033      	str	r3, [r6, #0]
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	0699      	lsls	r1, r3, #26
 8006bba:	bf42      	ittt	mi
 8006bbc:	6833      	ldrmi	r3, [r6, #0]
 8006bbe:	3302      	addmi	r3, #2
 8006bc0:	6033      	strmi	r3, [r6, #0]
 8006bc2:	6825      	ldr	r5, [r4, #0]
 8006bc4:	f015 0506 	ands.w	r5, r5, #6
 8006bc8:	d106      	bne.n	8006bd8 <_printf_common+0x48>
 8006bca:	f104 0a19 	add.w	sl, r4, #25
 8006bce:	68e3      	ldr	r3, [r4, #12]
 8006bd0:	6832      	ldr	r2, [r6, #0]
 8006bd2:	1a9b      	subs	r3, r3, r2
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	dc26      	bgt.n	8006c26 <_printf_common+0x96>
 8006bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	3b00      	subs	r3, #0
 8006be0:	bf18      	it	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	0692      	lsls	r2, r2, #26
 8006be6:	d42b      	bmi.n	8006c40 <_printf_common+0xb0>
 8006be8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bec:	4641      	mov	r1, r8
 8006bee:	4638      	mov	r0, r7
 8006bf0:	47c8      	blx	r9
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d01e      	beq.n	8006c34 <_printf_common+0xa4>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	6922      	ldr	r2, [r4, #16]
 8006bfa:	f003 0306 	and.w	r3, r3, #6
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	bf02      	ittt	eq
 8006c02:	68e5      	ldreq	r5, [r4, #12]
 8006c04:	6833      	ldreq	r3, [r6, #0]
 8006c06:	1aed      	subeq	r5, r5, r3
 8006c08:	68a3      	ldr	r3, [r4, #8]
 8006c0a:	bf0c      	ite	eq
 8006c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c10:	2500      	movne	r5, #0
 8006c12:	4293      	cmp	r3, r2
 8006c14:	bfc4      	itt	gt
 8006c16:	1a9b      	subgt	r3, r3, r2
 8006c18:	18ed      	addgt	r5, r5, r3
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	341a      	adds	r4, #26
 8006c1e:	42b5      	cmp	r5, r6
 8006c20:	d11a      	bne.n	8006c58 <_printf_common+0xc8>
 8006c22:	2000      	movs	r0, #0
 8006c24:	e008      	b.n	8006c38 <_printf_common+0xa8>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4652      	mov	r2, sl
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	47c8      	blx	r9
 8006c30:	3001      	adds	r0, #1
 8006c32:	d103      	bne.n	8006c3c <_printf_common+0xac>
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	e7c6      	b.n	8006bce <_printf_common+0x3e>
 8006c40:	18e1      	adds	r1, r4, r3
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	2030      	movs	r0, #48	@ 0x30
 8006c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c4a:	4422      	add	r2, r4
 8006c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c54:	3302      	adds	r3, #2
 8006c56:	e7c7      	b.n	8006be8 <_printf_common+0x58>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	4638      	mov	r0, r7
 8006c60:	47c8      	blx	r9
 8006c62:	3001      	adds	r0, #1
 8006c64:	d0e6      	beq.n	8006c34 <_printf_common+0xa4>
 8006c66:	3601      	adds	r6, #1
 8006c68:	e7d9      	b.n	8006c1e <_printf_common+0x8e>
	...

08006c6c <_printf_i>:
 8006c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c70:	7e0f      	ldrb	r7, [r1, #24]
 8006c72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c74:	2f78      	cmp	r7, #120	@ 0x78
 8006c76:	4691      	mov	r9, r2
 8006c78:	4680      	mov	r8, r0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	469a      	mov	sl, r3
 8006c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c82:	d807      	bhi.n	8006c94 <_printf_i+0x28>
 8006c84:	2f62      	cmp	r7, #98	@ 0x62
 8006c86:	d80a      	bhi.n	8006c9e <_printf_i+0x32>
 8006c88:	2f00      	cmp	r7, #0
 8006c8a:	f000 80d2 	beq.w	8006e32 <_printf_i+0x1c6>
 8006c8e:	2f58      	cmp	r7, #88	@ 0x58
 8006c90:	f000 80b9 	beq.w	8006e06 <_printf_i+0x19a>
 8006c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c9c:	e03a      	b.n	8006d14 <_printf_i+0xa8>
 8006c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ca2:	2b15      	cmp	r3, #21
 8006ca4:	d8f6      	bhi.n	8006c94 <_printf_i+0x28>
 8006ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8006cac <_printf_i+0x40>)
 8006ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cac:	08006d05 	.word	0x08006d05
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006c95 	.word	0x08006c95
 8006cb8:	08006c95 	.word	0x08006c95
 8006cbc:	08006c95 	.word	0x08006c95
 8006cc0:	08006c95 	.word	0x08006c95
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006c95 	.word	0x08006c95
 8006ccc:	08006c95 	.word	0x08006c95
 8006cd0:	08006c95 	.word	0x08006c95
 8006cd4:	08006c95 	.word	0x08006c95
 8006cd8:	08006e19 	.word	0x08006e19
 8006cdc:	08006d43 	.word	0x08006d43
 8006ce0:	08006dd3 	.word	0x08006dd3
 8006ce4:	08006c95 	.word	0x08006c95
 8006ce8:	08006c95 	.word	0x08006c95
 8006cec:	08006e3b 	.word	0x08006e3b
 8006cf0:	08006c95 	.word	0x08006c95
 8006cf4:	08006d43 	.word	0x08006d43
 8006cf8:	08006c95 	.word	0x08006c95
 8006cfc:	08006c95 	.word	0x08006c95
 8006d00:	08006ddb 	.word	0x08006ddb
 8006d04:	6833      	ldr	r3, [r6, #0]
 8006d06:	1d1a      	adds	r2, r3, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6032      	str	r2, [r6, #0]
 8006d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d14:	2301      	movs	r3, #1
 8006d16:	e09d      	b.n	8006e54 <_printf_i+0x1e8>
 8006d18:	6833      	ldr	r3, [r6, #0]
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	1d19      	adds	r1, r3, #4
 8006d1e:	6031      	str	r1, [r6, #0]
 8006d20:	0606      	lsls	r6, r0, #24
 8006d22:	d501      	bpl.n	8006d28 <_printf_i+0xbc>
 8006d24:	681d      	ldr	r5, [r3, #0]
 8006d26:	e003      	b.n	8006d30 <_printf_i+0xc4>
 8006d28:	0645      	lsls	r5, r0, #25
 8006d2a:	d5fb      	bpl.n	8006d24 <_printf_i+0xb8>
 8006d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	da03      	bge.n	8006d3c <_printf_i+0xd0>
 8006d34:	232d      	movs	r3, #45	@ 0x2d
 8006d36:	426d      	negs	r5, r5
 8006d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d3c:	4859      	ldr	r0, [pc, #356]	@ (8006ea4 <_printf_i+0x238>)
 8006d3e:	230a      	movs	r3, #10
 8006d40:	e011      	b.n	8006d66 <_printf_i+0xfa>
 8006d42:	6821      	ldr	r1, [r4, #0]
 8006d44:	6833      	ldr	r3, [r6, #0]
 8006d46:	0608      	lsls	r0, r1, #24
 8006d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d4c:	d402      	bmi.n	8006d54 <_printf_i+0xe8>
 8006d4e:	0649      	lsls	r1, r1, #25
 8006d50:	bf48      	it	mi
 8006d52:	b2ad      	uxthmi	r5, r5
 8006d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d56:	4853      	ldr	r0, [pc, #332]	@ (8006ea4 <_printf_i+0x238>)
 8006d58:	6033      	str	r3, [r6, #0]
 8006d5a:	bf14      	ite	ne
 8006d5c:	230a      	movne	r3, #10
 8006d5e:	2308      	moveq	r3, #8
 8006d60:	2100      	movs	r1, #0
 8006d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d66:	6866      	ldr	r6, [r4, #4]
 8006d68:	60a6      	str	r6, [r4, #8]
 8006d6a:	2e00      	cmp	r6, #0
 8006d6c:	bfa2      	ittt	ge
 8006d6e:	6821      	ldrge	r1, [r4, #0]
 8006d70:	f021 0104 	bicge.w	r1, r1, #4
 8006d74:	6021      	strge	r1, [r4, #0]
 8006d76:	b90d      	cbnz	r5, 8006d7c <_printf_i+0x110>
 8006d78:	2e00      	cmp	r6, #0
 8006d7a:	d04b      	beq.n	8006e14 <_printf_i+0x1a8>
 8006d7c:	4616      	mov	r6, r2
 8006d7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d82:	fb03 5711 	mls	r7, r3, r1, r5
 8006d86:	5dc7      	ldrb	r7, [r0, r7]
 8006d88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d8c:	462f      	mov	r7, r5
 8006d8e:	42bb      	cmp	r3, r7
 8006d90:	460d      	mov	r5, r1
 8006d92:	d9f4      	bls.n	8006d7e <_printf_i+0x112>
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d10b      	bne.n	8006db0 <_printf_i+0x144>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	07df      	lsls	r7, r3, #31
 8006d9c:	d508      	bpl.n	8006db0 <_printf_i+0x144>
 8006d9e:	6923      	ldr	r3, [r4, #16]
 8006da0:	6861      	ldr	r1, [r4, #4]
 8006da2:	4299      	cmp	r1, r3
 8006da4:	bfde      	ittt	le
 8006da6:	2330      	movle	r3, #48	@ 0x30
 8006da8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006db0:	1b92      	subs	r2, r2, r6
 8006db2:	6122      	str	r2, [r4, #16]
 8006db4:	f8cd a000 	str.w	sl, [sp]
 8006db8:	464b      	mov	r3, r9
 8006dba:	aa03      	add	r2, sp, #12
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	f7ff fee6 	bl	8006b90 <_printf_common>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d14a      	bne.n	8006e5e <_printf_i+0x1f2>
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	b004      	add	sp, #16
 8006dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	f043 0320 	orr.w	r3, r3, #32
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	4833      	ldr	r0, [pc, #204]	@ (8006ea8 <_printf_i+0x23c>)
 8006ddc:	2778      	movs	r7, #120	@ 0x78
 8006dde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	6831      	ldr	r1, [r6, #0]
 8006de6:	061f      	lsls	r7, r3, #24
 8006de8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dec:	d402      	bmi.n	8006df4 <_printf_i+0x188>
 8006dee:	065f      	lsls	r7, r3, #25
 8006df0:	bf48      	it	mi
 8006df2:	b2ad      	uxthmi	r5, r5
 8006df4:	6031      	str	r1, [r6, #0]
 8006df6:	07d9      	lsls	r1, r3, #31
 8006df8:	bf44      	itt	mi
 8006dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8006dfe:	6023      	strmi	r3, [r4, #0]
 8006e00:	b11d      	cbz	r5, 8006e0a <_printf_i+0x19e>
 8006e02:	2310      	movs	r3, #16
 8006e04:	e7ac      	b.n	8006d60 <_printf_i+0xf4>
 8006e06:	4827      	ldr	r0, [pc, #156]	@ (8006ea4 <_printf_i+0x238>)
 8006e08:	e7e9      	b.n	8006dde <_printf_i+0x172>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	f023 0320 	bic.w	r3, r3, #32
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	e7f6      	b.n	8006e02 <_printf_i+0x196>
 8006e14:	4616      	mov	r6, r2
 8006e16:	e7bd      	b.n	8006d94 <_printf_i+0x128>
 8006e18:	6833      	ldr	r3, [r6, #0]
 8006e1a:	6825      	ldr	r5, [r4, #0]
 8006e1c:	6961      	ldr	r1, [r4, #20]
 8006e1e:	1d18      	adds	r0, r3, #4
 8006e20:	6030      	str	r0, [r6, #0]
 8006e22:	062e      	lsls	r6, r5, #24
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	d501      	bpl.n	8006e2c <_printf_i+0x1c0>
 8006e28:	6019      	str	r1, [r3, #0]
 8006e2a:	e002      	b.n	8006e32 <_printf_i+0x1c6>
 8006e2c:	0668      	lsls	r0, r5, #25
 8006e2e:	d5fb      	bpl.n	8006e28 <_printf_i+0x1bc>
 8006e30:	8019      	strh	r1, [r3, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	4616      	mov	r6, r2
 8006e38:	e7bc      	b.n	8006db4 <_printf_i+0x148>
 8006e3a:	6833      	ldr	r3, [r6, #0]
 8006e3c:	1d1a      	adds	r2, r3, #4
 8006e3e:	6032      	str	r2, [r6, #0]
 8006e40:	681e      	ldr	r6, [r3, #0]
 8006e42:	6862      	ldr	r2, [r4, #4]
 8006e44:	2100      	movs	r1, #0
 8006e46:	4630      	mov	r0, r6
 8006e48:	f7f9 f9ca 	bl	80001e0 <memchr>
 8006e4c:	b108      	cbz	r0, 8006e52 <_printf_i+0x1e6>
 8006e4e:	1b80      	subs	r0, r0, r6
 8006e50:	6060      	str	r0, [r4, #4]
 8006e52:	6863      	ldr	r3, [r4, #4]
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	2300      	movs	r3, #0
 8006e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e5c:	e7aa      	b.n	8006db4 <_printf_i+0x148>
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	4632      	mov	r2, r6
 8006e62:	4649      	mov	r1, r9
 8006e64:	4640      	mov	r0, r8
 8006e66:	47d0      	blx	sl
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d0ad      	beq.n	8006dc8 <_printf_i+0x15c>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	079b      	lsls	r3, r3, #30
 8006e70:	d413      	bmi.n	8006e9a <_printf_i+0x22e>
 8006e72:	68e0      	ldr	r0, [r4, #12]
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	4298      	cmp	r0, r3
 8006e78:	bfb8      	it	lt
 8006e7a:	4618      	movlt	r0, r3
 8006e7c:	e7a6      	b.n	8006dcc <_printf_i+0x160>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4632      	mov	r2, r6
 8006e82:	4649      	mov	r1, r9
 8006e84:	4640      	mov	r0, r8
 8006e86:	47d0      	blx	sl
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d09d      	beq.n	8006dc8 <_printf_i+0x15c>
 8006e8c:	3501      	adds	r5, #1
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	9903      	ldr	r1, [sp, #12]
 8006e92:	1a5b      	subs	r3, r3, r1
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	dcf2      	bgt.n	8006e7e <_printf_i+0x212>
 8006e98:	e7eb      	b.n	8006e72 <_printf_i+0x206>
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	f104 0619 	add.w	r6, r4, #25
 8006ea0:	e7f5      	b.n	8006e8e <_printf_i+0x222>
 8006ea2:	bf00      	nop
 8006ea4:	08007085 	.word	0x08007085
 8006ea8:	08007096 	.word	0x08007096

08006eac <memmove>:
 8006eac:	4288      	cmp	r0, r1
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	eb01 0402 	add.w	r4, r1, r2
 8006eb4:	d902      	bls.n	8006ebc <memmove+0x10>
 8006eb6:	4284      	cmp	r4, r0
 8006eb8:	4623      	mov	r3, r4
 8006eba:	d807      	bhi.n	8006ecc <memmove+0x20>
 8006ebc:	1e43      	subs	r3, r0, #1
 8006ebe:	42a1      	cmp	r1, r4
 8006ec0:	d008      	beq.n	8006ed4 <memmove+0x28>
 8006ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006eca:	e7f8      	b.n	8006ebe <memmove+0x12>
 8006ecc:	4402      	add	r2, r0
 8006ece:	4601      	mov	r1, r0
 8006ed0:	428a      	cmp	r2, r1
 8006ed2:	d100      	bne.n	8006ed6 <memmove+0x2a>
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ede:	e7f7      	b.n	8006ed0 <memmove+0x24>

08006ee0 <_sbrk_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d06      	ldr	r5, [pc, #24]	@ (8006efc <_sbrk_r+0x1c>)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	f7f9 fdd0 	bl	8000a90 <_sbrk>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_sbrk_r+0x1a>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_sbrk_r+0x1a>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	20001d38 	.word	0x20001d38

08006f00 <_realloc_r>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	4680      	mov	r8, r0
 8006f06:	4615      	mov	r5, r2
 8006f08:	460c      	mov	r4, r1
 8006f0a:	b921      	cbnz	r1, 8006f16 <_realloc_r+0x16>
 8006f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f10:	4611      	mov	r1, r2
 8006f12:	f7ff bc59 	b.w	80067c8 <_malloc_r>
 8006f16:	b92a      	cbnz	r2, 8006f24 <_realloc_r+0x24>
 8006f18:	f7ff fbea 	bl	80066f0 <_free_r>
 8006f1c:	2400      	movs	r4, #0
 8006f1e:	4620      	mov	r0, r4
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	f000 f81a 	bl	8006f5c <_malloc_usable_size_r>
 8006f28:	4285      	cmp	r5, r0
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	d802      	bhi.n	8006f34 <_realloc_r+0x34>
 8006f2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f32:	d8f4      	bhi.n	8006f1e <_realloc_r+0x1e>
 8006f34:	4629      	mov	r1, r5
 8006f36:	4640      	mov	r0, r8
 8006f38:	f7ff fc46 	bl	80067c8 <_malloc_r>
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d0ec      	beq.n	8006f1c <_realloc_r+0x1c>
 8006f42:	42b5      	cmp	r5, r6
 8006f44:	462a      	mov	r2, r5
 8006f46:	4621      	mov	r1, r4
 8006f48:	bf28      	it	cs
 8006f4a:	4632      	movcs	r2, r6
 8006f4c:	f7ff fbc2 	bl	80066d4 <memcpy>
 8006f50:	4621      	mov	r1, r4
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7ff fbcc 	bl	80066f0 <_free_r>
 8006f58:	463c      	mov	r4, r7
 8006f5a:	e7e0      	b.n	8006f1e <_realloc_r+0x1e>

08006f5c <_malloc_usable_size_r>:
 8006f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f60:	1f18      	subs	r0, r3, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bfbc      	itt	lt
 8006f66:	580b      	ldrlt	r3, [r1, r0]
 8006f68:	18c0      	addlt	r0, r0, r3
 8006f6a:	4770      	bx	lr

08006f6c <_init>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	bf00      	nop
 8006f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f72:	bc08      	pop	{r3}
 8006f74:	469e      	mov	lr, r3
 8006f76:	4770      	bx	lr

08006f78 <_fini>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	bf00      	nop
 8006f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	469e      	mov	lr, r3
 8006f82:	4770      	bx	lr
